/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:43:35 GMT 2024
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.SocketException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PeerDiscovery_ESTest extends PeerDiscovery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery((-3706), 81);
      // Undeclared exception!
      try { 
        peerDiscovery0.getPeers((-3706), (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery(1312, 1312);
      peerDiscovery0.disconnect();
      try { 
        peerDiscovery0.getPeers(1312, (byte)86);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is closed
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockDatagramSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery(0, 0);
      // Undeclared exception!
      try { 
        peerDiscovery0.getPeers((-2013504258), (byte)113);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = null;
      try {
        peerDiscovery0 = new PeerDiscovery((-2080), (-2080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2080
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery(1264, 162);
      peerDiscovery0.getPeers(1016, (byte)10);
      assertEquals(162, peerDiscovery0.port);
      assertEquals(1264, peerDiscovery0.group);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery(1264, 162);
      PeerDiscovery.ExceptionHandler peerDiscovery_ExceptionHandler0 = peerDiscovery0.new ExceptionHandler();
      assertEquals(162, peerDiscovery0.port);
      assertEquals(1264, peerDiscovery0.group);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PeerDiscovery peerDiscovery0 = new PeerDiscovery(1264, 162);
      MockException mockException0 = new MockException("(2&YA(l6~1p9)");
      peerDiscovery0.rxExceptionHandler.handle(mockException0);
      assertEquals(1264, peerDiscovery0.group);
      assertEquals(162, peerDiscovery0.port);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SystemInUtil.addInputLine("PeerDiscovery$ExceptionHandler");
      PeerDiscovery.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SystemInUtil.addInputLine("q");
      PeerDiscovery.main((String[]) null);
  }
}
