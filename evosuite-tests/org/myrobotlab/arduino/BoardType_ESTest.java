/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:02:49 GMT 2024
 */

package org.myrobotlab.arduino;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.arduino.BoardType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BoardType_ESTest extends BoardType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setName("p%Qj_$9WS");
      String string0 = boardType0.toString();
      assertEquals("p%Qj_$9WS", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.name = "j g]y=O^0$HshB;";
      boardType0.name = "";
      String string0 = boardType0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setName("p%Qj_$9WS");
      String string0 = boardType0.getName();
      assertEquals("p%Qj_$9WS", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.name = "j g]y=O^0$HshB;";
      boardType0.name = "";
      String string0 = boardType0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setId(0);
      int int0 = boardType0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      Integer integer0 = Integer.getInteger("", 1269);
      boardType0.id = integer0;
      int int0 = boardType0.getId();
      assertEquals(1269, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setId((-1));
      int int0 = boardType0.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setBoard("");
      String string0 = boardType0.getBoard();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      boardType0.setBoard("fMq-");
      String string0 = boardType0.getBoard();
      assertEquals("fMq-", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      String string0 = boardType0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      String string0 = boardType0.getBoard();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      String string0 = boardType0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BoardType boardType0 = new BoardType();
      // Undeclared exception!
      try { 
        boardType0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.arduino.BoardType", e);
      }
  }
}
