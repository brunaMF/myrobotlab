/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 13:56:53 GMT 2024
 */

package org.myrobotlab.codec.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.codec.serial.AsciiCodec;
import org.myrobotlab.framework.interfaces.LoggingSink;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AsciiCodec_ESTest extends AsciiCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsciiCodec asciiCodec0 = new AsciiCodec((LoggingSink) null);
      String string0 = asciiCodec0.getKey();
      assertEquals("ascii", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsciiCodec asciiCodec0 = new AsciiCodec((LoggingSink) null);
      String string0 = asciiCodec0.decodeImpl(648);
      assertEquals("\u0088", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsciiCodec asciiCodec0 = new AsciiCodec((LoggingSink) null);
      int[] intArray0 = asciiCodec0.encode("");
      asciiCodec0.decode(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsciiCodec asciiCodec0 = new AsciiCodec((LoggingSink) null);
      assertEquals("ascii", asciiCodec0.getKey());
      
      String string0 = asciiCodec0.getCodecExt();
      assertEquals("asc", string0);
  }
}
