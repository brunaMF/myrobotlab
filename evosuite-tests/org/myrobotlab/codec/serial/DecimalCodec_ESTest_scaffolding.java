/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Apr 06 04:09:08 GMT 2024
 */

package org.myrobotlab.codec.serial;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class DecimalCodec_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.myrobotlab.codec.serial.DecimalCodec"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/iartes/myrobotlab"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(DecimalCodec_ESTest_scaffolding.class.getClassLoader() ,
      "org.myrobotlab.codec.serial.DecimalCodec",
      "org.myrobotlab.framework.interfaces.NameProvider",
      "org.myrobotlab.codec.serial.Codec",
      "org.myrobotlab.logging.LoggerFactory",
      "org.myrobotlab.framework.interfaces.LoggingSink"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(DecimalCodec_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.myrobotlab.logging.LoggerFactory",
      "org.myrobotlab.codec.serial.Codec",
      "org.myrobotlab.codec.serial.DecimalCodec",
      "org.myrobotlab.framework.Service",
      "org.myrobotlab.service.Lidar",
      "org.myrobotlab.framework.MethodCache",
      "org.myrobotlab.framework.MethodCache$MethodIndex",
      "org.myrobotlab.framework.MethodEntry",
      "org.myrobotlab.service.meta.abstracts.MetaData",
      "org.myrobotlab.service.meta.LidarMeta",
      "org.myrobotlab.service.KeyboardSim",
      "org.myrobotlab.service.meta.KeyboardSimMeta",
      "org.myrobotlab.service.Pir",
      "org.myrobotlab.service.meta.PirMeta",
      "org.myrobotlab.service.VirtualArduino",
      "org.myrobotlab.service.meta.VirtualArduinoMeta",
      "org.myrobotlab.service.SegmentDisplay",
      "org.myrobotlab.service.meta.SegmentDisplayMeta",
      "org.myrobotlab.service.interfaces.SpeechSynthesis",
      "org.myrobotlab.service.abstracts.AbstractSpeechSynthesis",
      "org.myrobotlab.service.LocalSpeech",
      "org.myrobotlab.service.meta.abstracts.AbstractSpeechSynthesisMeta",
      "org.myrobotlab.service.meta.LocalSpeechMeta",
      "org.myrobotlab.framework.repo.ServiceDependency",
      "org.myrobotlab.service.Mpu6050",
      "org.myrobotlab.service.meta.Mpu6050Meta",
      "org.myrobotlab.service.OculusDiy",
      "org.myrobotlab.service.meta.OculusDiyMeta",
      "org.myrobotlab.service.interfaces.TextPublisher",
      "org.myrobotlab.service.abstracts.AbstractSpeechRecognizer",
      "org.myrobotlab.service.WebkitSpeechRecognition",
      "org.myrobotlab.service.meta.WebkitSpeechRecognitionMeta",
      "org.myrobotlab.service.GoogleCloud",
      "org.myrobotlab.service.meta.GoogleCloudMeta",
      "org.myrobotlab.service.Android",
      "org.myrobotlab.service.meta.AndroidMeta",
      "org.myrobotlab.service.JavaScript",
      "org.myrobotlab.service.meta.JavaScriptMeta",
      "org.myrobotlab.service.Relay",
      "org.myrobotlab.service.meta.RelayMeta",
      "org.myrobotlab.service.ChessGame",
      "org.myrobotlab.service.meta.ChessGameMeta",
      "org.myrobotlab.service.GoPro",
      "org.myrobotlab.service.meta.GoProMeta",
      "org.myrobotlab.config.ConfigUtils",
      "org.myrobotlab.service.Serial",
      "org.myrobotlab.serial.Port",
      "org.myrobotlab.serial.PortQueue",
      "org.myrobotlab.framework.QueueStats",
      "org.myrobotlab.service.InMoov2Torso",
      "org.myrobotlab.service.meta.InMoov2TorsoMeta",
      "org.myrobotlab.service.OpenNi",
      "org.myrobotlab.service.meta.OpenNiMeta",
      "org.myrobotlab.service.abstracts.AbstractServo",
      "org.myrobotlab.service.DiyServo",
      "org.myrobotlab.service.meta.DiyServoMeta",
      "org.myrobotlab.service.Pid",
      "org.myrobotlab.service.meta.PidMeta",
      "org.myrobotlab.service.Ads1115",
      "org.myrobotlab.service.meta.Ads1115Meta",
      "org.myrobotlab.service.Adafruit16CServoDriver",
      "org.myrobotlab.service.meta.Adafruit16CServoDriverMeta",
      "org.myrobotlab.service._TemplateService",
      "org.myrobotlab.service.meta._TemplateServiceMeta",
      "org.myrobotlab.service.InMoov2Arm",
      "org.myrobotlab.kinematics.DHRobotArm",
      "org.myrobotlab.kinematics.DHLink",
      "org.myrobotlab.math.MathUtils",
      "org.myrobotlab.kinematics.DHLinkType",
      "org.myrobotlab.service.abstracts.AbstractPinEncoder",
      "org.myrobotlab.service.Amt203Encoder",
      "org.myrobotlab.service.meta.Amt203EncoderMeta",
      "org.myrobotlab.service.LeapMotion",
      "org.myrobotlab.service.meta.LeapMotionMeta",
      "org.myrobotlab.service.TesseractOcr",
      "org.myrobotlab.service.meta.TesseractOcrMeta",
      "org.myrobotlab.service.WolframAlpha",
      "org.myrobotlab.service.meta.WolframAlphaMeta",
      "org.myrobotlab.service.abstracts.AbstractMotorController",
      "org.myrobotlab.service.Sabertooth",
      "org.myrobotlab.service.meta.SabertoothMeta",
      "org.myrobotlab.service.Test",
      "org.myrobotlab.service.meta.TestMeta",
      "org.myrobotlab.service.Log",
      "org.myrobotlab.service.meta.LogMeta",
      "org.myrobotlab.service.RoboClaw",
      "org.myrobotlab.service.OakD",
      "org.myrobotlab.service.meta.OakDMeta",
      "org.myrobotlab.service.Roomba",
      "org.myrobotlab.service.meta.RoombaMeta",
      "org.myrobotlab.service.Security",
      "org.myrobotlab.service.interfaces.DocumentPublisher",
      "org.myrobotlab.document.connector.AbstractConnector",
      "org.myrobotlab.service.DatabaseConnector",
      "org.myrobotlab.service.meta.DatabaseConnectorMeta",
      "org.myrobotlab.service.MockGateway",
      "org.myrobotlab.service.meta.MockGatewayMeta",
      "org.myrobotlab.service.Gps",
      "org.myrobotlab.service.meta.GpsMeta",
      "org.myrobotlab.service.VoiceRss",
      "org.myrobotlab.service.meta.VoiceRssMeta",
      "org.myrobotlab.service.Chassis",
      "org.myrobotlab.service.meta.ChassisMeta",
      "org.myrobotlab.service.NeoPixel",
      "org.myrobotlab.service.meta.NeoPixelMeta",
      "org.myrobotlab.service.IpCamera",
      "org.myrobotlab.service.meta.IpCameraMeta",
      "org.myrobotlab.service.TestCatcher",
      "org.myrobotlab.service.meta.TestCatcherMeta",
      "org.myrobotlab.service.WatchDogTimer",
      "org.myrobotlab.service.meta.WatchDogTimerMeta",
      "org.myrobotlab.service.CsvConnector",
      "org.myrobotlab.service.meta.CsvConnectorMeta",
      "org.myrobotlab.service.meta.SecurityMeta",
      "org.myrobotlab.service.SerialRelay",
      "org.myrobotlab.service.meta.SerialRelayMeta",
      "org.myrobotlab.service.MouthControl",
      "org.myrobotlab.service.meta.MouthControlMeta",
      "org.myrobotlab.service.TestThrower",
      "org.myrobotlab.service.meta.TestThrowerMeta"
    );
  }
}
