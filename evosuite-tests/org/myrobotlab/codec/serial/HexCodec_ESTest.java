/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 07 20:34:29 GMT 2024
 */

package org.myrobotlab.codec.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.codec.serial.HexCodec;
import org.myrobotlab.framework.interfaces.LoggingSink;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HexCodec_ESTest extends HexCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)119;
      // Undeclared exception!
      try { 
        hexCodec0.parse(byteArray0, "hex");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 5 out of bounds for length 5
         //
         verifyException("org.myrobotlab.codec.serial.HexCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      byte[] byteArray0 = hexCodec0.parse((byte[]) null, "FtL");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      // Undeclared exception!
      try { 
        hexCodec0.parse((byte[]) null, "hex");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.codec.serial.HexCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      String string0 = hexCodec0.getKey();
      assertEquals("hex", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = hexCodec0.parse(byteArray0, "hex");
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = hexCodec0.parse(byteArray0, "BD ");
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      hexCodec0.byteCount = (-1777);
      String string0 = hexCodec0.decodeImpl(189);
      assertEquals("BD \n", string0);
      
      String string1 = hexCodec0.decodeImpl(1836);
      assertEquals("2C ", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      String string0 = hexCodec0.decodeImpl(189);
      assertEquals("BD ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      String string0 = hexCodec0.decode((int[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      String string0 = hexCodec0.getCodecExt();
      assertEquals("hex", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HexCodec hexCodec0 = new HexCodec((LoggingSink) null);
      int[] intArray0 = hexCodec0.encode("B1 ");
      assertEquals(0, intArray0.length);
  }
}
