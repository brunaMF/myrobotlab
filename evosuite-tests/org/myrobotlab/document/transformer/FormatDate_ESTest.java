/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:36:59 GMT 2024
 */

package org.myrobotlab.document.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.myrobotlab.document.Document;
import org.myrobotlab.document.transformer.FormatDate;
import org.myrobotlab.document.transformer.StageConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FormatDate_ESTest extends FormatDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      stageConfiguration0.config = null;
      // Undeclared exception!
      try { 
        formatDate0.startStage(stageConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.StageConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      Integer integer0 = new Integer(0);
      stageConfiguration0.setIntegerParam("formatString", integer0);
      // Undeclared exception!
      try { 
        formatDate0.startStage(stageConfiguration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      Document document0 = new Document("date");
      formatDate0.startStage((StageConfiguration) null);
      MockDate mockDate0 = new MockDate((-105), (-105), (-1026));
      document0.setField("date", (Object) mockDate0);
      List<Document> list0 = formatDate0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      Document document0 = new Document("date");
      MockDate mockDate0 = new MockDate((-105), (-105), (-1026));
      document0.setField("date", (Object) mockDate0);
      // Undeclared exception!
      try { 
        formatDate0.processDocument(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.FormatDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      Document document0 = new Document("formatString");
      List<Document> list0 = formatDate0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      Document document0 = new Document("date");
      Object object0 = new Object();
      document0.setField("date", object0);
      List<Document> list0 = formatDate0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      formatDate0.flush();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FormatDate formatDate0 = new FormatDate();
      formatDate0.stopStage();
  }
}
