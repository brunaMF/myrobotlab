/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:26:49 GMT 2024
 */

package org.myrobotlab.document.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.document.Document;
import org.myrobotlab.document.transformer.RegexExtractor;
import org.myrobotlab.document.transformer.StageConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RegexExtractor_ESTest extends RegexExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setRegex("org.myrobotlab.document.transformer.Configuration");
      String string0 = regexExtractor0.getRegex();
      assertEquals("org.myrobotlab.document.transformer.Configuration", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setRegex("");
      String string0 = regexExtractor0.getRegex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setOutputField("Ses%z{2=j[ 1{O:KK$");
      String string0 = regexExtractor0.getOutputField();
      assertEquals("Ses%z{2=j[ 1{O:KK$", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setOutputField("");
      String string0 = regexExtractor0.getOutputField();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setInputField("Le?ei$*rVm2");
      String string0 = regexExtractor0.getInputField();
      assertEquals("Le?ei$*rVm2", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setInputField("");
      String string0 = regexExtractor0.getInputField();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setRegex("[ub<f10{%&5");
      // Undeclared exception!
      try { 
        regexExtractor0.startStage((StageConfiguration) null);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 10
         // [ub<f10{%&5
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.setInputField("ioyMV'");
      regexExtractor0.setRegex("ioyMV'");
      Document document0 = new Document("ioyMV'");
      regexExtractor0.startStage((StageConfiguration) null);
      document0.setField("ioyMV'", (Object) regexExtractor0);
      List<Document> list0 = regexExtractor0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.processOnlyNull = true;
      regexExtractor0.setInputField("Wk(jt*u:|kOqtg#m, ");
      Document document0 = new Document("V`d8/ww`J_3ZD");
      regexExtractor0.setOutputField("Wk(jt*u:|kOqtg#m, ");
      document0.addToField("Wk(jt*u:|kOqtg#m, ", "Wk(jt*u:|kOqtg#m, ");
      List<Document> list0 = regexExtractor0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.processOnlyNull = true;
      regexExtractor0.setInputField("Wk(jt*u:|kOqtg#m, ");
      Document document0 = new Document("Wk(jt*u:|kOqtg#m, ");
      document0.addToField("Wk(jt*u:|kOqtg#m, ", "Wk(jt*u:|kOqtg#m, ");
      // Undeclared exception!
      try { 
        regexExtractor0.processDocument(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.RegexExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      Document document0 = new Document("Le?ei$*rVm2");
      List<Document> list0 = regexExtractor0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration("keepGroups", "keepGroups");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast("org.myrobotlab.document.transformer.RegexExtractor");
      stageConfiguration0.setListParam("keepGroups", linkedList0);
      // Undeclared exception!
      try { 
        regexExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.myrobotlab.document.transformer.RegexExtractor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      stageConfiguration0.setListParam("keepGroups", linkedList0);
      // Undeclared exception!
      try { 
        regexExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration("vRK2!l,$nDQdmL", "vRK2!l,$nDQdmL");
      // Undeclared exception!
      try { 
        regexExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.flush();
      assertNull(regexExtractor0.getInputField());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      String string0 = regexExtractor0.getOutputField();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      String string0 = regexExtractor0.getRegex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      String string0 = regexExtractor0.getInputField();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegexExtractor regexExtractor0 = new RegexExtractor();
      regexExtractor0.stopStage();
      assertNull(regexExtractor0.getOutputField());
  }
}
