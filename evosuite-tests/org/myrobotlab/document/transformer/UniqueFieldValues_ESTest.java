/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:16:48 GMT 2024
 */

package org.myrobotlab.document.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.document.Document;
import org.myrobotlab.document.transformer.StageConfiguration;
import org.myrobotlab.document.transformer.UniqueFieldValues;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UniqueFieldValues_ESTest extends UniqueFieldValues_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.setFieldName("nd{A5=s_en=klH4^9R4");
      String string0 = uniqueFieldValues0.getFieldName();
      assertEquals("nd{A5=s_en=klH4^9R4", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      // Undeclared exception!
      try { 
        uniqueFieldValues0.startStage((StageConfiguration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.UniqueFieldValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.setFieldName("s{@:fK");
      Document document0 = new Document("s{@:fK");
      document0.addToField("s{@:fK", document0);
      // Undeclared exception!
      try { 
        uniqueFieldValues0.processDocument(document0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      // Undeclared exception!
      try { 
        uniqueFieldValues0.processDocument((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.UniqueFieldValues", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.setFieldName("nd{A5=s_en=klH4^9R4");
      Document document0 = new Document("");
      Object object0 = new Object();
      document0.addToField("nd{A5=s_en=klH4^9R4", object0);
      List<Document> list0 = uniqueFieldValues0.processDocument(document0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      String string0 = uniqueFieldValues0.getFieldName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.flush();
      assertNull(uniqueFieldValues0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      uniqueFieldValues0.startStage(stageConfiguration0);
      assertEquals("org.myrobotlab.document.transformer.AbstractStage", stageConfiguration0.getStageClass());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.stopStage();
      assertNull(uniqueFieldValues0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      UniqueFieldValues uniqueFieldValues0 = new UniqueFieldValues();
      uniqueFieldValues0.setFieldName("");
      String string0 = uniqueFieldValues0.getFieldName();
      assertEquals("", string0);
  }
}
