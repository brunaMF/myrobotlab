/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:34:45 GMT 2024
 */

package org.myrobotlab.document.transformer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.HashMap;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.myrobotlab.document.Document;
import org.myrobotlab.document.transformer.StageConfiguration;
import org.myrobotlab.document.transformer.XPathExtractor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XPathExtractor_ESTest extends XPathExtractor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertTrue(xPathExtractor0.isUseNamespaces());
      
      xPathExtractor0.setUseNamespaces(false);
      assertFalse(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@C6},c&qpGL");
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.processOnlyNull = true;
      xPathExtractor0.startStage(stageConfiguration0);
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "nI;F~6)Np@5");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration("", "");
      xPathExtractor0.startStage(stageConfiguration0);
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.loadConfig("");
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      HashMap<XPathExpression, ArrayList<String>> hashMap0 = xPathExtractor0.loadConfig("config/xpaths.txt");
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertNotNull(hashMap0);
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.useNamespaces = true;
      assertTrue(xPathExtractor0.isUseNamespaces());
      
      xPathExtractor0.useNamespaces = false;
      xPathExtractor0.isUseNamespaces();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertEquals("xml", xPathExtractor0.getXmlField());
      
      xPathExtractor0.setXmlField((String) null);
      String string0 = xPathExtractor0.getXmlField();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertNull(string0);
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertEquals("xml", xPathExtractor0.getXmlField());
      
      xPathExtractor0.xmlField = "";
      String string0 = xPathExtractor0.getXmlField();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      
      xPathExtractor0.configFile = null;
      xPathExtractor0.getConfigFile();
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      
      xPathExtractor0.configFile = "";
      String string0 = xPathExtractor0.getConfigFile();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "nI;F~6)Np@5");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration("nI;F~6)Np@5", "nI;F~6)Np@5");
      // Undeclared exception!
      try { 
        xPathExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      stageConfiguration0.config = null;
      // Undeclared exception!
      try { 
        xPathExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.StageConfiguration", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ",");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      // Undeclared exception!
      try { 
        xPathExtractor0.startStage(stageConfiguration0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.myrobotlab.document.transformer.XPathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("xml");
      document0.setField("xml", (Object) document0);
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      // Undeclared exception!
      try { 
        xPathExtractor0.processDocument(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.myrobotlab.document.Document cannot be cast to class java.lang.String (org.myrobotlab.document.Document is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @37b16b5e; java.lang.String is in module java.base of loader 'bootstrap')
         //
         verifyException("org.myrobotlab.document.transformer.XPathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Lu");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      // Undeclared exception!
      try { 
        xPathExtractor0.loadConfig("config/xpaths.txt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      // Undeclared exception!
      try { 
        xPathExtractor0.loadConfig((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.startStage((StageConfiguration) null);
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#");
      StageConfiguration stageConfiguration0 = new StageConfiguration("#", "#");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.startStage(stageConfiguration0);
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@C6,WqG");
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.startStage(stageConfiguration0);
      HashMap<XPathExpression, ArrayList<String>> hashMap0 = xPathExtractor0.loadConfig("config/xpaths.txt");
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertFalse(hashMap0.isEmpty());
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("config/xpaths.txt");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "vtoPqJ~,r3b=?K=");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      xPathExtractor0.startStage(stageConfiguration0);
      try { 
        xPathExtractor0.loadConfig("config/xpaths.txt");
        fail("Expecting exception: XPathExpressionException");
      
      } catch(XPathExpressionException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("xml");
      document0.setField("xml", (Object) "xml");
      StageConfiguration stageConfiguration0 = new StageConfiguration();
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.startStage(stageConfiguration0);
      xPathExtractor0.processDocument(document0);
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      Document document0 = new Document("config/xpaths.txt");
      xPathExtractor0.processDocument(document0);
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document("xml");
      document0.setField("xml", (Object) "xml");
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      // Undeclared exception!
      try { 
        xPathExtractor0.processDocument(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.transformer.XPathExtractor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.setUseNamespaces(true);
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      String string0 = xPathExtractor0.getConfigFile();
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("config/xpaths.txt", string0);
      assertEquals("xml", xPathExtractor0.getXmlField());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.stopStage();
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      
      xPathExtractor0.setConfigFile((String) null);
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      String string0 = xPathExtractor0.getXmlField();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(xPathExtractor0.isUseNamespaces());
      assertEquals("xml", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      xPathExtractor0.flush();
      assertEquals("xml", xPathExtractor0.getXmlField());
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(xPathExtractor0.isUseNamespaces());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathExtractor xPathExtractor0 = new XPathExtractor();
      boolean boolean0 = xPathExtractor0.isUseNamespaces();
      assertEquals("config/xpaths.txt", xPathExtractor0.getConfigFile());
      assertTrue(boolean0);
      assertEquals("xml", xPathExtractor0.getXmlField());
  }
}
