/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:13:30 GMT 2024
 */

package org.myrobotlab.document.xml;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.myrobotlab.document.xml.RecordingInputStream;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RecordingInputStream_ESTest extends RecordingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      long long0 = recordingInputStream0.skip((-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      byteArrayOutputStream0.writeBytes(byteArray0);
      String string0 = recordingInputStream0.returnUpTo("8Ko,");
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)70);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      String string0 = recordingInputStream0.returnUpTo("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3426, (-670));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(bufferedInputStream0);
      int int0 = recordingInputStream0.read(byteArray0, (int) (byte)0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      byte[] byteArray0 = new byte[7];
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(sequenceInputStream0, byteArrayOutputStream0);
      int int0 = recordingInputStream0.read(byteArray0, (-2122), (int) (byte) (-6));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      int int0 = recordingInputStream0.read(byteArray0);
      assertEquals(8, byteArrayOutputStream0.size());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      int int0 = recordingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = InputStream.nullInputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(inputStream0);
      int int0 = recordingInputStream0.read();
      assertEquals((-1), int0);
      
      byte[] byteArray0 = recordingInputStream0.getBytes();
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RecordingInputStream recordingInputStream0 = new RecordingInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        recordingInputStream0.skip(1455L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.xml.RecordingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(bufferedInputStream0);
      try { 
        recordingInputStream0.skip(3014L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.returnUpTo("./bin");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.read((byte[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.read(byteArray0, (-3418), 3387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RecordingInputStream recordingInputStream0 = new RecordingInputStream((InputStream) null);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        recordingInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.xml.RecordingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(bufferedInputStream0, byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      try { 
        recordingInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream((InputStream) null, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.xml.RecordingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1048);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(123);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(pipedInputStream0, byteArrayOutputStream0);
      try { 
        recordingInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      RecordingInputStream recordingInputStream1 = new RecordingInputStream(recordingInputStream0, (ByteArrayOutputStream) null);
      // Undeclared exception!
      try { 
        recordingInputStream1.getBytes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.document.xml.RecordingInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(bufferedInputStream0, byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.clearUpTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      long long0 = recordingInputStream0.transferTo(byteArrayOutputStream0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      recordingInputStream0.clearUpTo("");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      recordingInputStream0.clearUpTo("rElMBv8F$B<swVp");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      long long0 = recordingInputStream0.skip(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      long long0 = recordingInputStream0.skip(2300L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        recordingInputStream0.returnUpTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(bufferedInputStream0, byteArrayOutputStream0);
      byte[] byteArray0 = recordingInputStream0.getBytes();
      int int0 = recordingInputStream0.read(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0, byteArrayOutputStream0);
      int int0 = recordingInputStream0.read();
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      RecordingInputStream recordingInputStream0 = new RecordingInputStream(byteArrayInputStream0);
      recordingInputStream0.resetSink();
  }
}
