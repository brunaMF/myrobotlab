/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:32:42 GMT 2024
 */

package org.myrobotlab.framework;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.framework.MRLListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MRLListener_ESTest extends MRLListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("org.myrobotlab.framework.Instanttator", "DEBUG", "%s -will activate-> %s.%s");
      mRLListener0.hashCode();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("org.myrobotlab.framework.Instanttator", "DEBUG", "%s -will activate-> %s.%s");
      boolean boolean0 = mRLListener0.equals(mRLListener0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("DEBUG", "DEBUG", "DEBUG");
      MRLListener mRLListener1 = new MRLListener("org.myrobotlab.framework.MRLListener", "DEBUG", "DEBUG");
      boolean boolean0 = mRLListener1.equals(mRLListener0);
      assertFalse(boolean0);
      assertFalse(mRLListener0.equals((Object)mRLListener1));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener((String) null, "%s -will activate-> %s.%s", (String) null);
      // Undeclared exception!
      try { 
        mRLListener0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.framework.MRLListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("RILE", "RILE", "RILE");
      MRLListener mRLListener1 = new MRLListener("RILE", "RILE", "FILE");
      boolean boolean0 = mRLListener0.equals(mRLListener1);
      assertFalse(mRLListener1.equals((Object)mRLListener0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("DEBUG", "DEBUG", "DEBUG");
      MRLListener mRLListener1 = new MRLListener("DEBUG", "org.myrobotlab.framework.MRLListener", "DEBUG");
      boolean boolean0 = mRLListener0.equals(mRLListener1);
      assertFalse(boolean0);
      assertFalse(mRLListener1.equals((Object)mRLListener0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("LR.=k", "cjS>%RFMwZ1UCvo $", "cjS>%RFMwZ1UCvo $");
      Object object0 = new Object();
      boolean boolean0 = mRLListener0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[5];
          // Undeclared exception!
          try { 
            MRLListener.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"myrobotlab.log\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
             // java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:225)
             // ch.qos.logback.core.recovery.ResilientFileOutputStream.<init>(ResilientFileOutputStream.java:26)
             // ch.qos.logback.core.FileAppender.openFile(FileAppender.java:204)
             // ch.qos.logback.core.FileAppender.start(FileAppender.java:127)
             // org.myrobotlab.logging.LoggingSLF4J.addAppender(LoggingSLF4J.java:64)
             // org.myrobotlab.logging.LoggingSLF4J.addAppender(LoggingSLF4J.java:26)
             // org.myrobotlab.logging.LoggingSLF4J.configure(LoggingSLF4J.java:83)
             // org.myrobotlab.logging.LoggingFactory.init(LoggingFactory.java:29)
             // org.myrobotlab.framework.MRLListener.main(MRLListener.java:103)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener("org.myrobotlab.framework.Instanttator", "DEBUG", "%s -will activate-> %s.%s");
      String string0 = mRLListener0.toString();
      assertEquals("org.myrobotlab.framework.Instanttator -will activate-> DEBUG.%s -will activate-> %s.%s", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MRLListener mRLListener0 = new MRLListener();
      // Undeclared exception!
      try { 
        mRLListener0.equals(mRLListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
