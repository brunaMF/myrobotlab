/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:59:07 GMT 2024
 */

package org.myrobotlab.image;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.IndexColorModel;
import java.awt.image.LookupOp;
import java.awt.image.RescaleOp;
import java.util.HashMap;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.image.Algorithm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Algorithm_ESTest extends Algorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(328, 2, 2);
      BufferedImage[] bufferedImageArray0 = new BufferedImage[9];
      bufferedImageArray0[0] = bufferedImage0;
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2341.7556F;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      bufferedImageArray0[1] = bufferedImage1;
      bufferedImageArray0[2] = bufferedImage0;
      bufferedImageArray0[3] = bufferedImage0;
      bufferedImageArray0[4] = bufferedImage0;
      bufferedImageArray0[5] = bufferedImage0;
      bufferedImageArray0[6] = bufferedImage0;
      bufferedImageArray0[7] = bufferedImage0;
      bufferedImageArray0[8] = bufferedImage0;
      BufferedImage bufferedImage2 = Algorithm.average(bufferedImageArray0);
      assertEquals(2, bufferedImage2.getTileHeight());
      assertEquals(328, bufferedImage2.getTileWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(328, 2, 2);
      BufferedImage[] bufferedImageArray0 = new BufferedImage[9];
      bufferedImageArray0[0] = bufferedImage0;
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2341.7556F;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      // Undeclared exception!
      try { 
        Algorithm.average(bufferedImageArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.image.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(328, 328);
      BufferedImage bufferedImage0 = new BufferedImage(328, 2, 2);
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (float) 2;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      // Undeclared exception!
      try { 
        Algorithm.average(bufferedImage0, rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(328, 328);
      BufferedImage bufferedImage0 = new BufferedImage(328, 2, 2);
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2341.7556F;
      HashMap<RenderingHints.Key, Object> hashMap0 = new HashMap<RenderingHints.Key, Object>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray1, renderingHints0);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      // Undeclared exception!
      try { 
        Algorithm.average(bufferedImage0, rectangle0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(315, 1, 1);
      Rectangle rectangle0 = new Rectangle((-2116), (-1), 315, 1);
      // Undeclared exception!
      try { 
        Algorithm.average(bufferedImage0, rectangle0, (-2116));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Rectangle rectangle0 = new Rectangle(2, 2);
      byte[][] byteArray0 = new byte[1][7];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)28;
      byteArray0[0] = byteArray1;
      ByteLookupTable byteLookupTable0 = new ByteLookupTable(0, byteArray0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      LookupOp lookupOp0 = new LookupOp(byteLookupTable0, renderingHints0);
      BufferedImage bufferedImage1 = lookupOp0.filter(bufferedImage0, bufferedImage0);
      Color color0 = Algorithm.average(bufferedImage1, rectangle0, 1220);
      assertEquals((-14935040), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Rectangle rectangle0 = new Rectangle(2, 2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      IndexColorModel indexColorModel0 = new IndexColorModel(2, 2, byteArray0, byteArray0, byteArray0, byteArray0);
      ColorSpace colorSpace0 = indexColorModel0.getColorSpace();
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(colorSpace0, (RenderingHints) null);
      BufferedImage bufferedImage1 = colorConvertOp0.createCompatibleDestImage(bufferedImage0, indexColorModel0);
      Color color0 = Algorithm.average(bufferedImage1, rectangle0);
      assertEquals((-9211021), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Rectangle rectangle0 = new Rectangle(2, 2);
      Color color0 = Algorithm.average(bufferedImage0, rectangle0);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2992, 2, 2);
      BufferedImage[] bufferedImageArray0 = new BufferedImage[7];
      bufferedImageArray0[0] = bufferedImage0;
      bufferedImageArray0[1] = bufferedImage0;
      bufferedImageArray0[2] = bufferedImage0;
      bufferedImageArray0[3] = bufferedImage0;
      bufferedImageArray0[4] = bufferedImage0;
      bufferedImageArray0[5] = bufferedImage0;
      bufferedImageArray0[6] = bufferedImage0;
      // Undeclared exception!
      Algorithm.average(bufferedImageArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedImage[] bufferedImageArray0 = new BufferedImage[0];
      // Undeclared exception!
      try { 
        Algorithm.average(bufferedImageArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.myrobotlab.image.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Rectangle rectangle0 = new Rectangle(1, 1);
      // Undeclared exception!
      Algorithm.average(bufferedImage0, rectangle0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Algorithm.average((BufferedImage) null, (Rectangle) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.image.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        Algorithm.average((BufferedImage) null, (Rectangle) defaultCaret0, (-560783));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.myrobotlab.image.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.add(360.49443179029674, 2701.1136442581987);
      // Undeclared exception!
      try { 
        Algorithm.average((BufferedImage) null, (Rectangle) defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.image.Algorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(328, 328);
      BufferedImage bufferedImage0 = new BufferedImage(328, 2, 2);
      Color color0 = Algorithm.average(bufferedImage0, rectangle0, 328);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Algorithm algorithm0 = new Algorithm();
      assertEquals(1, Algorithm.OUTLINE);
  }
}
