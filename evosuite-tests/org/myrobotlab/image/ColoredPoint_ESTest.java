/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 03:00:18 GMT 2024
 */

package org.myrobotlab.image;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.image.ColoredPoint;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ColoredPoint_ESTest extends ColoredPoint_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      coloredPoint0.color = 824;
      ColoredPoint coloredPoint1 = new ColoredPoint(coloredPoint0);
      assertEquals(0, coloredPoint1.y);
      assertEquals(0, coloredPoint1.x);
      assertEquals(824, coloredPoint1.color);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      coloredPoint0.y = 8;
      coloredPoint0.set(coloredPoint0);
      assertEquals(8, coloredPoint0.y);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      assertEquals(0, coloredPoint0.getRed());
      
      coloredPoint0.color = (-2292);
      int int0 = coloredPoint0.getRed();
      assertEquals(255, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      coloredPoint0.color = 824;
      int int0 = coloredPoint0.getGreen();
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      coloredPoint0.color = 824;
      int int0 = coloredPoint0.getBlue();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      coloredPoint0.color = (-643);
      coloredPoint0.getAWTColor();
      assertEquals(253, coloredPoint0.getBlue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      // Undeclared exception!
      try { 
        coloredPoint0.set((ColoredPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.image.ColoredPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColoredPoint coloredPoint0 = null;
      try {
        coloredPoint0 = new ColoredPoint((ColoredPoint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.image.ColoredPoint", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      int int0 = coloredPoint0.getRed();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      int int0 = coloredPoint0.getGreen();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      int int0 = coloredPoint0.getBlue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      Color color0 = coloredPoint0.getAWTColor();
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ColoredPoint coloredPoint0 = new ColoredPoint();
      ColoredPoint coloredPoint1 = new ColoredPoint(coloredPoint0);
      coloredPoint1.color = (-3150);
      coloredPoint1.set(coloredPoint0);
      assertEquals(0, coloredPoint1.getBlue());
  }
}
