/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:01:05 GMT 2024
 */

package org.myrobotlab.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.junit.runner.RunWith;
import org.myrobotlab.io.StreamGobbler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StreamGobbler_ESTest extends StreamGobbler_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      File file0 = MockFile.createTempFile("CrVilkXrsO:q", "CrVilkXrsO:q", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      file0.delete();
      StreamGobbler streamGobbler0 = new StreamGobbler("CrVilkXrsO:q", mockFileInputStream0, (OutputStream) null);
      streamGobbler0.run();
      assertEquals(0, streamGobbler0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&$_Wm^&v#2=,y", false);
      StreamGobbler streamGobbler0 = new StreamGobbler("&$_Wm^&v#2=,y", (InputStream) null, mockFileOutputStream0);
      // Undeclared exception!
      try { 
        streamGobbler0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGobbler streamGobbler0 = null;
      try {
        streamGobbler0 = new StreamGobbler((String) null, byteArrayInputStream0, byteArrayOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGobbler streamGobbler0 = null;
      try {
        streamGobbler0 = new StreamGobbler((String) null, byteArrayInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name cannot be null
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGobbler streamGobbler0 = new StreamGobbler("|jjh4Ew*", byteArrayInputStream0, byteArrayOutputStream0);
      streamGobbler0.run();
      assertEquals("\u0000\u0000\n", byteArrayOutputStream0.toString());
      assertEquals(3, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StreamGobbler streamGobbler0 = new StreamGobbler("resolved.*.xml$", byteArrayInputStream0);
      streamGobbler0.run();
      assertEquals(0, streamGobbler0.countStackFrames());
  }
}
