/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:58:10 GMT 2024
 */

package org.myrobotlab.kinematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.kinematics.DHLink;
import org.myrobotlab.kinematics.DHLinkType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DHLink_ESTest extends DHLink_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.rotate(1.0);
      dHLink0.getPositionValueDeg();
      assertEquals(1.0, dHLink0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.addPositionValue((-4250.0));
      assertEquals((-77.3180858633488), dHLink0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", (-1461.3022557362733), 3449.0, (-1461.3022557362733), (-3.141592653589793), 3449.0);
      assertEquals((-1461.3022557362733), dHLink0.getInitialTheta(), 0.01);
      
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.incrRotate(0.0);
      assertEquals((-3.141592653589793), dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      dHLink0.rotate(0.0);
      dHLink0.incrRotate((-3.141592653589793));
      assertEquals((-3.141592653589793), dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      dHLink0.setTheta(0.0);
      dHLink0.incrRotate(3.141592653589793);
      assertEquals(3.141592653589793, dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DHLink dHLink0 = new DHLink(" %Xao", (-1005.01454), (-2327.832), 1838.96956360719, 0.0, (-2327.832));
      dHLink0.setAlpha(1.0);
      assertEquals(1.0, dHLink0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DHLink dHLink0 = new DHLink("{Qp/ET83SU52;+0VN9]", 3.141592653589793, (-1.0), (-1364.27462), 3.141592653589793, 3.141592653589793);
      dHLink0.setTheta(2372.72387412);
      assertEquals(135947.06393700602, dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.Matrix", (-3.141592653589793), 2146.83675163, (-1.0E-6), 2146.83675163, (-1.0E-6));
      dHLink0.setA(100.4);
      assertEquals(100.4, dHLink0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      
      dHLink0.setMin(0.0);
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.rotate(0.0);
      assertEquals(180.0, dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DHLink dHLink0 = new DHLink("e)", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.rotate(3.141592653589793);
      assertEquals(3.141592653589793, dHLink0.getAlpha(), 0.01);
      assertEquals((-801.3336639483825), dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DHLink dHLink0 = new DHLink("{Qp/ET83SU52;+0VN9]", 3.141592653589793, (-1.0), (-1364.27462), 3.141592653589793, 3.141592653589793);
      dHLink0.rotate((-3.141592653589793));
      assertEquals((-180.0), dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", 3554.0219852237487, 3554.0219852237487, 0.0, 3554.0219852237487, 3554.0219852237487);
      dHLink0.setMax((-240.9834772156387));
      dHLink0.rotate((-240.9834772156387));
      assertEquals((-240.9834772156387), dHLink0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", (-1822.3567498795476), (-1822.3567498795476), 0.0, (-469.7169270099));
      double double0 = dHLink0.zeroQuantize((-1.0));
      assertEquals((-1822.3567498795476), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-469.7169270099), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-1822.3567498795476), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DHLink dHLink0 = new DHLink("{Qp/ET83SU52;+0VN9]", 3.141592653589793, (-1.0), (-1364.27462), 3.141592653589793, 3.141592653589793);
      double double0 = dHLink0.zeroQuantize(646.9692416);
      assertEquals((-1.0), dHLink0.getA(), 0.01);
      assertEquals(646.9692416, double0, 0.01);
      assertEquals(3.141592653589793, dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(3.141592653589793, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-1364.27462), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-1364.27462), dHLink0.getTheta(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.Matrix", (-3.141592653589793), 2146.83675163, (-1.0E-6), 2146.83675163, (-1.0E-6));
      dHLink0.resolveMatrix();
      assertEquals(2146.83675163, dHLink0.getAlpha(), 0.01);
      assertEquals((-1.0E-6), dHLink0.getInitialTheta(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals((-1.0E-6), dHLink0.offset, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
      assertEquals((-5.729577951308232E-5), dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      dHLink0.resolveMatrix();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-1.0), dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      dHLink0.setCurrentPos((-1398.90691));
      DHLink dHLink1 = new DHLink(dHLink0);
      assertEquals((-1398.90691), dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink1.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      dHLink0.servoMin = 1153.5424627093;
      DHLink dHLink1 = new DHLink(dHLink0);
      assertEquals(0.0, dHLink1.getVelocity(), 0.01);
      assertEquals(3.141592653589793, dHLink1.getMax(), 0.01);
      assertEquals(1153.5424627093, dHLink1.getInitialTheta(), 0.01);
      assertEquals(1153.5424627093, dHLink1.getD(), 0.01);
      assertEquals(0.0, dHLink1.servoMax, 0.01);
      assertEquals(1153.5424627093, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink1.offset, 0.01);
      assertEquals(0.0, dHLink1.getAlpha(), 0.01);
      assertEquals(1153.5424627093, dHLink1.getA(), 0.01);
      assertEquals(0.0, dHLink1.targetPos, 0.01);
      assertEquals(1153.5424627093, dHLink1.getTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink1.getMin(), 0.01);
      assertEquals(1153.5424627093, dHLink1.servoMin, 0.01);
      assertEquals(0.0, dHLink1.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DHLink dHLink0 = new DHLink(" t:8(S#C}mV'-d;", 1062.33463160189, 1062.33463160189, 1.0, (-1357.848448852));
      dHLink0.servoMax = 853.1218159277797;
      DHLink dHLink1 = new DHLink(dHLink0);
      assertEquals((-3.141592653589793), dHLink1.getMin(), 0.01);
      assertEquals(0.0, dHLink1.servoMin, 0.01);
      assertEquals((-1357.848448852), dHLink1.getAlpha(), 0.01);
      assertEquals(1062.33463160189, dHLink1.getD(), 0.01);
      assertEquals(1.0, dHLink1.getTheta(), 0.01);
      assertEquals(1062.33463160189, dHLink1.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink1.getMax(), 0.01);
      assertEquals(853.1218159277797, dHLink1.servoMax, 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink1.offset, 0.01);
      assertEquals(0.0, dHLink1.getVelocity(), 0.01);
      assertEquals(1.0, dHLink1.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink1.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.DHLink", 1153.5424627093, 1.0E-6, 1153.5424627093, (-1186.8), (-1186.8));
      dHLink0.setVelocity(598.8888199999999);
      DHLink dHLink1 = new DHLink(dHLink0);
      assertEquals(598.8888199999999, dHLink0.getVelocity(), 0.01);
      assertEquals(1153.5424627093, dHLink1.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 2541.955980898507, 0.0);
      dHLink0.targetPos = 2541.955980898507;
      DHLink dHLink1 = new DHLink(dHLink0);
      assertEquals(3.141592653589793, dHLink1.getMax(), 0.01);
      assertEquals(0.0, dHLink1.getVelocity(), 0.01);
      assertEquals(0.0, dHLink1.servoMax, 0.01);
      assertFalse(dHLink1.hasServo);
      assertEquals(0.0, dHLink1.getD(), 0.01);
      assertEquals(2541.955980898507, dHLink1.getAlpha(), 0.01);
      assertEquals(0.0, dHLink1.getTheta(), 0.01);
      assertEquals(0.0, dHLink1.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink1.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink1.getMin(), 0.01);
      assertEquals(0.0, dHLink1.getA(), 0.01);
      assertEquals(2541.955980898507, dHLink1.targetPos, 0.01);
      assertEquals(0.0, dHLink1.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 1181.341939291, 0.0, 0.0, 1181.341939291);
      dHLink0.setVelocity(1972.768659641);
      double double0 = dHLink0.getVelocity();
      assertEquals(1972.768659641, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      dHLink0.setVelocity((-349.0386934870289));
      double double0 = dHLink0.getVelocity();
      assertEquals((-349.0386934870289), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      assertEquals(3.141592653589793, dHLink0.getTheta(), 0.01);
      
      dHLink0.setTheta(0.0);
      double double0 = dHLink0.getThetaDegrees();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DHLink dHLink0 = new DHLink("bujV", 0.0, 0.0, (-1.0), 0.0);
      double double0 = dHLink0.getThetaDegrees();
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
      assertEquals((-1.0), dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals((-57.29577951308232), double0, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      assertEquals(66093.11460237004, dHLink0.getThetaDegrees(), 0.01);
      
      dHLink0.rotate(0.0);
      double double0 = dHLink0.getTheta();
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.DHLink", 304.2, (-2459.3764801332), (-2459.3764801332), 3695.42731603, 304.2);
      double double0 = dHLink0.getTheta();
      assertEquals((-2459.3764801332), dHLink0.getA(), 0.01);
      assertEquals((-2459.3764801332), dHLink0.getInitialTheta(), 0.01);
      assertEquals(304.2, dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3695.42731603, dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-2459.3764801332), double0, 0.01);
      assertEquals(304.2, dHLink0.offset, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DHLink dHLink0 = new DHLink("#0.00000", (-1.0), 1.0E-6, 1.0E-6, (-1.0), (-1.0));
      Double double0 = new Double(1.0E-4);
      dHLink0.setTargetPos(double0);
      dHLink0.getTargetPos();
      assertEquals(1.0E-4, dHLink0.getTargetPos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      Double double0 = new Double((-1111.1454251986033));
      dHLink0.setTargetPos(double0);
      dHLink0.getTargetPos();
      assertEquals((-1111.1454251986033), dHLink0.getTargetPos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      dHLink0.addPositionValue(3.141592653589793);
      dHLink0.getPositionValueDeg();
      assertEquals(327.5246534142426, dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      assertEquals(66093.11460237004, dHLink0.getThetaDegrees(), 0.01);
      
      dHLink0.rotate(0.0);
      dHLink0.getPositionValueDeg();
      assertEquals(0.0, dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      double double0 = dHLink0.getOffset();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      double double0 = dHLink0.getOffset();
      assertEquals(1153.5424627093, dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(1153.5424627093, double0, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getA(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getInitialTheta(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DHLink dHLink0 = new DHLink("`R", (-558.90093462), (-558.90093462), (-558.90093462), 0.0);
      dHLink0.getName();
      assertEquals((-558.90093462), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-558.90093462), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-32022.664719643162), dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-558.90093462), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 4651.4835040363);
      dHLink0.getName();
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(4651.4835040363, dHLink0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1399.4841624117673), (-1079.32), 3.141592653589793, (-801.3336639483825));
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      
      dHLink0.setMin(0.0);
      double double0 = dHLink0.getMin();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DHLink dHLink0 = new DHLink("D42w{", (-164.9078), 0.0, 0.0, 0.0, 0.0);
      dHLink0.setMin(1.0E-4);
      double double0 = dHLink0.getMin();
      assertEquals(1.0E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", (-1461.3022557362733), 3449.0, (-1461.3022557362733), (-3.141592653589793), 3449.0);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      
      dHLink0.setMax(0.0);
      double double0 = dHLink0.getMax();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DHLink dHLink0 = new DHLink(" %Xao", (-1005.01454), (-2327.832), 1838.96956360719, 0.0, (-2327.832));
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      
      dHLink0.setMax((-2327.832));
      double double0 = dHLink0.getMax();
      assertEquals((-2327.832), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DHLink dHLink0 = new DHLink("+\"42F.b", 0.0, 0.0, 0.0, 0.0);
      double double0 = dHLink0.getInitialTheta();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      double double0 = dHLink0.getInitialTheta();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-1398.90691), dHLink0.getD(), 0.01);
      assertEquals((-1079.32), dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-801.3336639483825), dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      double double0 = dHLink0.getD();
      assertEquals(1153.5424627093, double0, 0.01);
      assertEquals(1153.5424627093, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getTheta(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getInitialTheta(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      double double0 = dHLink0.getD();
      assertEquals((-3.141592653589793), double0, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      dHLink0.currentPos = 1548.065855462;
      dHLink0.getCurrentPos();
      assertEquals(1548.065855462, dHLink0.getCurrentPos(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      dHLink0.setCurrentPos((-1398.90691));
      dHLink0.getCurrentPos();
      assertEquals((-1398.90691), dHLink0.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      double double0 = dHLink0.getAlpha();
      assertEquals((-1398.90691), dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-801.3336639483825), double0, 0.01);
      assertEquals((-1079.32), dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getTheta(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DHLink dHLink0 = new DHLink("D42w{", (-164.9078), 0.0, 0.0, 0.0, 0.0);
      double double0 = dHLink0.getA();
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getTheta(), 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-164.9078), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.DHLink", 1153.5424627093, 1.0E-6, 1153.5424627093, (-1186.8), (-1186.8));
      double double0 = dHLink0.getA();
      assertEquals(1153.5424627093, dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-1186.8), dHLink0.getAlpha(), 0.01);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(66093.11460237004, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(1153.5424627093, dHLink0.getD(), 0.01);
      assertEquals((-1186.8), dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DHLink dHLink0 = new DHLink("78D%", (-10.565592926125696), (-10.565592926125696), (-10.565592926125696), (-10.565592926125696), (-10.565592926125696));
      // Undeclared exception!
      try { 
        dHLink0.setTargetPos((Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.DHLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", (-1822.3567498795476), (-1822.3567498795476), 0.0, (-469.7169270099));
      DHLinkType dHLinkType0 = DHLinkType.PRISMATIC;
      dHLink0.setType(dHLinkType0);
      Double double0 = dHLink0.getPositionValueDeg();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-469.7169270099), dHLink0.getAlpha(), 0.01);
      assertEquals((-1822.3567498795476), dHLink0.getD(), 0.01);
      assertEquals((-1822.3567498795476), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DHLink dHLink0 = new DHLink("i", (-1923.9409782436), (-1923.9409782436), (-1923.9409782436), (-1923.9409782436), (-1923.9409782436));
      DHLinkType dHLinkType0 = DHLinkType.PRISMATIC;
      dHLink0.setType(dHLinkType0);
      dHLink0.addPositionValue((-1923.9409782436));
      assertEquals((-1923.9409782436), dHLink0.getD(), 0.01);
      assertEquals((-1923.9409782436), dHLink0.getAlpha(), 0.01);
      assertEquals((-1923.9409782436), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-1923.9409782436), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-110233.69808562922), dHLink0.getThetaDegrees(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-1923.9409782436), dHLink0.offset, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", (-1461.3022557362733), (-3.141592653589793), (-1461.3022557362733), (-1461.3022557362733));
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.incrRotate(dHLink0.currentPos);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getD(), 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getAlpha(), 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.Matrix", (-3.141592653589793), 2146.83675163, (-1.0E-6), 2146.83675163, (-1.0E-6));
      assertEquals((-1.0E-6), dHLink0.getInitialTheta(), 0.01);
      
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.incrRotate(3.141592653589793);
      assertEquals(2146.83675163, dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", 1987.7680719364084, 1987.7680719364084, 1987.7680719364084, 1987.7680719364084, 1987.7680719364084);
      DHLinkType dHLinkType0 = DHLinkType.PRISMATIC;
      dHLink0.setType(dHLinkType0);
      dHLink0.incrRotate(0.0);
      assertFalse(dHLink0.hasServo);
      assertEquals(1987.7680719364084, dHLink0.getA(), 0.01);
      assertEquals(1987.7680719364084, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(1987.7680719364084, dHLink0.getAlpha(), 0.01);
      assertEquals(113890.72117281322, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(1987.7680719364084, dHLink0.offset, 0.01);
      assertEquals(1987.7680719364084, dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DHLink dHLink0 = new DHLink("fv", 0.7757837814520887, 0.7757837814520887, 0.7757837814520887, 0.7757837814520887);
      dHLink0.incrRotate(0.7757837814520887);
      assertEquals(88.89827298380824, dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", 1987.6977442637267, 1987.6977442637267, 1987.6977442637267, 1987.6977442637267, 1987.6977442637267);
      dHLink0.incrRotate(0.0);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(1987.6977442637267, dHLink0.getD(), 0.01);
      assertEquals(1987.6977442637267, dHLink0.getAlpha(), 0.01);
      assertEquals(1987.6977442637267, dHLink0.getInitialTheta(), 0.01);
      assertEquals(1987.6977442637267, dHLink0.getA(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(113886.69169398557, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(1987.6977442637267, dHLink0.offset, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DHLink dHLink0 = new DHLink("d367K)(Q", (-3823.8395781), (-3823.8395781), (-3823.8395781), (-3823.8395781), (-1125.83));
      dHLink0.incrRotate(180.0);
      assertEquals((-3823.8395781), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3823.8395781), dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-219089.86936021535), dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getD(), 0.01);
      assertEquals((-1125.83), dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.incrRotate(3.141592653589793);
      double double0 = dHLink0.getAlpha();
      assertEquals(3.141592653589793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DHLink dHLink0 = new DHLink("Rotation out of range for link {}", (-1822.3567498795476), (-1822.3567498795476), 0.0, (-469.7169270099));
      DHLinkType dHLinkType0 = DHLinkType.PRISMATIC;
      dHLink0.setType(dHLinkType0);
      dHLink0.translate(180.0);
      assertEquals(180.0, dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      dHLink0.translate((-1.0));
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
      assertEquals((-1.0), dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 3.2759861445457052, 3.2759861445457052, 3.2759861445457052, 3.2759861445457052);
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.rotate(3.2759861445457052);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.2759861445457052, dHLink0.getA(), 0.01);
      assertEquals(3.2759861445457052, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(187.70017982580336, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(3.2759861445457052, dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.DHLink", 5.774032945373893, 5.774032945373893, 5.774032945373893, 5.774032945373893, 5.774032945373893);
      dHLink0.rotate(5.774032945373893);
      assertFalse(dHLink0.hasServo);
      assertEquals(5.774032945373893, dHLink0.offset, 0.01);
      assertEquals(5.774032945373893, dHLink0.getD(), 0.01);
      assertEquals(5.774032945373893, dHLink0.getInitialTheta(), 0.01);
      assertEquals(5.774032945373893, dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(330.8277185394159, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(5.774032945373893, dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, (-3.1416), (-3.1416), (-3.1416), (-3.1416));
      DHLinkType dHLinkType0 = DHLinkType.REVOLUTE_ALPHA;
      dHLink0.setType(dHLinkType0);
      dHLink0.rotate((-3.1416));
      assertEquals((-3.1416), dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-3.1416), dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals((-180.0004209182994), dHLink0.getThetaDegrees(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.1416), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DHLink dHLink0 = new DHLink("org.myrobotlab.kinematics.Matrix", (-3.141592653589793), 2146.83675163, (-1.0E-6), 2146.83675163, (-1.0E-6));
      double double0 = dHLink0.zeroQuantize((-1.0E-6));
      assertEquals(2146.83675163, dHLink0.getA(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(2146.83675163, dHLink0.getAlpha(), 0.01);
      assertEquals((-1.0E-6), dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-1.0E-6), double0, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals((-1.0E-6), dHLink0.offset, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
      assertEquals((-5.729577951308232E-5), dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", (-1461.3022557362733), 3449.0, (-1461.3022557362733), (-3.141592653589793), 3449.0);
      double double0 = dHLink0.zeroQuantize(0.0);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3449.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3449.0, dHLink0.offset, 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getTheta(), 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DHLink dHLink0 = new DHLink("d367K)(Q", (-3823.8395781), (-3823.8395781), (-3823.8395781), (-3823.8395781), (-1125.83));
      double double0 = dHLink0.zeroQuantize(1.0E-6);
      assertEquals((-3823.8395781), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-219089.86936021535), dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals((-3823.8395781), dHLink0.getD(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getAlpha(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-1125.83), dHLink0.offset, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DHLink dHLink0 = new DHLink("f1A(d2)@Bu1o", (-3.14159), (-3.14159), (-3.14159), (-3.14159));
      dHLink0.setName("f1A(d2)@Bu1o");
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-3.14159), dHLink0.getD(), 0.01);
      assertEquals((-3.14159), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.14159), dHLink0.getA(), 0.01);
      assertEquals((-3.14159), dHLink0.getTheta(), 0.01);
      assertEquals((-3.14159), dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DHLink dHLink0 = null;
      try {
        dHLink0 = new DHLink((DHLink) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.DHLink", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      double double0 = dHLink0.getA();
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), double0, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
      assertEquals((-180.0), dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, (-906.1), (-65.0), (-65.0), (-485.8075747738432));
      dHLink0.getName();
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-906.1), dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-65.0), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-65.0), dHLink0.getTheta(), 0.01);
      assertEquals((-65.0), dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals((-485.8075747738432), dHLink0.getAlpha(), 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      double double0 = dHLink0.getOffset();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getTheta(), 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DHLink dHLink0 = new DHLink("d367K)(Q", (-3823.8395781), (-3823.8395781), (-3823.8395781), (-3823.8395781), (-1125.83));
      double double0 = dHLink0.getMax();
      assertEquals(3.141592653589793, double0, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-1125.83), dHLink0.offset, 0.01);
      assertEquals((-3823.8395781), dHLink0.getAlpha(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getD(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getTheta(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getA(), 0.01);
      assertEquals((-3823.8395781), dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      Double double0 = dHLink0.getCurrentPos();
      assertFalse(dHLink0.hasServo);
      assertEquals(327.469822278681, dHLink0.getInitialTheta(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(18762.63873446756, dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getAlpha(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(1.0, dHLink0.getA(), 0.01);
      assertEquals(327.469822278681, dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DHLink dHLink0 = new DHLink("f1d2)@Bu1o", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793));
      double double0 = dHLink0.getMin();
      assertEquals((-3.141592653589793), dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), double0, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-180.0), dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DHLink dHLink0 = new DHLink("NSN1@z;T_oX(l", (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), (-3.141592653589793), 0.0);
      double double0 = dHLink0.getInitialTheta();
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), double0, 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals((-180.0), dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      String string0 = dHLink0.toString();
      assertEquals("DHLink [d=327.469822278681, theta=18762.638730183495, r=1.0, alpha=179.99999995890067 min=-179.99999995890067 max=179.99999995890067]", string0);
      assertFalse(dHLink0.hasServo);
      assertEquals(327.469822278681, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      Double double0 = dHLink0.getTargetPos();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getAlpha(), 0.01);
      assertEquals(327.469822278681, dHLink0.getInitialTheta(), 0.01);
      assertEquals(327.469822278681, dHLink0.getTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(327.469822278681, dHLink0.getD(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(1.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 327.469822278681, 1.0, 327.469822278681, 3.141592653589793);
      dHLink0.getType();
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getAlpha(), 0.01);
      assertEquals(327.469822278681, dHLink0.getInitialTheta(), 0.01);
      assertEquals(18762.63873446756, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(327.469822278681, dHLink0.getD(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(1.0, dHLink0.getA(), 0.01);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DHLink dHLink0 = new DHLink("ooG|'w?-:M3A>x#", (-1398.90691), (-1079.32), 3.141592653589793, (-801.3336639483825));
      double double0 = dHLink0.getThetaDegrees();
      assertEquals(0.0, dHLink0.offset, 0.01);
      assertEquals(180.0, double0, 0.01);
      assertEquals((-801.3336639483825), dHLink0.getAlpha(), 0.01);
      assertEquals((-1079.32), dHLink0.getA(), 0.01);
      assertEquals((-1398.90691), dHLink0.getD(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getInitialTheta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DHLink dHLink0 = new DHLink("<McFc.XRhnsq0", (-3.4380272079150243), (-3.4380272079150243), (-3.4380272079150243), (-3.4380272079150243));
      assertEquals(0.0, dHLink0.offset, 0.01);
      
      dHLink0.setOffset((-3.4380272079150243));
      assertEquals((-3.4380272079150243), dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DHLink dHLink0 = new DHLink((String) null, 1153.5424627093, 1153.5424627093, 1153.5424627093, 0.0, 1153.5424627093);
      double double0 = dHLink0.getTheta();
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(1153.5424627093, double0, 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(1153.5424627093, dHLink0.getD(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getInitialTheta(), 0.01);
      assertEquals(1153.5424627093, dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
      assertEquals(1153.5424627093, dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertFalse(dHLink0.hasServo);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      double double0 = dHLink0.getAlpha();
      assertFalse(dHLink0.hasServo);
      assertEquals(0.0, dHLink0.getTheta(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals((-1.0), dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getD(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", (-1461.3022557362733), (-3.141592653589793), (-1461.3022557362733), (-3.141592653589793), (-3.141592653589793));
      double double0 = dHLink0.getVelocity();
      assertEquals((-1461.3022557362733), dHLink0.getD(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getAlpha(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getA(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-1461.3022557362733), dHLink0.getInitialTheta(), 0.01);
      assertEquals((-83726.45184663535), dHLink0.getThetaDegrees(), 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DHLink dHLink0 = new DHLink("f1A(d2)@Bu1o", 21.825048503028373, 21.825048503028373, 21.825048503028373, 21.825048503028373);
      dHLink0.setD(21.825048503028373);
      assertEquals(21.825048503028373, dHLink0.getAlpha(), 0.01);
      assertEquals(21.825048503028373, dHLink0.getInitialTheta(), 0.01);
      assertEquals(21.825048503028373, dHLink0.getD(), 0.01);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(21.825048503028373, dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(1250.483166891841, dHLink0.getThetaDegrees(), 0.01);
      assertEquals(0.0, dHLink0.offset, 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DHLink dHLink0 = new DHLink("", 0.0, 0.0, 0.0, 0.0, (-1.0));
      double double0 = dHLink0.getD();
      assertEquals((-1.0), dHLink0.offset, 0.01);
      assertEquals(0.0, dHLink0.getInitialTheta(), 0.01);
      assertEquals(0.0, dHLink0.getA(), 0.01);
      assertEquals(0.0, dHLink0.currentPos, 0.01);
      assertFalse(dHLink0.hasServo);
      assertEquals(3.141592653589793, dHLink0.getMax(), 0.01);
      assertEquals(0.0, dHLink0.getThetaDegrees(), 0.01);
      assertEquals((-3.141592653589793), dHLink0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, dHLink0.getAlpha(), 0.01);
  }
}
