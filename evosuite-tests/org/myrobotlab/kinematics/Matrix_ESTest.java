/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:55:37 GMT 2024
 */

package org.myrobotlab.kinematics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.kinematics.Matrix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      assertEquals(4, matrix0.getNumCols());
      
      matrix0.numCols = (-1);
      String string0 = matrix0.toString();
      assertEquals("[\n [ ]\n [ ]\n [ ]\n [ ]\n]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix matrix0 = Matrix.zRotation(0.0);
      assertEquals(4, matrix0.getNumRows());
      
      matrix0.numRows = (-214727);
      String string0 = matrix0.toString();
      assertEquals("[\n]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix matrix0 = Matrix.xRotation(0.0);
      matrix0.numCols = 2145381504;
      Matrix matrix1 = Matrix.zRotation(0.0);
      Matrix matrix2 = matrix1.subtractFrom(matrix0);
      assertEquals(4, matrix2.getNumRows());
      assertNotSame(matrix2, matrix1);
      assertEquals(4, matrix2.getNumCols());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(0, 0);
      Matrix matrix2 = matrix0.subtractFrom(matrix1);
      assertEquals(4, matrix2.getNumCols());
      assertNotSame(matrix2, matrix0);
      assertEquals(4, matrix2.getNumRows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix matrix0 = Matrix.zRotation((-2078.0));
      Matrix matrix1 = matrix0.pseudoInverse();
      assertEquals(4, matrix1.getNumCols());
      assertEquals(4, matrix1.getNumRows());
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.0E-4, 1.0E-4, 1.0E-4);
      Matrix matrix1 = matrix0.pseudoInverse();
      assertNotNull(matrix1);
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix matrix0 = Matrix.zRotation(0.0);
      matrix0.numRows = (-214727);
      boolean boolean0 = matrix0.equals(0.0);
      assertTrue(boolean0);
      assertEquals(4, matrix0.getNumCols());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix matrix0 = Matrix.xRotation(2589.5799066232544);
      assertEquals(4, matrix0.getNumCols());
      
      matrix0.numCols = (-857);
      Matrix matrix1 = Matrix.zRotation((-857));
      Double double0 = matrix1.dot(matrix0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(59, 59);
      Double double0 = matrix0.dot(matrix1);
      assertEquals(4, matrix0.getNumCols());
      assertEquals(4, matrix0.getNumRows());
      assertEquals(59, matrix1.getNumRows());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(4, 154);
      matrix0.addTo(matrix1);
      assertEquals(4, matrix1.getNumRows());
      assertEquals(4, matrix0.getNumCols());
      assertEquals(154, matrix1.getNumCols());
      assertEquals(4, matrix0.getNumRows());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = Matrix.translation(0, (-1990.0357133391), 0.0);
      matrix0.addTo(matrix1);
      assertEquals(0, matrix0.getNumCols());
      assertEquals(4, matrix1.getNumCols());
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = matrix0.transpose();
      assertEquals(0, matrix1.getNumCols());
      assertEquals(0, matrix1.getNumRows());
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = Matrix.xRotation(0.0);
      Matrix matrix2 = matrix1.multiply(matrix0);
      Matrix matrix3 = matrix2.pseudoInverse();
      assertEquals(0, matrix2.getNumCols());
      assertNull(matrix3);
      assertEquals(4, matrix2.getNumRows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = matrix0.pseudoInverse();
      assertEquals(0, matrix1.getNumCols());
      assertNotNull(matrix1);
      assertEquals(1, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = matrix0.multiply(matrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, matrix1.getNumRows());
      assertEquals(0, matrix1.getNumCols());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = matrix0.multiply(1719.43089095074);
      assertEquals(0, matrix1.getNumCols());
      assertEquals(0, matrix1.getNumRows());
      assertNotSame(matrix1, matrix0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = 0;
      int int0 = matrix0.getNumRows();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(694.560701038761, 694.560701038761, (-1906.3985139203837));
      matrix0.numRows = (-1079);
      int int0 = matrix0.getNumRows();
      assertEquals((-1079), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      int int0 = matrix0.getNumCols();
      assertEquals(0, int0);
      assertEquals(0, matrix0.getNumRows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = (-1985);
      int int0 = matrix0.getNumCols();
      assertEquals((-1985), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matrix matrix0 = Matrix.xRotation(0.0);
      Double double0 = matrix0.dot(matrix0);
      assertEquals(4.0, (double)double0, 0.01);
      assertEquals(4, matrix0.getNumCols());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      Matrix matrix1 = Matrix.zRotation((-2078.0));
      Matrix matrix2 = matrix0.subtractFrom(matrix1);
      matrix1.elements = matrix2.elements;
      Double double0 = matrix0.dot(matrix1);
      assertEquals((-7.48707028317159E-17), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = matrix0.addTo(matrix0);
      assertEquals(0, matrix1.getNumRows());
      assertNotNull(matrix1);
      assertNotSame(matrix1, matrix0);
      assertEquals(0, matrix1.getNumCols());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = 4637;
      // Undeclared exception!
      matrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.elements = null;
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = (-2385);
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2385
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = 23;
      // Undeclared exception!
      try { 
        matrix0.transpose();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.elements = null;
      // Undeclared exception!
      try { 
        matrix0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = 2242;
      // Undeclared exception!
      try { 
        matrix0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Matrix matrix0 = new Matrix(1429, 0);
      matrix0.numCols = 1429;
      // Undeclared exception!
      matrix0.subtractFrom(matrix0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.subtractFrom((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = (-1);
      // Undeclared exception!
      try { 
        matrix0.subtractFrom(matrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix();
      double[][] doubleArray0 = new double[0][0];
      matrix1.elements = doubleArray0;
      // Undeclared exception!
      try { 
        matrix0.subtractFrom(matrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = 2003;
      // Undeclared exception!
      matrix0.pseudoInverse();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.elements = null;
      // Undeclared exception!
      try { 
        matrix0.pseudoInverse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = (-1);
      // Undeclared exception!
      try { 
        matrix0.pseudoInverse();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(1, 2723);
      // Undeclared exception!
      matrix0.multiply(matrix1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.multiply((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = matrix0.pseudoInverse();
      matrix1.numRows = (-1);
      // Undeclared exception!
      try { 
        matrix1.multiply(matrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      Matrix matrix1 = new Matrix(matrix0);
      matrix1.numCols = 941;
      // Undeclared exception!
      try { 
        matrix0.multiply(matrix1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix matrix0 = new Matrix(3, 2581);
      // Undeclared exception!
      matrix0.multiply((-605.7710590703349));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = (-848);
      // Undeclared exception!
      try { 
        matrix0.multiply((-1079.5423731596));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -848
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = 2018;
      // Undeclared exception!
      try { 
        matrix0.multiply((double) 2018);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.dot((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Matrix matrix0 = Matrix.yRotation((-1620.7));
      double[][] doubleArray0 = new double[0][6];
      matrix0.elements = doubleArray0;
      // Undeclared exception!
      try { 
        matrix0.dot(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = 2395;
      // Undeclared exception!
      matrix0.addTo(matrix0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      // Undeclared exception!
      try { 
        matrix0.addTo((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = (-1862);
      // Undeclared exception!
      try { 
        matrix0.addTo(matrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1862
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = 710;
      // Undeclared exception!
      try { 
        matrix0.addTo(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Matrix matrix0 = null;
      try {
        matrix0 = new Matrix((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numRows = (-1143);
      Matrix matrix1 = null;
      try {
        matrix1 = new Matrix(matrix0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1143
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      matrix0.numCols = 1196;
      Matrix matrix1 = null;
      try {
        matrix1 = new Matrix(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Matrix matrix0 = new Matrix(1849, 1849);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Matrix matrix0 = null;
      try {
        matrix0 = new Matrix((-1974), (-1974));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1974
         //
         verifyException("org.myrobotlab.kinematics.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      Matrix matrix1 = matrix0.transpose();
      assertEquals(4, matrix1.getNumCols());
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      Matrix matrix1 = matrix0.multiply(matrix0);
      assertNotSame(matrix1, matrix0);
      assertEquals(4, matrix1.getNumCols());
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      Matrix matrix1 = matrix0.multiply(1.0);
      assertNotSame(matrix1, matrix0);
      assertEquals(4, matrix1.getNumCols());
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      boolean boolean0 = matrix0.equals(1.1102230246251565E-16);
      assertFalse(boolean0);
      assertEquals(4, matrix0.getNumRows());
      assertEquals(4, matrix0.getNumCols());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(1282.0908055019045, 1048.557489820733, 1282.0908055019045);
      String string0 = matrix0.toString();
      assertEquals("[\n [ 1.00000 0.00000 0.00000 1282.09081 ]\n [ 0.00000 1.00000 0.00000 1048.55749 ]\n [ 0.00000 0.00000 1.00000 1282.09081 ]\n [ 0.00000 0.00000 0.00000 1.00000 ]\n]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(1282.0908055019045, 1048.557489820733, 1282.0908055019045);
      Matrix matrix1 = Matrix.xRotation(0.986657055412919);
      assertEquals(4, matrix1.getNumCols());
      
      matrix1.numCols = (-1);
      Matrix matrix2 = matrix0.subtractFrom(matrix1);
      assertEquals(4, matrix2.getNumRows());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Matrix matrix0 = new Matrix(0, 0);
      Matrix matrix1 = Matrix.translation(1719.43089095074, 673.6571858115509, (-2870.940037021));
      Matrix matrix2 = matrix0.subtractFrom(matrix1);
      assertEquals(0, matrix2.getNumCols());
      assertEquals(4, matrix1.getNumRows());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(2324.41, 2324.41, 2324.41);
      matrix0.numCols = (-1152);
      Matrix matrix1 = Matrix.scaling(572.23301788198, 1753.63255003893, 2324.41);
      Matrix matrix2 = matrix0.multiply(matrix1);
      Matrix matrix3 = matrix2.pseudoInverse();
      assertEquals(4, matrix2.getNumCols());
      assertEquals(4, matrix3.getNumCols());
      assertEquals(4, matrix3.getNumRows());
      assertNotNull(matrix3);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(2324.41, 2324.41, 2324.41);
      matrix0.numCols = (-1152);
      boolean boolean0 = matrix0.equals((double) (-1152));
      assertEquals(4, matrix0.getNumRows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(2767.6, 2767.6, 2767.6);
      assertEquals(4, matrix0.getNumCols());
      
      Matrix matrix1 = Matrix.scaling(2482.1277300218, 0.994948521910354, 2482.1277300218);
      matrix0.numCols = (-407);
      Double double0 = matrix0.dot(matrix1);
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(2324.41, 2324.41, 2324.41);
      Matrix matrix1 = Matrix.scaling(572.23301788198, 1753.63255003893, 2324.41);
      matrix1.numRows = (-1152);
      Double double0 = matrix0.dot(matrix1);
      assertEquals(4, matrix1.getNumCols());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Matrix matrix0 = Matrix.scaling(1.1102230246251565E-16, 1.1102230246251565E-16, 1.1102230246251565E-16);
      Matrix matrix1 = Matrix.zRotation((-2078.0));
      matrix1.numCols = 1657;
      Matrix matrix2 = matrix1.addTo(matrix0);
      assertNull(matrix2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Matrix matrix0 = Matrix.zRotation(0.0);
      matrix0.numRows = (-214727);
      Matrix matrix1 = Matrix.scaling(0.0, 0.0, (-1.0));
      Matrix matrix2 = matrix1.addTo(matrix0);
      assertEquals(4, matrix1.getNumCols());
      assertNull(matrix2);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Matrix matrix0 = new Matrix();
      int int0 = matrix0.getNumCols();
      assertEquals(4, matrix0.getNumRows());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Matrix matrix0 = Matrix.translation(2324.41, 2324.41, 2324.41);
      Matrix matrix1 = matrix0.addTo(matrix0);
      assertEquals(4, matrix1.getNumRows());
      assertNotSame(matrix1, matrix0);
      assertNotNull(matrix1);
      assertEquals(4, matrix1.getNumCols());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Matrix matrix0 = new Matrix(4, 4);
      int int0 = matrix0.getNumRows();
      assertEquals(4, int0);
      assertEquals(4, matrix0.getNumCols());
  }
}
