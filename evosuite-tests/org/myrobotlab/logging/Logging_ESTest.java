/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 00:59:35 GMT 2024
 */

package org.myrobotlab.logging;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;
import org.myrobotlab.logging.Logging;
import org.myrobotlab.logging.LoggingSLF4J;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Logging_ESTest extends Logging_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.setLevel("bad stackToString", "");
      assertEquals(0L, Logging.startTimeMilliseconds);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.setLevel("");
      assertFalse(Logging.performanceTiming);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.removeAppender("INFO");
      assertEquals(0L, Logging.startTimeMilliseconds);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.removeAppender((Object) "bad stackToString");
      assertEquals(0L, Logging.startTimeMilliseconds);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.removeAllAppenders();
      assertFalse(Logging.performanceTiming);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.addAppender("]W@FsKuCHD-$", "org.myrobotlab.logging.Logging");
      assertFalse(Logging.performanceTiming);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.addAppender("KM0[~o[FdtuDm\"wJJm4");
      assertEquals(0L, Logging.startTimeMilliseconds);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      String string0 = Logging.logError(mockThrowable0);
      assertEquals("bad stackToString", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Logging.logTimeEnable(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      String string0 = loggingSLF4J0.getLevel();
      assertEquals("INFO", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Logging.logTimeEnable((Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.logging.Logging", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Logging.logTime("sr`sv");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Logging.stackToString((Throwable) null);
      assertEquals("<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Logging.logTime("INFO");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Logging.logTimeStart();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Boolean boolean0 = Logging.logTimeEnable((Boolean) false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LoggingSLF4J loggingSLF4J0 = new LoggingSLF4J();
      loggingSLF4J0.removeAllAppenders();
      Logging.logTime("start");
  }
}
