/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:41:40 GMT 2024
 */

package org.myrobotlab.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.math.MapperLinear;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapperBase_ESTest extends MapperBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0, 0, (-4249), (-4249));
      mapperLinear0.map(2155.3, 0.0, 1329.82852495, 2258.8092);
      mapperLinear0.toString();
      assertEquals(2258.8092, mapperLinear0.maxY, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      mapperLinear0.setMinMax(4, 0);
      assertEquals(4.0, mapperLinear0.minY, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      mapperLinear0.setMinMax((-1789.5199721641422), Double.NaN);
      assertEquals(Double.NaN, mapperLinear0.maxY, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, 0.0, 0.0, true, true);
      mapperLinear0.setMinMax(Double.NaN, (-3388.3021));
      assertEquals(Double.NaN, mapperLinear0.minX, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      mapperLinear0.map(1, 4, (-29), 3148);
      assertEquals(1.0, mapperLinear0.minX, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0, (-1), (-1), (-1));
      assertEquals((-1.0), mapperLinear0.maxY, 0.01);
      assertEquals(0.0, mapperLinear0.minX, 0.01);
      assertEquals((-1.0), mapperLinear0.maxX, 0.01);
      assertTrue(mapperLinear0.clip);
      assertFalse(mapperLinear0.inverted);
      assertEquals((-1.0), mapperLinear0.minY, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-1407.2599928), (-887.698416), (-1407.2599928), (-1407.2599928), false, false);
      assertEquals((-1407.2599928), mapperLinear0.minX, 0.01);
      assertFalse(mapperLinear0.clip);
      assertFalse(mapperLinear0.inverted);
      assertEquals((-1407.2599928), mapperLinear0.minY, 0.01);
      assertEquals((-887.698416), mapperLinear0.maxX, 0.01);
      assertEquals((-1407.2599928), mapperLinear0.maxY, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-2385.060027436582), (-2385.060027436582), (-2385.060027436582), (-2385.060027436582));
      assertTrue(mapperLinear0.clip);
      assertEquals((-2385.060027436582), mapperLinear0.maxX, 0.01);
      assertEquals((-2385.060027436582), mapperLinear0.minY, 0.01);
      assertEquals((-2385.060027436582), mapperLinear0.minX, 0.01);
      assertEquals((-2385.060027436582), mapperLinear0.maxY, 0.01);
      assertFalse(mapperLinear0.inverted);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      assertFalse(mapperLinear0.inverted);
      
      mapperLinear0.inverted = true;
      mapperLinear0.isInverted();
      assertTrue(mapperLinear0.isClip());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      boolean boolean0 = mapperLinear0.isClip();
      assertEquals(3148.0, mapperLinear0.maxY, 0.01);
      assertTrue(boolean0);
      assertFalse(mapperLinear0.inverted);
      assertEquals(3028.0, mapperLinear0.minX, 0.01);
      assertEquals(3028.0, mapperLinear0.maxX, 0.01);
      assertEquals((-29.0), mapperLinear0.minY, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      assertTrue(mapperLinear0.clip);
      
      mapperLinear0.setClip(false);
      boolean boolean0 = mapperLinear0.isClip();
      assertFalse(mapperLinear0.clip);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0, 0, (-101), (-1094));
      mapperLinear0.map(0.0, (double) (-101), 1.0, (-1560.0));
      double double0 = mapperLinear0.getMinY();
      assertEquals(1.0, mapperLinear0.minY, 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1070, 1070, 1070, 0);
      mapperLinear0.minY = (-611.815093);
      double double0 = mapperLinear0.getMinY();
      assertEquals((-611.815093), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      double double0 = mapperLinear0.getMinX();
      assertEquals((-29.0), mapperLinear0.minY, 0.01);
      assertEquals(3028.0, mapperLinear0.maxX, 0.01);
      assertEquals(3028.0, double0, 0.01);
      assertTrue(mapperLinear0.clip);
      assertFalse(mapperLinear0.inverted);
      assertEquals(3148.0, mapperLinear0.maxY, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, (-1.0), 0.0, false, true);
      mapperLinear0.minX = (-2475.39261271013);
      double double0 = mapperLinear0.getMinX();
      assertEquals((-2475.39261271013), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0, 0, (-4249), (-4249));
      mapperLinear0.map(2155.3, 0.0, 1329.82852495, 2258.8092);
      double double0 = mapperLinear0.getMaxY();
      assertEquals(2155.3, mapperLinear0.minX, 0.01);
      assertEquals(2258.8092, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, 0.0, 0.0, true, true);
      mapperLinear0.maxY = (-1544.9);
      double double0 = mapperLinear0.getMaxY();
      assertEquals((-1544.9), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      double double0 = mapperLinear0.getMaxX();
      assertEquals((-29.0), mapperLinear0.minY, 0.01);
      assertTrue(mapperLinear0.clip);
      assertEquals(3028.0, double0, 0.01);
      assertFalse(mapperLinear0.inverted);
      assertEquals(3148.0, mapperLinear0.maxY, 0.01);
      assertEquals(3028.0, mapperLinear0.minX, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-4719.7307940828), (-1.0), (-1.0), 0.0);
      double double0 = mapperLinear0.getMaxX();
      assertTrue(mapperLinear0.clip);
      assertEquals((-4719.7307940828), mapperLinear0.minX, 0.01);
      assertEquals(0.0, mapperLinear0.maxY, 0.01);
      assertEquals((-1.0), double0, 0.01);
      assertFalse(mapperLinear0.inverted);
      assertEquals((-1.0), mapperLinear0.minY, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      mapperLinear0.setMinMax(276.2339712931, 0.0);
      double double0 = mapperLinear0.calcOutput(0.0);
      assertEquals(276.2339712931, mapperLinear0.minX, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-2068), (-2068), 213, 0);
      assertEquals((-2068.0), mapperLinear0.minX, 0.01);
      
      mapperLinear0.minX = 1.0;
      double double0 = mapperLinear0.calcOutput((-1.0));
      assertEquals(212.79410343160947, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-4719.7307940828), (-1.0), (-1.0), 0.0);
      double double0 = mapperLinear0.calcOutput((-2407));
      assertEquals((-0.5098828699906084), double0, 0.01);
      assertEquals(0.0, mapperLinear0.maxY, 0.01);
      assertTrue(mapperLinear0.isClip());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      mapperLinear0.inverted = true;
      mapperLinear0.map(1323, (-103), 1323, 1);
      mapperLinear0.minX = 0.0;
      double double0 = mapperLinear0.calcInput(0.0);
      assertEquals(1323.0, mapperLinear0.minY, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1070, 1070, 1070, 0);
      double double0 = mapperLinear0.calcInput(90.59);
      assertEquals(1070.0, mapperLinear0.minY, 0.01);
      assertTrue(mapperLinear0.isClip());
      assertEquals(0.0, mapperLinear0.maxY, 0.01);
      assertEquals(1070.0, double0, 0.01);
      assertFalse(mapperLinear0.inverted);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      mapperLinear0.setMinMax(276.2339712931, 0.0);
      mapperLinear0.minX = (-1.0);
      double double0 = mapperLinear0.calcInput(3148);
      assertEquals(276.2339712931, mapperLinear0.minY, 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(3028, 3028, (-29), 3148);
      mapperLinear0.setInverted(false);
      assertEquals(3028.0, mapperLinear0.minX, 0.01);
      assertEquals(3028.0, mapperLinear0.maxX, 0.01);
      assertEquals(3148.0, mapperLinear0.maxY, 0.01);
      assertTrue(mapperLinear0.clip);
      assertEquals((-29.0), mapperLinear0.minY, 0.01);
      assertFalse(mapperLinear0.inverted);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, 0.0, 0.0, true, true);
      double double0 = mapperLinear0.getMaxY();
      assertEquals(0.0, mapperLinear0.maxX, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, mapperLinear0.minX, 0.01);
      assertEquals(0.0, mapperLinear0.minY, 0.01);
      assertTrue(mapperLinear0.inverted);
      assertTrue(mapperLinear0.clip);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      boolean boolean0 = mapperLinear0.isInverted();
      assertFalse(boolean0);
      assertTrue(mapperLinear0.clip);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      double double0 = mapperLinear0.getMaxX();
      assertEquals(0.0, double0, 0.01);
      assertTrue(mapperLinear0.clip);
      assertFalse(mapperLinear0.inverted);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, 0.0, 0.0, true, true);
      double double0 = mapperLinear0.getMinY();
      assertTrue(mapperLinear0.inverted);
      assertEquals(0.0, mapperLinear0.minX, 0.01);
      assertEquals(0.0, mapperLinear0.maxX, 0.01);
      assertEquals(0.0, mapperLinear0.maxY, 0.01);
      assertTrue(mapperLinear0.clip);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      double double0 = mapperLinear0.getMinX();
      assertEquals(0.0, double0, 0.01);
      assertFalse(mapperLinear0.inverted);
      assertTrue(mapperLinear0.clip);
  }
}
