/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:38:17 GMT 2024
 */

package org.myrobotlab.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.math.MapperLinear;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapperLinear_ESTest extends MapperLinear_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1742.6024338315324, 1742.6024338315324, 1212.505885, (-1217.10035667));
      mapperLinear0.inverted = true;
      mapperLinear0.setMinMax((-1217.10035667), 1845.0);
      double double0 = mapperLinear0.calcInput(309.648811958);
      assertEquals(318.250831372, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(2121.0, 2121.0, 260.5, 0.0);
      mapperLinear0.maxX = 1429.85;
      mapperLinear0.inverted = true;
      double double0 = mapperLinear0.calcOutput(2121.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1.0, 1.0, 1.0, (-1.0), true, true);
      double double0 = mapperLinear0.calcOutput(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1742.6024338315324, 1742.6024338315324, 1212.505885, (-1217.10035667));
      mapperLinear0.map(1845.0, (-1.0), 1742.6024338315324, 309.648811958);
      mapperLinear0.minY = 0.0;
      double double0 = mapperLinear0.calcOutput(2132.9023);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(2121.0, 2121.0, 260.5, 0.0);
      mapperLinear0.maxX = 1429.85;
      mapperLinear0.inverted = true;
      double double0 = mapperLinear0.calcOutput((-168.92676149742));
      assertEquals(260.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      mapperLinear0.setMinMax((double) (-2250), 1432.425031);
      double double0 = mapperLinear0.calcInput(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 1093.6, 0.0, (-1.0), false, false);
      mapperLinear0.clip = true;
      mapperLinear0.setMinMax((-968.72019977), (-4738.919276));
      double double0 = mapperLinear0.calcInput(0.0);
      assertEquals((-968.72019977), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1742.6024338315324, 1742.6024338315324, 1212.505885, (-1217.10035667));
      mapperLinear0.inverted = true;
      double double0 = mapperLinear0.calcInput(309.648811958);
      assertEquals(1742.6024338315324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1742.6024338315324, 1742.6024338315324, 1212.505885, (-1217.10035667));
      double double0 = mapperLinear0.calcInput(309.648811958);
      assertEquals(1742.6024338315324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(2121.0, 2121.0, 260.5, 0.0);
      mapperLinear0.clip = false;
      double double0 = mapperLinear0.calcInput(260.5);
      assertEquals(2121.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(1742.6024338315324, 1742.6024338315324, 1212.505885, (-1217.10035667));
      double double0 = mapperLinear0.calcOutput((-1217.10035667));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0.0, 0.0, 0.0, 0.0, true, true);
      double double0 = mapperLinear0.calcOutput(0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear(0, 0, 0, 0);
      assertTrue(mapperLinear0.clip);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear((-804.2541), (-1.0), 0.0, (-2947.0572457));
      double double0 = mapperLinear0.calcOutput(0.0);
      assertEquals((-2947.0572456999994), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MapperLinear mapperLinear0 = new MapperLinear();
      mapperLinear0.clip = false;
      double double0 = mapperLinear0.calcOutput(0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
