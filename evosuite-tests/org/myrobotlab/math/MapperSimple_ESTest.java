/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:40:32 GMT 2024
 */

package org.myrobotlab.math;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.math.MapperSimple;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MapperSimple_ESTest extends MapperSimple_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.setMinMax((-1.0), Double.NaN);
      assertEquals((-1.0), mapperSimple0.minOut, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(101, 0, 0, (-1));
      mapperSimple0.map(5834, 0, 0, (-257));
      assertEquals((-257.0), mapperSimple0.maxOut, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2187), 1358, (-2187), 0);
      mapperSimple0.setInverted(false);
      assertEquals(1358.0, mapperSimple0.minIn, 0.01);
      
      mapperSimple0.setInverted(true);
      boolean boolean0 = mapperSimple0.isInverted();
      assertEquals((-2187.0), mapperSimple0.minIn, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(425.14, (-557.931712342405), 1150.965497243533, 425.14);
      assertEquals(425.14, mapperSimple0.minIn, 0.01);
      assertEquals(425.14, mapperSimple0.maxOut, 0.01);
      assertEquals(1150.965497243533, mapperSimple0.minOut, 0.01);
      assertEquals((-557.931712342405), mapperSimple0.maxIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2062), (-2062), 0, 0);
      mapperSimple0.minOut = 1785.0;
      double double0 = mapperSimple0.getMinY();
      assertEquals(1785.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.setMinMax((-540), 0);
      double double0 = mapperSimple0.getMinY();
      assertEquals((-540.0), mapperSimple0.minOut, 0.01);
      assertEquals((-540.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2187), 1358, (-2187), 0);
      mapperSimple0.map((double) 1358, 1654.16244871619, 1654.16244871619, (double) 1358);
      double double0 = mapperSimple0.getMinX();
      assertEquals(1654.16244871619, mapperSimple0.minOut, 0.01);
      assertEquals(1358.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      assertTrue(mapperSimple0.isInverted());
      
      mapperSimple0.minIn = (-520.3);
      double double0 = mapperSimple0.getMinX();
      assertEquals((-520.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2187), 1358, (-2187), 0);
      double double0 = mapperSimple0.getMaxY();
      assertEquals((-2187.0), mapperSimple0.minOut, 0.01);
      assertEquals(1358.0, mapperSimple0.maxIn, 0.01);
      assertEquals((-2187.0), mapperSimple0.minIn, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      mapperSimple0.map(1229.535361765193, 0.0, 0.0, (-1401.580640451));
      double double0 = mapperSimple0.getMaxY();
      assertEquals((-1401.580640451), mapperSimple0.maxOut, 0.01);
      assertEquals((-1401.580640451), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(0, (-1), 0, (-2588));
      mapperSimple0.map(244.207938141, (double) 0, (double) (-2588), (double) (-2588));
      double double0 = mapperSimple0.getMaxX();
      assertEquals(244.207938141, mapperSimple0.minIn, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(0, (-1), 0, (-2588));
      mapperSimple0.map(244.207938141, (double) 0, (double) (-2588), (double) (-2588));
      mapperSimple0.setInverted(false);
      double double0 = mapperSimple0.getMaxX();
      assertEquals(244.207938141, mapperSimple0.maxIn, 0.01);
      assertEquals(244.207938141, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(0.0, 0.0, 0.0, 1223.217);
      mapperSimple0.setMinMax(0.0, 1223.217);
      double double0 = mapperSimple0.calcOutput(0.0);
      assertEquals(1223.217, mapperSimple0.maxIn, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.maxIn = 0.0;
      mapperSimple0.minOut = 2069.2438873267;
      mapperSimple0.maxIn = (-1345.920133959143);
      double double0 = mapperSimple0.calcOutput(1.0);
      assertEquals(2069.2438873267, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(101, 0, 0, (-1));
      double double0 = mapperSimple0.calcOutput(0.0);
      assertEquals((-1.0), double0, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
      assertEquals(101.0, mapperSimple0.minIn, 0.01);
      assertEquals(0.0, mapperSimple0.maxIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.minOut = (-403.33710753146954);
      double double0 = mapperSimple0.calcInput(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2187), 1358, (-2187), 0);
      double double0 = mapperSimple0.calcInput(1261);
      assertEquals(1358.0, double0, 0.01);
      assertEquals(0.0, mapperSimple0.maxOut, 0.01);
      assertEquals((-2187.0), mapperSimple0.minOut, 0.01);
      assertEquals((-2187.0), mapperSimple0.minIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      mapperSimple0.map(1229.535361765193, 0.0, 0.0, (-1401.580640451));
      mapperSimple0.minIn = (-520.3);
      double double0 = mapperSimple0.calcInput(0.0);
      assertEquals((-1401.580640451), mapperSimple0.maxOut, 0.01);
      assertEquals((-520.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      mapperSimple0.setClip(false);
      assertEquals(444.214452632926, mapperSimple0.minIn, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
      assertEquals((-520.3), mapperSimple0.maxIn, 0.01);
      assertEquals(0.0, mapperSimple0.maxOut, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(101, 0, 0, (-1));
      mapperSimple0.setClip(true);
      assertEquals(0.0, mapperSimple0.maxIn, 0.01);
      assertEquals((-1.0), mapperSimple0.maxOut, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
      assertEquals(101.0, mapperSimple0.minIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      assertEquals(444.214452632926, mapperSimple0.minIn, 0.01);
      
      mapperSimple0.minIn = (-520.3);
      boolean boolean0 = mapperSimple0.isInverted();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      double double0 = mapperSimple0.getMinX();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple((-2062), (-2062), 0, 0);
      double double0 = mapperSimple0.getMinY();
      assertEquals(0.0, mapperSimple0.maxOut, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2062.0), mapperSimple0.minIn, 0.01);
      assertEquals((-2062.0), mapperSimple0.maxIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.map(425, 0, 425, 0);
      assertEquals(425.0, mapperSimple0.minIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      double double0 = mapperSimple0.getMaxX();
      assertEquals(0.0, mapperSimple0.maxOut, 0.01);
      assertEquals((-520.3), double0, 0.01);
      assertEquals(444.214452632926, mapperSimple0.minIn, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(0.0, 1288.97724901812, 0.0, 1.0);
      double double0 = mapperSimple0.getMaxY();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1288.97724901812, mapperSimple0.maxIn, 0.01);
      assertEquals(0.0, mapperSimple0.minIn, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.setMinMax(425, 425);
      mapperSimple0.maxIn = 0.0;
      boolean boolean0 = mapperSimple0.isInverted();
      assertEquals(425.0, mapperSimple0.minIn, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      double double0 = mapperSimple0.calcOutput(0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple(444.214452632926, (-520.3), 0.0, 0.0);
      boolean boolean0 = mapperSimple0.isClip();
      assertEquals(0.0, mapperSimple0.maxOut, 0.01);
      assertEquals((-520.3), mapperSimple0.maxIn, 0.01);
      assertEquals(0.0, mapperSimple0.minOut, 0.01);
      assertTrue(boolean0);
      assertEquals(444.214452632926, mapperSimple0.minIn, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MapperSimple mapperSimple0 = new MapperSimple();
      mapperSimple0.setMinMax(Double.NaN, (-3145.322984078628));
      assertEquals(Double.NaN, mapperSimple0.minOut, 0.01);
  }
}
