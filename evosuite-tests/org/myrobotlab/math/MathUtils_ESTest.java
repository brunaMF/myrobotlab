/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:39:24 GMT 2024
 */

package org.myrobotlab.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.math.MathUtils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathUtils_ESTest extends MathUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = MathUtils.grayToDecimal(1971);
      assertEquals(1314, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = MathUtils.msToString(7394L);
      assertEquals("0:0:0:7", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = MathUtils.getPercentFromRange(600, (-1), 600);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add(integer0);
      arrayList0.add(integer0);
      Integer integer1 = MathUtils.averageMaxFromArray(600, arrayList0);
      assertEquals((-3006), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      Integer integer0 = MathUtils.averageMaxFromArray((-1), arrayList0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = MathUtils.averageMaxFromArray(0, arrayList0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = MathUtils.round(0, 3672);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = MathUtils.round(60L, 1973);
      assertEquals(60.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = MathUtils.radToDeg(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = MathUtils.radToDeg(1926.0);
      assertEquals(110351.671317, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = MathUtils.getPercentFromRange(0, 0, 327);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = MathUtils.getPercentFromRange(0, 76, 3672);
      assertEquals(2790, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = MathUtils.degToRad(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = MathUtils.degToRad((-1209.099412511647));
      assertEquals((-21.10276573225736), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = MathUtils.decimalToGray((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(1327);
      arrayList0.add(integer0);
      Integer integer1 = MathUtils.averageMaxFromArray(3343, arrayList0);
      assertEquals(1327, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.md5((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.math.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.averageMaxFromArray((-1), (ArrayList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(0);
      arrayList0.add(integer0);
      // Undeclared exception!
      try { 
        MathUtils.averageMaxFromArray(0, arrayList0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.myrobotlab.math.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.math.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = MathUtils.round((-1739.001664224878), 0);
      assertEquals((-1739.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = MathUtils.decimalToGray(3672);
      assertEquals(2420, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = MathUtils.md5("0:0:0:0");
      assertEquals("bb08966ff3021cdf0966c200e81a1791", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MathUtils mathUtils0 = new MathUtils();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = MathUtils.radToDeg((-1052.037064444));
      assertEquals((-60277.283670210716), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = MathUtils.degToRad(1314.0);
      assertEquals(22.93362637120549, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = MathUtils.grayToDecimal((-1));
      assertEquals(0, int0);
  }
}
