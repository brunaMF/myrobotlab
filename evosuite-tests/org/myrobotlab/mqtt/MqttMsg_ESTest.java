/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:08:16 GMT 2024
 */

package org.myrobotlab.mqtt;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.mqtt.MqttMsg;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MqttMsg_ESTest extends MqttMsg_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.remainingLength = 179;
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPacketId((-1176));
      mqttMsg0.hashCode();
      assertEquals((-1176), mqttMsg0.getPacketId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.dupe = true;
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setUsername("&<j7F");
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPayload("");
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setTopicName("O?/2Pdj+{");
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPacketId((-1616));
      mqttMsg0.toString();
      assertEquals((-1616), mqttMsg0.getPacketId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setDup(true);
      assertTrue(mqttMsg0.isDup());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setRetain(true);
      boolean boolean0 = mqttMsg0.isRetain();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.dupe = true;
      boolean boolean0 = mqttMsg0.isDup();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.username = "68772KiU(^'cj";
      String string0 = mqttMsg0.getUsername();
      assertEquals("68772KiU(^'cj", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setUsername("");
      String string0 = mqttMsg0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.topicName = "packetId:0 payload: ";
      String string0 = mqttMsg0.getTopicName();
      assertEquals("packetId:0 payload: ", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setTopicName("");
      String string0 = mqttMsg0.getTopicName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.remainingLength = 1;
      int int0 = mqttMsg0.getRemainingLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setRemainingLength((-943));
      int int0 = mqttMsg0.getRemainingLength();
      assertEquals((-943), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setQosLevel(9);
      int int0 = mqttMsg0.getQosLevel();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.qosLevel = (-4898);
      int int0 = mqttMsg0.getQosLevel();
      assertEquals((-4898), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPayload("e|cZObx");
      String string0 = mqttMsg0.getPayload();
      assertEquals("e|cZObx", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.packetId = 9;
      int int0 = mqttMsg0.getPacketId();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPacketId((-1));
      int int0 = mqttMsg0.getPacketId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setMessageType(" WD");
      String string0 = mqttMsg0.getMessageType();
      assertEquals(" WD", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.messageType = "";
      String string0 = mqttMsg0.getMessageType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setClientID("e|cZObx");
      String string0 = mqttMsg0.getClientID();
      assertEquals("e|cZObx", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.clientId = null;
      mqttMsg0.clientId = "";
      String string0 = mqttMsg0.getClientID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      boolean boolean0 = mqttMsg0.equals(mqttMsg0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      Object object0 = new Object();
      boolean boolean0 = mqttMsg0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.payload = "@6pA&-r";
      String string0 = mqttMsg0.toString();
      assertEquals("packetId:0 payload:@6pA&-r ", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.messageType = "FcY}6Q|M!";
      String string0 = mqttMsg0.toString();
      assertEquals("packetId:0 type:FcY}6Q|M! ", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.topicName = "";
      String string0 = mqttMsg0.toString();
      assertEquals("packetId:0 topicName: ", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.username = "68772KiU(^'cj";
      String string0 = mqttMsg0.toString();
      assertEquals("packetId:0 username:68772KiU(^'cj ", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      boolean boolean0 = mqttMsg0.isRetain();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setPayload("");
      String string0 = mqttMsg0.getPayload();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      int int0 = mqttMsg0.getQosLevel();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      String string0 = mqttMsg0.getPayload();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      String string0 = mqttMsg0.getMessageType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      String string0 = mqttMsg0.getTopicName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setRetain(true);
      mqttMsg0.toString();
      assertTrue(mqttMsg0.isRetain());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      mqttMsg0.setClientID("\"<fPr*^A$)N#C!yh q");
      mqttMsg0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      String string0 = mqttMsg0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      String string0 = mqttMsg0.getClientID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      int int0 = mqttMsg0.getRemainingLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      int int0 = mqttMsg0.getPacketId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MqttMsg mqttMsg0 = new MqttMsg();
      boolean boolean0 = mqttMsg0.isDup();
      assertFalse(boolean0);
  }
}
