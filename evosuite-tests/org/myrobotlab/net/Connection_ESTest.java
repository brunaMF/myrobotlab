/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:12:40 GMT 2024
 */

package org.myrobotlab.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.net.Connection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Connection_ESTest extends Connection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      Connection connection1 = new Connection("", "*", "");
      connection0.putAll(connection1);
      assertEquals("*", connection0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      connection0.putTransient("", "");
      Object object0 = connection0.remove("");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Connection connection0 = new Connection("/Cxjj", (String) null, "r\u0004<c%'a!:2&)VOBV");
      Object object0 = new Object();
      Object object1 = connection0.putTransient("uuid", object0);
      assertNotNull(object1);
      assertEquals("r\u0004<c%'a!:2&)VOBV", connection0.getGateway());
      assertEquals("/Cxjj", object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Connection connection0 = new Connection((String) null, (String) null, "^[I*`hx");
      String string0 = connection0.getUuid();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Connection connection0 = new Connection("d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d");
      String string0 = connection0.getUuid();
      assertEquals("d,y}Jx| hO7.\"utt&d", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Connection connection0 = new Connection("d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d");
      String string0 = connection0.getId();
      assertEquals("d,y}Jx| hO7.\"utt&d", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      String string0 = connection0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Connection connection0 = new Connection("l$L9|.Z!&JS]CE*", "", (String) null);
      String string0 = connection0.getGateway();
      assertEquals("l$L9|.Z!&JS]CE*", connection0.getUuid());
      assertNull(string0);
      assertEquals("", connection0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Connection connection0 = new Connection((String) null, "} @Zt2$^W", "C");
      String string0 = connection0.getGateway();
      assertEquals("C", string0);
      assertNotNull(string0);
      assertEquals("} @Zt2$^W", connection0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Connection connection0 = new Connection("l$L9|.Z!&JS]CE*", "", (String) null);
      connection0.putTransient("l$L9|.Z!&JS]CE*", "$'^=5sV));*U{dN?Z");
      Object object0 = connection0.get("l$L9|.Z!&JS]CE*");
      assertNotNull(object0);
      assertEquals("l$L9|.Z!&JS]CE*", connection0.getUuid());
      assertEquals("", connection0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Connection connection0 = new Connection((String) null, "} @Zt2$^W", "C");
      connection0.put("C", connection0);
      // Undeclared exception!
      try { 
        connection0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Connection connection0 = new Connection("hmTP;[=Xq", "hmTP;[=Xq", ":~0;m</[");
      connection0.serializable = null;
      // Undeclared exception!
      try { 
        connection0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Connection connection0 = new Connection("d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d", "#vqz]1`b");
      connection0.attributes = null;
      // Undeclared exception!
      try { 
        connection0.remove("%s=%s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Connection connection0 = new Connection("Lpzw/Wn*]qMD>'R/", "tb.OlnQz`iObO:zG", "tD");
      connection0.attributes = null;
      // Undeclared exception!
      try { 
        connection0.putTransient("", "9$k%{eO55fU[Z1h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Connection connection0 = new Connection("", (String) null, "");
      // Undeclared exception!
      try { 
        connection0.putAll((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = new Connection("\n", "\n", "S4;)`q|+jUN}");
      connection0.serializable = null;
      // Undeclared exception!
      try { 
        connection0.put("S4;)`q|+jUN}", "\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Connection connection0 = new Connection("d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d");
      Object object0 = new Object();
      connection0.put("gateway", object0);
      // Undeclared exception!
      try { 
        connection0.getGateway();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.String (java.lang.Object and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Connection connection0 = new Connection("\nnull=null\nid=null\nuuid=null\ngateway=^[I*`hx\n^[I*`hx=null\n", "NcghP`~d3N", "|p#8qBG@z");
      connection0.attributes = null;
      // Undeclared exception!
      try { 
        connection0.get("|p#8qBG@z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.Connection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = new Connection("d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d", "d,y}Jx| hO7.\"utt&d");
      connection0.attributes = null;
      // Undeclared exception!
      try { 
        connection0.containsKey("d,y}Jx| hO7.\"utt&d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      String string0 = connection0.toString();
      assertEquals("\nid=\nuuid=\ngateway=\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Connection connection0 = new Connection((String) null, (String) null, "^[I*`hx");
      connection0.putTransient((String) null, "^[I*`hx");
      boolean boolean0 = connection0.containsKey((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      boolean boolean0 = connection0.containsKey(":~0;m</[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      Object object0 = connection0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = new Connection((String) null, (String) null, "^[I*`hx");
      Object object0 = connection0.get("^[I*`hx");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      String string0 = connection0.getGateway();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Connection connection0 = new Connection((String) null, (String) null, "^[I*`hx");
      String string0 = connection0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Connection connection0 = new Connection("", "", "");
      String string0 = connection0.getUuid();
      assertEquals("", string0);
  }
}
