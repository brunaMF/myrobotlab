/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:16:14 GMT 2024
 */

package org.myrobotlab.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.myrobotlab.net.HttpRequest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpRequest_ESTest extends HttpRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      HttpRequest httpRequest0 = new HttpRequest(uRLConnection0);
      String[] stringArray0 = new String[1];
      httpRequest0.post(stringArray0, (Object[]) stringArray0);
      assertTrue(uRLConnection0.getDoOutput());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Object object0 = new Object();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      try { 
        httpRequest0.post(uRL0, (String) null, (Object) "mS#}lx5eA|e?", "mS#}lx5eA|e?", object0, "2kTC7tXly&7D", (Object) uRI0, "Cookie", (Object) uRL0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object object0 = new Object();
      try { 
        httpRequest0.post(uRL0, "crjO-.r[|", (Object) "6#Fr2J*", "crjO-.r[|", object0, "crjO-.r[|", object0, "6#Fr2J*", object0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/postLogFile.php", object0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) null, "-", (Object) file0, "ERROR", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        httpRequest0.post("%\"T{H /;s~", object0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "%\"T{H /;s~", object0, "-", object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Map<String, String> map0 = httpRequest0.cookies;
      InputStream inputStream0 = httpRequest0.post(uRL0, (Map<String, String>) hashMap0, map0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.error = "http://myrobotlab.org/myrobotlab_log/postLogFile.php";
      try { 
        httpRequest0.getString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: myrobotlab.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.writeln("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.write("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php");
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.write('w');
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.setParameter("FILE", "org.myrobotlab.io.FindFile");
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.setParameter("", (Object) "~Pn$P*6-");
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.newline();
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.connect();
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      InputStream inputStream0 = httpRequest0.post(uRL0, (Object[]) null);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Map<String, String> map0 = httpRequest0.cookies;
      InputStream inputStream0 = httpRequest0.post(uRL0, map0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/potLogFile.php");
      MockFile mockFile0 = new MockFile("]]~%0_(E%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      httpRequest0.os = bufferedOutputStream0;
      InputStream inputStream0 = httpRequest0.post("http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php");
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      httpRequest0.os = bufferedOutputStream0;
      Object object0 = new Object();
      InputStream inputStream0 = httpRequest0.post("Content-Type", (Object) bufferedOutputStream0, "^%G@$jrl!zpW^2Z;9", object0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String string0 = httpRequest0.getString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.error = "";
      String string0 = httpRequest0.getError();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      byte[] byteArray0 = httpRequest0.getBinary();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      try { 
        httpRequest0.writeln("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      // Undeclared exception!
      try { 
        httpRequest0.writeln((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.write("cF /e}Hgijmikylg<h");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{mrobotlablog/pobtVogFile.phO");
      httpRequest0.connection = null;
      // Undeclared exception!
      try { 
        httpRequest0.write("http://myrobotlab.org{mrobotlablog/pobtVogFile.phO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      try { 
        httpRequest0.write('`');
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      // Undeclared exception!
      try { 
        httpRequest0.setRequestProperty((String) null, "dU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // key is null
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) pipedInputStream0;
      objectArray0[1] = (Object) httpRequest0;
      try { 
        httpRequest0.setParameters(objectArray0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) mockFile0;
      try { 
        httpRequest0.setParameters(objectArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://yroboOab.sr/myrobot_ab_log/postLogFile.php");
      try { 
        httpRequest0.setParameter("http://yroboOab.sr/myrobot_ab_log/postLogFile.php", "http://yroboOab.sr/myrobot_ab_log/postLogFile.php", (InputStream) null);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      // Undeclared exception!
      try { 
        httpRequest0.setParameter("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php", "http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      try { 
        httpRequest0.setParameter("%kY:l#zMK^NYd04", (Object) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.setParameter("http://myrobotlab.org/myrobotlab_log/postLogFile.php", file0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://Ryrobotab.org/myrootl_lo/ostLo;FilC.php", "http://Ryrobotab.org/myrootl_lo/ostLo;FilC.php");
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpRequest httpRequest0 = new HttpRequest("http://Ryrobotab.org/myrootl_lo/ostLo;FilC.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      try { 
        httpRequest0.setParameter("http://Ryrobotab.org/myrootl_lo/ostLo;FilC.php", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      MockFile mockFile0 = new MockFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.setParameter("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockFile mockFile0 = new MockFile("performance clock :{} ms {}");
      try { 
        HttpRequest.postFile("post set file", "post set file", "post set file", mockFile0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: post set file
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "addAppender not possible - wrong type of logger {}");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "addAppender not possible - wrong type of logger {}";
      httpRequest0.setCookies(stringArray0);
      httpRequest0.getString();
      // Undeclared exception!
      try { 
        httpRequest0.postCookies();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "http://myrobotlab.org{myrobotlab_log/pobtLogFile.php";
      stringArray0[1] = "http://myrobotlab.org{myrobotlab_log/pobtLogFile.php";
      try { 
        httpRequest0.post(stringArray0, (Object[]) stringArray0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      HttpRequest httpRequest0 = new HttpRequest(uRLConnection0);
      String[] stringArray0 = new String[14];
      // Undeclared exception!
      try { 
        httpRequest0.post(stringArray0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlab.org/myrootlab_lo/postLogFile.php", "http://myrobotlab.org/myrootlab_lo/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrootlab_lo/postLogFile.php");
      String[] stringArray0 = new String[0];
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "http://myrobotlab.org/myrootlab_lo/postLogFile.php";
      objectArray0[1] = (Object) mockFile0;
      try { 
        httpRequest0.post(stringArray0, objectArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.or/myrobot$ab_log/postLogF.le.pp");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "http://myrobotlab.or/myrobot$ab_log/postLogF.le.pp";
      objectArray0[1] = (Object) "http://myrobotlab.or/myrobot$ab_log/postLogF.le.pp";
      try { 
        httpRequest0.post(objectArray0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        httpRequest0.post(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      MockFile mockFile0 = new MockFile("yj?gJyc)");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) uRL0;
      objectArray0[1] = (Object) mockFile0;
      try { 
        httpRequest0.post(objectArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Disposition: form-data; name=\"user\"", "http://myrobolabxorg/myroboylab_log/postLogFile.php");
      try { 
        httpRequest0.post((Map<String, String>) hashMap0, (Map<String, String>) hashMap0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://Ryrobotab.org/myrootl_lo/ostLo;FilC.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        httpRequest0.post((Map<String, String>) hashMap0, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        httpRequest0.post((Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "getNewInstance failed for {} {} ";
      stringArray0[1] = "getNewInstance failed for {} {} ";
      try { 
        httpRequest0.post(uRL0, stringArray0, (Object[]) stringArray0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/pstLoFil.pp");
      URL uRL0 = MockURL.getFtpExample();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, stringArray0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) uRL0;
      objectArray0[1] = (Object) uRL0;
      try { 
        httpRequest0.post(uRL0, objectArray0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("gh", "gh");
      try { 
        httpRequest0.post(uRL2, (Map<String, String>) hashMap0, (Map<String, String>) hashMap0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      HttpRequest httpRequest0 = new HttpRequest(uRLConnection0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "resolved.*.xml$");
      try { 
        httpRequest0.post(uRL0, (Map<String, String>) hashMap0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.URL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, (String) null, (Object) null, (String) null, object0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", object0, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      HttpRequest httpRequest0 = new HttpRequest(uRLConnection0);
      try { 
        httpRequest0.post(uRL0, "write-connect", (Object) uRLConnection0, "org.myrobotlab.net.HttpRequest", (Object) uRL0, "write-connect", (Object) uRL0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobolabxorg/myroboylab_log/postLogFile.php", "http://myrobolabxorg/myroboylab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      URL uRL0 = MockURL.getHttpExample();
      try { 
        httpRequest0.post(uRL0, "http://myrobolabxorg/myroboylab_log/postLogFile.php", (Object) mockFile0, "write-post connect", (Object) uRL0, ".bf*|qZSF;R@NYJC5", (Object) "write-post connect");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.getHttpExample();
      try { 
        httpRequest0.post(uRL0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.getHttpExample();
      try { 
        httpRequest0.post(uRL0, ":/c\"+V=ndhfOdU=", (Object) mockFile0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) ":/c\"+V=ndhfOdU=");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.URL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.post(uRL0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlab.org/myrbotlab_log/postLogFile.php", "http://myrobotlab.org/myrbotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrbotlab_log/postLogFile.php");
      URL uRL0 = MockURL.getHttpExample();
      try { 
        httpRequest0.post(uRL0, "http://myrobotlab.org/myrbotlab_log/postLogFile.php", (Object) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/potLogFile.php");
      MockFile mockFile0 = new MockFile("]]~%0_(E%");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1);
      httpRequest0.os = bufferedOutputStream0;
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php", "http://myrobotlab.org/myrobotlab_log/potLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/potLogFile.php");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolab.rg/myrootlab_log/postLogFile.php");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        httpRequest0.post("http://myrobolab.rg/myrootlab_log/postLogFile.php", (Object) null, (String) null, object0, "http://myrobolab.rg/myrootlab_log/postLogFile.php", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) file0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobotlabxorg/myroboylab_log/postLogFile.php", "http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlabxorg/myroboylab_log/postLogFile.php");
      try { 
        httpRequest0.post("http://myrobotlabxorg/myroboylab_log/postLogFile.php", (Object) mockFile0, "http://myrobotlabxorg/myroboylab_log/postLogFile.php", (Object) "http://myrobotlabxorg/myroboylab_log/postLogFile.php", "http://myrobotlabxorg/myroboylab_log/postLogFile.php", (Object) "http://myrobotlabxorg/myroboylab_log/postLogFile.php");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolaborg/myroboylab_log/postLogFile.ph");
      // Undeclared exception!
      try { 
        httpRequest0.post("http://myrobolaborg/myroboylab_log/postLogFile.ph", (Object) null, "http://myrobolaborg/myroboylab_log/postLogFile.ph", (Object) httpRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myroblaborg/myroylab_log/postLogFile.ph", "http://myroblaborg/myroylab_log/postLogFile.ph");
      HttpRequest httpRequest0 = new HttpRequest("http://myroblaborg/myroylab_log/postLogFile.ph");
      Object object0 = new Object();
      try { 
        httpRequest0.post("http://myroblaborg/myroylab_log/postLogFile.ph", (Object) mockFile0, "", object0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      // Undeclared exception!
      try { 
        httpRequest0.post("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      try { 
        httpRequest0.post("http://myrobolabxorg/myroboylab_log/postLogFile.php", (Object) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      // Undeclared exception!
      try { 
        httpRequest0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.newline();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.connection = null;
      // Undeclared exception!
      try { 
        httpRequest0.newline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      httpRequest0.connection = null;
      // Undeclared exception!
      try { 
        httpRequest0.getString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolaborg/myroboylab_log/postLogFil.ph");
      httpRequest0.connection = null;
      // Undeclared exception!
      try { 
        httpRequest0.getBinary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.connect();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest((URLConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpRequest httpRequest0 = null;
      try {
        httpRequest0 = new HttpRequest("fR~`RY*Hg");
        fail("Expecting exception: MalformedURLException");
      
      } catch(Throwable e) {
         //
         // no protocol: fR~`RY*Hg
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        httpRequest0.setParameters(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.setParameters((Object[]) null);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      Object[] objectArray0 = new Object[0];
      httpRequest0.setParameters(objectArray0);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlb_log/postLogFile.php");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("http://myrobotlab.org/myrobotlb_log/postLogFile.php", "http://myrobotlab.org/myrobotlb_log/postLogFile.php");
      try { 
        httpRequest0.setParameters((Map<String, String>) hashMap0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      httpRequest0.setParameters((Map<String, String>) null);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlb_log/postLogFile.php");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpRequest0.setParameters((Map<String, String>) hashMap0);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      httpRequest0.os = bufferedOutputStream0;
      InputStream inputStream0 = InputStream.nullInputStream();
      try { 
        httpRequest0.setParameter("write-connect", "write-connect", inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      httpRequest0.os = bufferedOutputStream0;
      // Undeclared exception!
      try { 
        httpRequest0.setParameter("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.setParameter("+.;dh)wFy)", (Object) file0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      httpRequest0.setCookies((String[]) null);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpRequest0.setCookies((Map<String, String>) hashMap0);
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      httpRequest0.setCookies((Map<String, String>) null);
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "/92b\"<+");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      byte[] byteArray0 = httpRequest0.getBinary();
      assertArrayEquals(new byte[] {(byte)47, (byte)57, (byte)50, (byte)98, (byte)34, (byte)60, (byte)43}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.og/myrootlab_lo/ostLogFile.php");
      try { 
        httpRequest0.getBinary();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: myrobotlab.og
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http:W/myrob aborg/myroylab_log/postLogFile.ph", "http:W/myrob aborg/myroylab_log/postLogFile.ph");
      try { 
        HttpRequest.postFile("http:W/myrob aborg/myroylab_log/postLogFile.ph", "http:W/myrob aborg/myroylab_log/postLogFile.ph", "http:W/myrob aborg/myroylab_log/postLogFile.ph", mockFile0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myroblaborg/myroylab_log/postLogFile.ph");
      try { 
        httpRequest0.post("http://myroblaborg/myroylab_log/postLogFile.ph", (Object) "http://myroblaborg/myroylab_log/postLogFile.ph");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
      try { 
        httpRequest0.setParameter("http://myrobotlab.org{myrobotlab_log/pobtLogFile.php", "http://myrobotlab.org{myrobotlab_log/pobtLogFile.php");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myrobolabrg/myroboylab_log/pos]LogFile.ph");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabrg/myroboylab_log/pos]LogFile.ph");
      Object object0 = new Object();
      try { 
        httpRequest0.post("-(7e1", (Object) mockFile0, "Wg(Shjip*&?|<", (Object) "-(7e1", "http://myrobolabrg/myroboylab_log/pos]LogFile.ph", object0, "http://myrobolabrg/myroboylab_log/pos]LogFile.ph", (Object) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://yroboOab.sr/myrobot_ab_log/postLogFile.php");
      InputStream inputStream0 = httpRequest0.post();
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      try { 
        httpRequest0.post("http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "lbfr", (Object) "lbfr");
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.setRequestProperty("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "lJ|@p67UB6]");
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.connection = null;
      httpRequest0.setRequestProperty("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object[] objectArray0 = new Object[0];
      InputStream inputStream0 = httpRequest0.post(objectArray0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org{mrobotlablog/pobtVogFige.phO");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("http://myrobotlab.org{mrobotlablog/pobtVogFige.phO", "");
      try { 
        httpRequest0.post((Map<String, String>) hashMap0);
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      File file0 = MockFile.createTempFile("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php", "http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php");
      HttpRequest httpRequest0 = new HttpRequest("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      httpRequest0.os = bufferedOutputStream0;
      // Undeclared exception!
      try { 
        httpRequest0.setParameter("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php", file0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://Ry!botb.org/myHootl_lo/ostLo;FilC.pTp");
      InputStream inputStream0 = httpRequest0.post((Map<String, String>) null, (Map<String, String>) null);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.myrobotlab.logging.Logging";
      stringArray0[2] = "http://myrobotlab.org/myrobotlab_log/postLogFile.php";
      httpRequest0.setCookies(stringArray0);
      httpRequest0.postCookies();
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.postCookies();
      assertFalse(httpRequest0.hasError());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String[] stringArray0 = new String[2];
      httpRequest0.setCookies(stringArray0);
      // Undeclared exception!
      try { 
        httpRequest0.postCookies();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockFile mockFile0 = new MockFile("http://myroblaborg/myroylab_log/postLogFile.ph");
      HttpRequest httpRequest0 = new HttpRequest("http://myroblaborg/myroylab_log/postLogFile.ph");
      MockPrintStream mockPrintStream0 = new MockPrintStream("http://myroblaborg/myroylab_log/postLogFile.ph");
      Object[] objectArray0 = new Object[7];
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "http://myroblaborg/myroylab_log/postLogFile.ph", objectArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      httpRequest0.os = bufferedOutputStream0;
      httpRequest0.post("http://myroblaborg/myroylab_log/postLogFile.ph", (Object) mockFile0, "http://myroblaborg/myroylab_log/postLogFile.ph", (Object) "http://myroblaborg/myroylab_log/postLogFile.ph", "http://myroblaborg/myroylab_log/postLogFile.ph", (Object) "http://myroblaborg/myroylab_log/postLogFile.ph");
      assertEquals(643L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      assertFalse(httpRequest0.hasError());
      
      httpRequest0.error = "http://myrobotlab.org/myrobotlab_log/postLogFile.php";
      boolean boolean0 = httpRequest0.hasError();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrob;tlab.org/myrobotlab_log/postLogFile.php");
      boolean boolean0 = httpRequest0.hasError();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "` /LQ!/oPcIXMoY");
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.getString();
      // Undeclared exception!
      try { 
        httpRequest0.setRequestProperty("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "lJ|@p67UB6]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Already connected
         //
         verifyException("java.net.URLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String[] stringArray0 = new String[1];
          try { 
            HttpRequest.main(stringArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"myrobotlab.log\" \"write\")
             // java.base/java.lang.Thread.getStackTrace(Thread.java:1602)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:424)
             // java.base/java.lang.SecurityManager.checkWrite(SecurityManager.java:752)
             // java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:225)
             // ch.qos.logback.core.recovery.ResilientFileOutputStream.<init>(ResilientFileOutputStream.java:26)
             // ch.qos.logback.core.FileAppender.openFile(FileAppender.java:204)
             // ch.qos.logback.core.FileAppender.start(FileAppender.java:127)
             // org.myrobotlab.logging.LoggingSLF4J.addAppender(LoggingSLF4J.java:64)
             // org.myrobotlab.logging.LoggingSLF4J.addAppender(LoggingSLF4J.java:26)
             // org.myrobotlab.logging.LoggingSLF4J.configure(LoggingSLF4J.java:83)
             // org.myrobotlab.logging.LoggingFactory.init(LoggingFactory.java:29)
             // org.myrobotlab.logging.LoggingFactory.init(LoggingFactory.java:24)
             // org.myrobotlab.net.HttpRequest.main(HttpRequest.java:73)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.base/java.lang.reflect.Method.invoke(Method.java:566)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:165)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:286)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:192)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:49)
             // java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
             // java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
             // java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
             // java.base/java.lang.Thread.run(Thread.java:829)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      // Undeclared exception!
      try { 
        httpRequest0.post((URL) null, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) "http://myrobotlab.org/myrobotlab_log/postLogFile.php", "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) null, "http://myrobotlab.org/myrobotlab_log/postLogFile.php", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      String string0 = httpRequest0.getError();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotlab_log/postLogFile.php");
      httpRequest0.setCookie("http://myrobotlab.org/myrobotlab_log/postLogFile.php", "");
      assertNull(httpRequest0.getError());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobotlab.org/myrobotla_log/postLogile.php");
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, "http://myrobotlab.org/myrobotla_log/postLogile.php", (Object) uRL0, "http://myrobotlab.org/myrobotla_log/postLogile.php", (Object) uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolaborg/myroboylab_log/postLogFil.ph");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      InputStream inputStream0 = httpRequest0.post((Map<String, String>) hashMap0);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://myrobolabxorg/myroboylab_log/postLogFile.php");
      URL uRL0 = MockURL.getFtpExample();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        httpRequest0.post(uRL0, (Map<String, String>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.HttpRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpRequest httpRequest0 = new HttpRequest(uRL0);
      InputStream inputStream0 = httpRequest0.post(uRL0, (String[]) null, (Object[]) null);
      assertNull(inputStream0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpRequest httpRequest0 = new HttpRequest("http://Ryrobotlab.org/myrootl__lo/ostLogFilC.php");
      Map<String, String> map0 = httpRequest0.cookies;
      // Undeclared exception!
      try { 
        httpRequest0.post((URL) null, map0, map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
