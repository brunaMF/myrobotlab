/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:03:35 GMT 2024
 */

package org.myrobotlab.net;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockServerSocket;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.myrobotlab.net.NanoHTTPD;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NanoHTTPD_ESTest extends NanoHTTPD_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1));
      MockFile mockFile0 = new MockFile("");
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("|G?2", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(33);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockServerSocket mockServerSocket0 = new MockServerSocket(33, 33, inetAddress0);
      nanoHTTPD0.serverSocket = (ServerSocket) mockServerSocket0;
      nanoHTTPD0.stop();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("/");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/index.html");
      FileSystemHandling.createFolder(evoSuiteFile0);
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(1883);
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("/", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = NanoHTTPD.encodeUri("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1));
      // Undeclared exception!
      try { 
        nanoHTTPD0.start();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Port value out of range: -1
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockServerSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1));
      // Undeclared exception!
      try { 
        nanoHTTPD0.serveFile("400 Bad Request", properties0, (File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.NanoHTTPD", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(767);
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        nanoHTTPD0.serve("}", "501 Not Implemented", (Properties) null, (Properties) null, mockSocket0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.NanoHTTPD", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1619287488));
      Properties properties0 = new Properties();
      properties0.putIfAbsent(properties0, "403 Forbidden");
      // Undeclared exception!
      try { 
        nanoHTTPD0.serve("IIeeted", "IIeeted", properties0, properties0, (Socket) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.Properties cannot be cast to class java.lang.String (java.util.Properties and java.lang.String are in module java.base of loader 'bootstrap')
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        NanoHTTPD.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.NanoHTTPD", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        NanoHTTPD.encodeUri((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(2943);
      Properties properties0 = new Properties();
      MockSocket mockSocket0 = new MockSocket();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serve("FUUK", "FUUK", properties0, properties0, mockSocket0);
      MockFile mockFile0 = new MockFile("403 Forbidden");
      NanoHTTPD.Response nanoHTTPD_Response1 = nanoHTTPD0.serveFile("text/plain", nanoHTTPD_Response0.header, mockFile0, true);
      assertFalse(nanoHTTPD_Response1.equals((Object)nanoHTTPD_Response0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = NanoHTTPD.encodeUri("found encoded / - leaving");
      assertEquals("found%20encoded%20/%20-%20leaving", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      NanoHTTPD.Response nanoHTTPD_Response0 = new NanoHTTPD.Response("", "", pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NanoHTTPD.Response nanoHTTPD_Response0 = new NanoHTTPD.Response("O#`wFD>VTF#,O>tEM`", "T)c'p6(fx/G9", "T)c'p6(fx/G9");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(1885);
      nanoHTTPD0.start();
      nanoHTTPD0.start();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      Properties properties0 = new Properties(1987);
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(1987);
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("home/", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(1);
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("//", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("/");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1432813312));
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("/", properties0, mockFile0, false);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not match");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" does not match/index.htm");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "200 OK");
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("/ ", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-1723911539));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("301 Moved Permanently/text/plain");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "501 Not Implemented");
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("301 Moved Permanently");
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("text/plain", properties0, mockFile0, false);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/", "/");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-151));
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("FORBIDDEN: Won't serve ../ for security reasons.", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(16);
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("tefxt/plain..", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      Properties properties0 = new Properties();
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-316));
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("..", properties0, mockFile0, true);
      assertNotNull(nanoHTTPD_Response0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD((-197115671));
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("", properties0, mockFile0, false);
      NanoHTTPD.Response nanoHTTPD_Response1 = nanoHTTPD0.serve("", "text/html", properties0, nanoHTTPD_Response0.header, (Socket) null);
      assertFalse(nanoHTTPD_Response1.equals((Object)nanoHTTPD_Response0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(0);
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("..501 Not Implemented");
      MockFile.createTempFile("org.m#robotlabkloGginV.LoggerFactory", "403 Forbidden", (File) mockFile0);
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile(" ", properties0, mockFile0, false);
      MockSocket mockSocket0 = new MockSocket();
      NanoHTTPD.Response nanoHTTPD_Response1 = nanoHTTPD0.serve("301 Moved Permanently", "sKz$+I+:LC!Wn", nanoHTTPD_Response0.header, properties0, mockSocket0);
      assertFalse(nanoHTTPD_Response1.equals((Object)nanoHTTPD_Response0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "404";
      stringArray0[1] = "%licence";
      stringArray0[2] = "404";
      stringArray0[3] = "404";
      stringArray0[4] = "%25licence";
      stringArray0[5] = "%25licence";
      NanoHTTPD.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_R";
      stringArray0[1] = "200 OK";
      stringArray0[2] = "501 Not Implemented";
      stringArray0[3] = "403 Forbidden";
      stringArray0[4] = "/";
      stringArray0[5] = "text/html";
      stringArray0[6] = "500 Internal Server Error";
      stringArray0[7] = "text/plain";
      // Undeclared exception!
      try { 
        NanoHTTPD.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_R\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      NanoHTTPD.main(stringArray0);
      // Undeclared exception!
      try { 
        NanoHTTPD.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" does not match");
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(28);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" does not match/ does not match0 does not match");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Properties properties0 = new Properties();
      NanoHTTPD.Response nanoHTTPD_Response0 = nanoHTTPD0.serveFile("/ ", properties0, mockFile0, true);
      NanoHTTPD.Response nanoHTTPD_Response1 = nanoHTTPD0.serveFile("?ej*A", nanoHTTPD_Response0.header, mockFile0, true);
      assertFalse(nanoHTTPD_Response1.equals((Object)nanoHTTPD_Response0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NanoHTTPD.Response nanoHTTPD_Response0 = new NanoHTTPD.Response();
      nanoHTTPD_Response0.addHeader("qu\"D)8\" u2", "wL}[>'");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " ll be< add!dlicence";
      stringArray0[1] = "liceTce";
      NanoHTTPD.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NanoHTTPD nanoHTTPD0 = new NanoHTTPD(2);
      // Undeclared exception!
      try { 
        nanoHTTPD0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.net.NanoHTTPD", e);
      }
  }
}
