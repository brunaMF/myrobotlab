/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:55:42 GMT 2024
 */

package org.myrobotlab.openni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.openni.PMatrix3D;
import org.myrobotlab.openni.PVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PMatrix3D_ESTest extends PMatrix3D_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[19];
      pMatrix3D0.set(floatArray0);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[0];
      pMatrix3D0.set(floatArray0);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(1041.1F, (-231.41806F), (-231.41806F), 2405.5F, 2405.5F, 1041.1F);
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        pMatrix3D0.mult(floatArray0, floatArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The source and target vectors used in PMatrix3D.mult() cannot be identical.
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(0.0F, (-263.0F), (-3755.0F), (-3755.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-263.0F), (-3755.0F), 180.0F, 0.0F, 4338.5967F, 180.0F, 180.0F);
      pMatrix3D0.set(pMatrix3D0);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m11, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m00, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals((-3755.0F), pMatrix3D0.m22, 0.01F);
      assertEquals((-3755.0F), pMatrix3D0.m02, 0.01F);
      assertEquals(180.0F, pMatrix3D0.m32, 0.01F);
      assertEquals((-263.0F), pMatrix3D0.m21, 0.01F);
      assertEquals(180.0F, pMatrix3D0.m33, 0.01F);
      assertEquals((-263.0F), pMatrix3D0.m01, 0.01F);
      assertEquals(180.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(4338.5967F, pMatrix3D0.m31, 0.01F);
      assertEquals((-3755.0F), pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      
      pMatrix3D0.preApply(pMatrix3D0);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[17];
      float[] floatArray1 = pMatrix3D0.get(floatArray0);
      pMatrix3D0.mult(floatArray1, floatArray0);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float float0 = PMatrix3D.sqrt(268.0F);
      assertEquals(16.370705F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      
      pMatrix3D0.m23 = (-203.26F);
      float float0 = pMatrix3D0.multZ(3196.0F, (-1173.1208F), (-203.26F), (-1.0F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(2394.7598F, (-1604.4176F), (-1.0F), 180.0F, 2394.7598F, (-1604.4176F));
      pMatrix3D0.apply(180.0F, 1466.4792F, 199.62F, 3061.4575F, 0.0F, (-6622.1436F), 0.0F, 0.0F, 0.0F, 199.62F, 3061.4575F, (-1810.3944F), (-1604.4176F), 4578.814F, 1466.4792F, 1466.4792F);
      pMatrix3D0.translate(199.62F, 2394.7598F);
      pMatrix3D0.preApply(180.0F, 1358.1626F, (-1634.102F), (-653.1903F), (-441.3264F), (-1604.4176F), 0.0F, 199.62F, 1358.1626F, 3472.5945F, 1358.1626F, (-1604.4176F), 1927.3F, (-1.0F), 2394.7598F, 2394.7598F);
      float float0 = pMatrix3D0.multZ(2394.7598F, (-653.1903F), (-1604.4176F), 180.0F);
      assertEquals(Float.NaN, pMatrix3D0.determinant(), 0.01F);
      assertEquals((-1.5469057E16F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multZ(0.0F, 180.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multZ(3904.9001F, 3904.9001F, 3904.9001F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(3904.9001F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-1.0F), (-1.0F), 1804.1853F, (-1.0F), (-1211.1754F), 1231.6565F);
      pMatrix3D0.scale(1231.6565F, (-1984.9F), (-1039.998F));
      pMatrix3D0.scale((-2579.2156F));
      float float0 = pMatrix3D0.multY((-1.0F), (-1558.0F), (-1211.1754F), 1804.1853F);
      assertEquals(-0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(5.6590776E12F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(180.0F, 444.9F, (-2573.235F), 444.9F, 180.0F, 444.9F);
      float float0 = pMatrix3D0.multY(180.0F, (-3466.0F), 6621539.0F);
      assertEquals(2.94537882E9F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals((-165536.0F), pMatrix3D0.determinant(), 0.01F);
      assertEquals((-2573.235F), pMatrix3D0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multY(1.0F, (-1775.8716F), 1090.99F);
      assertEquals((-1775.8716F), float0, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multY(0.0F, 0.0F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), 380.44934F, 380.44934F, 380.44934F, 0.0F, 0.0F, 0.0F, 380.44934F, 1130.61F, (-117.7F));
      float float0 = pMatrix3D0.multY((-8.3F), 0.0F);
      assertEquals((-117.7F), pMatrix3D0.m33, 0.01F);
      assertEquals((-8.4865208E9F), pMatrix3D0.determinant(), 0.01F);
      assertEquals(1130.61F, pMatrix3D0.m32, 0.01F);
      assertEquals(1357.3594F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multX(930.47375F, (-201115.44F), 0.0F, 0.0F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(930.47375F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(875.4715F, 821.2541F, 821.2541F, (-1809.5F), 0.0F, (-1809.5F));
      float float0 = pMatrix3D0.multX((-1.0F), (-1809.5F), 821.2541F, 875.4715F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals((-812476.5F), float0, 0.01F);
      assertEquals((-1809.5F), pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(1486059.2F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-1133.2808F), 0.0F, (-1133.2808F), 0.0F, 0.0F, 0.0F);
      float float0 = pMatrix3D0.multX(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(1.0F, pMatrix3D0.m22, 0.01F);
      assertEquals(1.0F, pMatrix3D0.m33, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(-0.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), 380.44934F, 380.44934F, 380.44934F, 0.0F, 0.0F, 0.0F, 380.44934F, 1130.61F, (-117.7F));
      float float0 = pMatrix3D0.multX(2562.553F, 1311.2F, 1.0F);
      assertEquals((-117.7F), pMatrix3D0.m33, 0.01F);
      assertEquals((-8.4865208E9F), pMatrix3D0.determinant(), 0.01F);
      assertEquals((-456176.06F), float0, 0.01F);
      assertEquals(1130.61F, pMatrix3D0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-1812.988F), (-1812.988F), (-1812.988F), 2879.0803F, 2879.0803F, 1610.2F, 868.41F, 1610.2F, 0.0F, 697.5804F, 0.0F, 0.0F, (-1938.5675F), 0.0F, 0.0F, 0.0F);
      float float0 = pMatrix3D0.multX((-1938.5675F), (-1938.5675F));
      assertEquals((-7.3288196E12F), pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(2879.0803F, pMatrix3D0.m10, 0.01F);
      assertEquals(1610.2F, pMatrix3D0.m11, 0.01F);
      assertEquals(7032078.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(329.207F, 329.207F, (-3108.425F), (-3108.425F), 1.0F, 2927.047F);
      float float0 = pMatrix3D0.multX((-3108.425F), 0.0F);
      assertEquals(1023644.5F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(2927.047F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals((-3108.425F), pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals((-1023315.3F), float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multW(1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multW((-980.6803F), (-980.6803F), (-980.6803F), (-980.6803F));
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals((-980.6803F), float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PMatrix3D pMatrix3D1 = new PMatrix3D(pMatrix3D0);
      pMatrix3D0.scale(0.0F, 0.0F);
      pMatrix3D1.set((-1556.934F), 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, (-2097.0F), 0.0F, 0.0F, (-468.206F), 0.0F, 1301.5193F, 0.0F);
      pMatrix3D1.apply(pMatrix3D0);
      float float0 = pMatrix3D1.multW(180.0F, (-4347.94F), 0.0F);
      assertEquals(0.0F, pMatrix3D0.m00, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.set(0.0F, 882.1863F, 2034.3F, 0.0F, 211.0F, 0.0F, 350.309F, 1.0F, (-14.31F), 0.0F, 1678.3F, 0.0F, (-1579.87F), 0.0F, (-2204.8494F), 1.0F);
      float float0 = pMatrix3D0.multW(1.0F, 0.0F, 0.0F);
      assertEquals(1.0F, pMatrix3D0.m13, 0.01F);
      assertEquals((-1578.87F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(0.0F, (-599.19F), 0.0F, 2311.15F, (-599.19F), 2311.15F, 607.24396F, 2311.15F, (-669.1285F), 0.0F, 0.0F, 226.4605F, 226.4605F, 2758.0286F, (-599.19F), 1972.0F);
      PVector pVector0 = new PVector(1972.0F, 446.2534F, (-599.19F));
      pMatrix3D0.mult(pVector0, pVector0);
      assertEquals((-265079.4F), pVector0.x, 0.01F);
      assertEquals((-2.0486991F), pVector0.heading2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PVector pVector0 = new PVector(0.0F, 0.0F);
      pVector0.setAngleYZ(1.0E-4F);
      PVector pVector1 = pMatrix3D0.mult(pVector0, pVector0);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pVector1.mag(), 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(223.2F, 223.2F, 180.0F, 223.2F, 223.2F, 223.2F, 180.0F, 223.2F, 180.0F, 223.2F, 223.2F, 180.0F, (-442.4F), (-242.56554F), 1.1420334E7F, 180.0F);
      PVector pVector0 = new PVector(180.0F, 180.0F);
      pVector0.setAngleYZ((-442.4F));
      pMatrix3D0.mult(pVector0, pVector0);
      assertEquals(80575.2F, pVector0.x, 0.01F);
      assertEquals(0.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleXY(1.0F);
      PVector pVector1 = pMatrix3D0.mult(pVector0, pVector0);
      assertEquals(0.0F, pVector1.mag(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(1.0F, pVector1.getAngleXY(), 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleXY((-26.291449F));
      PVector pVector1 = pMatrix3D0.mult(pVector0, pVector0);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pVector1.mag(), 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PMatrix3D pMatrix3D1 = pMatrix3D0.get();
      assertEquals(1.0F, pMatrix3D1.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D1.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D1.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), (-117.7F), 380.44934F, 380.44934F, 380.44934F, 0.0F, 0.0F, 0.0F, 380.44934F, 1130.61F, (-117.7F));
      PMatrix3D pMatrix3D1 = pMatrix3D0.get();
      assertNotNull(pMatrix3D1);
      assertEquals((-117.7F), pMatrix3D1.m33, 0.01F);
      assertEquals((-8.4865208E9F), pMatrix3D1.determinant(), 0.01F);
      assertEquals(1130.61F, pMatrix3D1.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.determinant();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(180.0F, 444.9F, (-2573.235F), 444.9F, 180.0F, 444.9F);
      float float0 = pMatrix3D0.determinant();
      assertEquals(444.9F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals((-165536.0F), float0, 0.01F);
      assertEquals((-2573.235F), pMatrix3D0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      // Undeclared exception!
      try { 
        pMatrix3D0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PMatrix3D pMatrix3D0 = null;
      try {
        pMatrix3D0 = new PMatrix3D((PMatrix3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.apply((-3196.0F), 0.0F, 0.0F, (-2.8632674E-4F), 0.0F, 0.0F);
      boolean boolean0 = pMatrix3D0.invert();
      assertEquals((-2.8632674E-4F), pMatrix3D0.m10, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      boolean boolean0 = pMatrix3D0.invert();
      assertEquals(-0.0F, pMatrix3D0.m30, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-2350.68F), (-1127.1992F), (-1127.1992F), (-2350.68F), (-1.0F), 180.0F);
      pMatrix3D0.translate(180.0F, 1.0F, (-1.0F));
      assertEquals((-1.0F), pMatrix3D0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      // Undeclared exception!
      try { 
        pMatrix3D0.preApply((PMatrix3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      // Undeclared exception!
      try { 
        pMatrix3D0.set((PMatrix3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-3475.071F), (-3475.071F), 0.0F, (-522.01F), (-3475.071F), 1722.286F, (-2847.0F), (-3170.0F), 0.0F, 0.0F, (-3170.0F), 500.8F, 1578.8F, 0.0F, 500.8F, 967.9912F);
      pMatrix3D0.scale((-2847.0F), (-3441.3948F), 180.0F);
      float float0 = pMatrix3D0.multY((-2847.0F), 1578.8F, 0.0F, 0.0F);
      assertEquals(-0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals((-3.7524521E10F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float float0 = PMatrix3D.sqrt(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-2350.68F), (-1127.1992F), (-1127.1992F), (-2350.68F), (-1.0F), 180.0F);
      pMatrix3D0.reset();
      assertEquals(1.0F, pMatrix3D0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(180.0F, 180.0F, (-2573.235F), 180.0F, 180.0F, 180.0F);
      float float0 = pMatrix3D0.determinant();
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(1.0F, pMatrix3D0.m33, 0.01F);
      assertEquals(1.0F, pMatrix3D0.m22, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals((-2573.235F), pMatrix3D0.m02, 0.01F);
      assertEquals(180.0F, pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      
      pMatrix3D0.set(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[9];
      float[] floatArray1 = pMatrix3D0.get(floatArray0);
      pMatrix3D0.set(floatArray1);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      
      pMatrix3D0.rotate(0.0F, 571.44354F, 0.0F, Float.NaN);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotate(0.0F, 1.0E-4F, 1.0E-4F, 1.0E-4F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-516.0F), (-516.0F), (-2.14866197E16F), (-1894.0F), 0.0F, 0.0F);
      pMatrix3D0.print();
      assertEquals((-977304.0F), pMatrix3D0.determinant(), 0.01F);
      assertEquals((-2.14866197E16F), pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals((-516.0F), pMatrix3D0.m00, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-2350.68F), (-1127.1992F), (-1127.1992F), (-2350.68F), (-1.0F), 180.0F);
      // Undeclared exception!
      try { 
        pMatrix3D0.mult((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      float[] floatArray0 = pVector0.array();
      float[] floatArray1 = pMatrix3D0.get(floatArray0);
      // Undeclared exception!
      try { 
        pMatrix3D0.mult(floatArray0, floatArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[7];
      float[] floatArray2 = pMatrix3D0.mult(floatArray1, floatArray0);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      // Undeclared exception!
      try { 
        pMatrix3D0.mult((float[]) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      boolean boolean0 = pMatrix3D0.invApply(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invApply((-1.1338128F), (-1.0F), (-1.1338128F), (-1.1338128F), 2150.5F, (-1.0F), 2150.5F, 2150.5F, (-44.9735F), 1.0F, (-1147.7F), (-1.1338128F), 1.0E-4F, (-1.1338128F), 5.3860517E18F, (-0.022786342F));
      pMatrix3D0.invApply((-1.0F), 462.50415F, (-0.99890655F), (-2.404006E-5F), (-1.0F), (-1.0F), (-2.404006E-5F), 1.0F, 314.0F, 1.0F, (-0.022760497F), 1264.6F, 6373971.0F, (-1543.956F), 5.3860517E18F, 462.50415F);
      assertEquals((-4.923396E-5F), pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[9];
      float[] floatArray1 = pMatrix3D0.get(floatArray0);
      float[] floatArray2 = pMatrix3D0.get(floatArray1);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertSame(floatArray2, floatArray1);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = pMatrix3D0.get((float[]) null);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(16, floatArray0.length);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.shearY((-801.8F));
      assertEquals((-0.83184814F), pMatrix3D0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-516.0F), (-516.0F), (-2.14866197E16F), (-1894.0F), 0.0F, 0.0F);
      float float0 = pMatrix3D0.multW(0.0F, 0.0F, (-1894.0F));
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals((-2.14866197E16F), pMatrix3D0.m02, 0.01F);
      assertEquals((-977304.0F), pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals((-516.0F), pMatrix3D0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multY((-980.6803F), (-980.6803F));
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals((-980.6803F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float[] floatArray0 = new float[6];
      pMatrix3D0.set(floatArray0);
      assertEquals(0.0F, pMatrix3D0.m11, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(1.0F, pMatrix3D0.m11, 0.01F);
      
      pMatrix3D0.preApply(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(1.0F, pMatrix3D0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(180.0F, 180.0F, (-2573.235F), 180.0F, 180.0F, 180.0F);
      float float0 = pMatrix3D0.multZ(180.0F, 0.0F, (-1127.0735F));
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals((-1127.0735F), float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(1.0F, pMatrix3D0.m33, 0.01F);
      assertEquals((-2573.235F), pMatrix3D0.m02, 0.01F);
      assertEquals(180.0F, pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.shearX(1.0F);
      assertEquals(1.5574077F, pMatrix3D0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invTranslate(1.0F, 1.0F, 1.0F);
      assertEquals((-1.0F), pMatrix3D0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      
      pMatrix3D0.invRotateX(0.0F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotate(0.0F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multZ(3196.0F, (-1173.1208F), 1.0F, (-1.0F));
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(461.0F, 461.0F, 461.0F, (-904.86426F), 0.0F, (-904.86426F), 0.0F, (-3933.541F), 1894.2499F, 4256.99F, (-1.0F), (-1.0F), 0.0F, 0.0F, 180.0F, (-3927.1F));
      float float0 = pMatrix3D0.multX(0.0F, 1572.0F, 0.0F);
      assertEquals(723787.1F, float0, 0.01F);
      assertEquals((-3.59683352E12F), pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invRotate(1.0F, 1.0F, 1.0F, 0.0F);
      assertEquals(0.84147096F, pMatrix3D0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D((-516.0F), (-516.0F), (-2.14866197E16F), (-1894.0F), 0.0F, 0.0F);
      float float0 = pMatrix3D0.multW((-1894.0F), (-1161.3F), 0.0F, 0.0F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals((-516.0F), pMatrix3D0.m00, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals((-977304.0F), pMatrix3D0.determinant(), 0.01F);
      assertEquals((-2.14866197E16F), pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D(223.2F, 223.2F, 180.0F, 223.2F, 223.2F, 223.2F, 180.0F, 223.2F, 180.0F, 223.2F, 223.2F, 180.0F, (-442.4F), (-242.56554F), 1.1420334E7F, 180.0F);
      PMatrix3D pMatrix3D1 = pMatrix3D0.get();
      assertEquals(0.0F, pMatrix3D1.determinant(), 0.01F);
      assertEquals((-242.56554F), pMatrix3D1.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals((-442.4F), pMatrix3D1.m30, 0.01F);
      assertEquals(223.2F, pMatrix3D1.m22, 0.01F);
      assertEquals(223.2F, pMatrix3D1.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multY(32399.0F, 0.0F, 1336.0808F, 180.0F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multX(0.0F, 1.0F, 3037.776F, (-186.4F));
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotateZ(0.0F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invRotateY(-0.0F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotate(1890.63F, 1451.22F, 6091174.5F, 0.0F);
      pMatrix3D0.print();
      assertEquals(0.8203505F, pMatrix3D0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.transpose();
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m12, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      // Undeclared exception!
      try { 
        pMatrix3D0.apply((PMatrix3D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PMatrix3D", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotateX(0.0F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.rotateY((-1724.2214F));
      assertEquals(0.49073339F, pMatrix3D0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multX(0.0F, (-234.36748F));
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m20, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      float float0 = pMatrix3D0.multY((-3466.0F), -0.0F, 32400.0F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m23, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invScale(0.27772802F, 0.27772802F, 0.27772802F);
      assertEquals(3.600645F, pMatrix3D0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PMatrix3D pMatrix3D0 = new PMatrix3D();
      pMatrix3D0.invRotateZ(0.0F);
      assertEquals(0.0F, pMatrix3D0.m03, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m01, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m02, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m13, 0.01F);
      assertEquals(1.0F, pMatrix3D0.determinant(), 0.01F);
      assertEquals(0.0F, pMatrix3D0.m10, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m21, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m32, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m30, 0.01F);
      assertEquals(0.0F, pMatrix3D0.m31, 0.01F);
  }
}
