/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:54:16 GMT 2024
 */

package org.myrobotlab.openni;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.openni.PVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PVector_ESTest extends PVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F, 2093.3F);
      pVector0.sub(pVector0);
      assertEquals(0.0F, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.mapXZ((-1144), 4951, 4951, (-1144));
      pVector0.setAngleYZ(671.8246F);
      assertEquals(3135.1753F, pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PVector pVector0 = new PVector(1755.337F, 0.0F);
      pVector0.mapXY((-1.0F), Float.NaN, (-1001.87F), 0.0F);
      pVector0.setAngleXY(1.0F);
      assertEquals(Float.NaN, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.mapXY(2145807310, (-2146519743), 0, (-993));
      pVector0.setAngleXY((-2055.1F));
      assertEquals((-496.4181F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PVector pVector0 = new PVector(2435.5F, 2435.5F, 2435.5F);
      float[] floatArray0 = pVector0.array();
      pVector0.set(floatArray0);
      assertArrayEquals(new float[] {2435.5F, 2435.5F, 2435.5F}, floatArray0, 0.01F);
      assertEquals("[ 2435.5, 2435.5, 2435.5 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      float[] floatArray0 = new float[2];
      pVector0.set(floatArray0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, pVector0, pVector0);
      pVector0.normalize(pVector1);
      assertEquals(Float.NaN, pVector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, pVector0, pVector0);
      pVector1.mult(pVector0);
      assertEquals(Float.NaN, pVector0.z, 0.01F);
      assertEquals("[ NaN, NaN, NaN ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.limit(0.0F);
      assertEquals(0.0F, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = pVector0.array();
      pVector0.get(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = new float[2];
      float[] floatArray1 = pVector0.get(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PVector pVector0 = new PVector(180.0F, 180.0F, 1.0F);
      pVector0.div(pVector0);
      assertEquals(1.0F, pVector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.div(pVector0);
      assertEquals(Float.NaN, pVector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PVector pVector0 = new PVector(1534.3591F, 1333.1866F, (-2451.0F));
      pVector0.add(pVector0);
      assertEquals(2666.3733F, pVector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PVector pVector0 = new PVector(2435.5F, 2435.5F, 2435.5F);
      pVector0.add(4871.0F, 4871.0F, 4871.0F);
      assertEquals(7306.5F, pVector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PVector pVector0 = new PVector((-1.0F), (-1.0F), 1789.1F);
      PVector.mult(pVector0, pVector0, pVector0);
      assertEquals(3200878.8F, pVector0.z, 0.01F);
      assertEquals("[ 1.0, 1.0, 3200878.8 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, pVector0);
      float float0 = PVector.dist(pVector0, pVector1);
      assertEquals("[ NaN, NaN, NaN ]", pVector1.toString());
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector.div(pVector0, 0.0F, pVector0);
      PVector.aSinangleBetween(pVector0, pVector0);
      assertEquals(Float.NaN, pVector0.x, 0.01F);
      assertEquals("[ NaN, NaN, NaN ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.sub(pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = new PVector(0.0F, 1.0F, 0.0F);
      PVector.sub(pVector1, pVector0, pVector0);
      assertEquals(1.0F, pVector0.mag(), 0.01F);
      assertEquals("[ 0.0, 1.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PVector pVector0 = new PVector((-3672.2363F), (-4355.0F));
      PVector pVector1 = new PVector((-725.034F), 0.0F, (-4355.0F));
      PVector.sub(pVector0, pVector1, pVector0);
      assertEquals(6827.741F, pVector0.mag(), 0.01F);
      assertEquals("[ -2947.2024, -4355.0, 4355.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ(1.0F);
      PVector.sub(pVector0, pVector0, pVector0);
      assertEquals(1.0F, pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleYZ((-2106.6843F));
      PVector.sub(pVector0, pVector0, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
      assertEquals((-2106.6843F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PVector pVector0 = new PVector(1755.337F, 0.0F);
      pVector0.setAngleXY(1.0F);
      PVector.sub(pVector0, pVector0, pVector0);
      assertEquals(1.0F, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleXY((-2055.1F));
      PVector.sub(pVector0, pVector0, pVector0);
      assertEquals(0.0F, pVector0.mag(), 0.01F);
      assertEquals((-2055.1F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PVector pVector0 = new PVector(180.0F, (-457.0F), (-457.0F));
      pVector0.setAngleYZ(1.0F);
      pVector0.normalize(pVector0);
      assertEquals((-0.6811812F), pVector0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleYZ((-1.0F));
      pVector0.normalize(pVector0);
      assertEquals((-1.0F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY(Float.NaN);
      pVector0.normalize(pVector0);
      assertEquals(Float.NaN, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PVector pVector0 = new PVector(335.992F, 335.992F);
      pVector0.setAngleXY((-1.0F));
      pVector0.normalize(pVector0);
      assertEquals(0.70710677F, pVector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PVector pVector0 = new PVector((-1.0F), (-1330.5793F));
      PVector pVector1 = PVector.mult(pVector0, pVector0);
      PVector.mult(pVector1, pVector0, pVector1);
      assertEquals((-1.0F), pVector1.x, 0.01F);
      assertEquals("[ -1.0, -1330.5793, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ(342.7F);
      PVector.mult(pVector0, pVector0, pVector0);
      assertEquals(342.7F, pVector0.getAngleYZ(), 0.01F);
      assertEquals(0.0F, pVector0.heading2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ((-3826.5168F));
      PVector.mult(pVector0, pVector0, pVector0);
      assertEquals((-3826.517F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PVector pVector0 = new PVector(3403.2493F, 3403.2493F);
      pVector0.setAngleXY(1866.9508F);
      PVector.mult(pVector0, pVector0, pVector0);
      assertEquals(1.1582106E7F, pVector0.x, 0.01F);
      assertEquals("[ 1.1582106E7, 1.1582106E7, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleXY((-723.9404F));
      PVector.mult(pVector0, pVector0, pVector0);
      assertEquals((-723.9404F), pVector0.getAngleXY(), 0.01F);
      assertEquals("[ 1.0, 1.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, (-3215.72F), pVector0);
      PVector pVector2 = PVector.sub(pVector0, pVector1);
      PVector pVector3 = PVector.mult(pVector2, pVector0);
      assertEquals(-0.0F, pVector0.y, 0.01F);
      assertEquals("[ -0.0, -0.0, -0.0 ]", pVector3.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.mult(pVector0, 0.0F, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PVector pVector0 = new PVector((-1110.17F), (-1.0F));
      pVector0.setAngleYZ(Float.NaN);
      PVector.mult(pVector0, (-104.7F), pVector0);
      assertEquals(Float.NaN, pVector0.getAngleYZ(), 0.01F);
      assertEquals("[ 116234.8, 104.7, -0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleYZ((-1.0F));
      PVector.mult(pVector0, (-1732.0F), pVector0);
      assertEquals(-0.0F, pVector0.x, 0.01F);
      assertEquals((-1.0F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PVector pVector0 = new PVector((-1999.487F), 274.0F, 274.0F);
      pVector0.setAngleXY(274.0F);
      PVector.mult(pVector0, (-1083.2F), pVector0);
      assertEquals((-296796.78F), pVector0.z, 0.01F);
      assertEquals(274.0F, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.mult(pVector0, 0.0F);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
      assertNotSame(pVector1, pVector0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = pVector0.mag();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F);
      float float0 = pVector0.heading2D();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, pVector0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PVector pVector0 = new PVector((-1320.4496F), 226.55F, (-1211.1385F));
      PVector pVector1 = PVector.mult(pVector0, (-434.1728F));
      float float0 = pVector1.heading2D();
      assertEquals((-0.169916F), float0, 0.01F);
      assertEquals(525843.4F, pVector1.z, 0.01F);
      assertEquals("[ -1320.4496, 226.55, -1211.1385 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ(1.7320508F);
      float float0 = pVector0.getAngleYZ();
      assertEquals(1.7320508F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleYZ((-1.0F));
      float float0 = pVector0.getAngleYZ();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PVector pVector0 = new PVector((-1999.487F), 274.0F, 274.0F);
      assertEquals(0.0F, pVector0.getAngleXY(), 0.01F);
      
      pVector0.setAngleXY(274.0F);
      float float0 = pVector0.getAngleXY();
      assertEquals(274.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY((-3100.2F));
      float float0 = pVector0.getAngleXY();
      assertEquals((-3100.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = new float[0];
      float[] floatArray1 = pVector0.get(floatArray0);
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = pVector0.get();
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PVector pVector0 = new PVector(791.621F, 791.621F);
      PVector pVector1 = PVector.sub(pVector0, pVector0, pVector0);
      pVector1.y = (-3290.9868F);
      pVector1.get();
      assertEquals(3290.9868F, pVector1.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F, 2093.3F);
      float float0 = PVector.dot(pVector0, pVector0);
      assertEquals("[ 1.0, 1.0, 2093.3 ]", pVector0.toString());
      assertEquals(4381907.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PVector pVector0 = new PVector((-1174.7275F), (-145.56F), (-1174.7275F));
      PVector pVector1 = PVector.mult(pVector0, pVector0);
      float float0 = PVector.dot(pVector1, pVector0);
      assertEquals("[ -1174.7275, -145.56, -1174.7275 ]", pVector0.toString());
      assertEquals((-3.24529613E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = pVector0.dot(pVector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PVector pVector0 = new PVector((-1.0F), 3204.1472F, 0.0F);
      PVector pVector1 = PVector.cross(pVector0, pVector0, (PVector) null);
      PVector pVector2 = PVector.sub(pVector1, pVector0);
      PVector pVector3 = PVector.mult(pVector2, 1.0F);
      float float0 = pVector3.dot(pVector0);
      assertEquals((-1.026656E7F), float0, 0.01F);
      assertEquals(0.0F, pVector1.heading2D(), 0.01F);
      assertEquals("[ 1.0, -3204.1472, 0.0 ]", pVector3.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = pVector0.dot(2168.9949F, 0.0F, 2168.9949F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PVector pVector0 = new PVector((-1225.3873F), (-1225.3873F), (-1225.3873F));
      float float0 = pVector0.dot((-1225.3873F), (-1225.3873F), (-1225.3873F));
      assertEquals(4504722.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PVector pVector0 = new PVector(1286.97F, (-1.0F), (-1.0F));
      PVector pVector1 = PVector.mult(pVector0, pVector0);
      PVector pVector2 = PVector.cross(pVector1, pVector0, pVector0);
      PVector.div(pVector1, pVector0, pVector2);
      assertEquals(6.032896E-7F, pVector2.y, 0.01F);
      assertEquals("[ Infinity, 6.032896E-7, -6.032896E-7 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PVector pVector0 = new PVector((-1256.5F), (-271.57468F), (-271.57468F));
      PVector pVector1 = PVector.sub(pVector0, pVector0);
      PVector.div(pVector1, pVector0, pVector1);
      assertEquals(-0.0F, pVector1.z, 0.01F);
      assertEquals("[ -0.0, -0.0, -0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ(670.0F);
      PVector.div(pVector0, pVector0, pVector0);
      assertEquals(Float.NaN, pVector0.z, 0.01F);
      assertEquals(670.0F, pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleYZ((-2106.6843F));
      PVector.div(pVector0, pVector0, pVector0);
      assertEquals(Float.NaN, pVector0.z, 0.01F);
      assertEquals((-2106.6843F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PVector pVector0 = new PVector(3403.2493F, 3403.2493F);
      pVector0.setAngleXY(1866.9508F);
      PVector.div(pVector0, pVector0, pVector0);
      assertEquals(Float.NaN, pVector0.z, 0.01F);
      assertEquals("[ 1.0, 1.0, NaN ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY((-1110.17F));
      PVector.div(pVector0, pVector0, pVector0);
      assertEquals(Float.NaN, pVector0.x, 0.01F);
      assertEquals((-1110.17F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PVector pVector0 = new PVector((-617.8287F), (-617.8287F), 788.0944F);
      PVector pVector1 = PVector.mult(pVector0, (-617.8287F));
      PVector pVector2 = PVector.div(pVector1, 381712.28F, pVector0);
      PVector.cross(pVector1, pVector1, pVector2);
      PVector.div(pVector2, pVector1);
      assertEquals(0.0F, pVector0.heading2D(), 0.01F);
      assertEquals("[ 381712.28, 381712.28, -486907.34 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F, 0.0F);
      PVector pVector1 = PVector.sub(pVector0, pVector0);
      PVector pVector2 = PVector.add(pVector1, pVector0, pVector1);
      assertEquals(1.0F, pVector2.y, 0.01F);
      
      PVector pVector3 = PVector.cross(pVector2, pVector1, pVector2);
      PVector.div(pVector3, pVector0);
      assertEquals(0.0F, pVector1.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PVector pVector0 = new PVector((-1320.4496F), 226.55F, (-1211.1385F));
      PVector pVector1 = PVector.div(pVector0, 226.55F);
      pVector1.limit((-2.2283876E7F));
      PVector.div(pVector1, pVector0);
      assertEquals(1.6292434E7F, pVector1.x, 0.01F);
      assertEquals(2.2283874E7F, pVector1.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, 2168.9949F, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PVector pVector0 = new PVector(791.621F, 791.621F);
      pVector0.setAngleYZ(1473.0F);
      PVector.div(pVector0, 2210.162F, pVector0);
      assertEquals(0.35817325F, pVector0.x, 0.01F);
      assertEquals("[ 0.35817325, 0.35817325, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleYZ((-2106.6843F));
      PVector.div(pVector0, 0.0F, pVector0);
      assertEquals(Float.POSITIVE_INFINITY, pVector0.y, 0.01F);
      assertEquals((-2106.6843F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PVector pVector0 = new PVector((-1999.487F), 274.0F, 274.0F);
      pVector0.setAngleXY(274.0F);
      PVector.div(pVector0, (-1999.487F), pVector0);
      assertEquals(274.0F, pVector0.getAngleXY(), 0.01F);
      assertEquals("[ 1.0, -0.13703515, -0.13703515 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PVector pVector0 = new PVector(335.992F, 335.992F);
      pVector0.setAngleXY((-1.0F));
      PVector.div(pVector0, (-382.39F), pVector0);
      assertEquals((-0.8786631F), pVector0.y, 0.01F);
      assertEquals((-1.0F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F, 0.0F);
      PVector pVector1 = PVector.sub(pVector0, pVector0);
      PVector pVector2 = PVector.div(pVector1, 2470.441F);
      assertEquals("[ 1.0, 1.0, 0.0 ]", pVector0.toString());
      assertNotSame(pVector2, pVector1);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector2.toString());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PVector pVector0 = new PVector((-1889.0F), (-1889.0F));
      PVector pVector1 = PVector.div(pVector0, 0.0F);
      assertEquals("[ -Infinity, -Infinity, NaN ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = PVector.dist(pVector0, pVector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PVector pVector0 = new PVector(2254.2178F, 3527.363F, (-1.0F));
      PVector pVector1 = PVector.div(pVector0, 180.0F);
      float float0 = PVector.dist(pVector1, pVector0);
      assertEquals(4162.886F, float0, 0.01F);
      assertEquals((-0.0055555557F), pVector1.z, 0.01F);
      assertEquals((-1.0F), pVector0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PVector pVector0 = new PVector((-1999.487F), 274.0F, 274.0F);
      PVector pVector1 = PVector.div(pVector0, pVector0);
      float float0 = pVector0.dist(pVector1);
      assertEquals(2037.4019F, float0, 0.01F);
      assertEquals(1.0F, pVector1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PVector pVector0 = new PVector(335.992F, 335.992F);
      pVector0.sub(1.0F, 1.0F, 2338.0F);
      PVector pVector1 = PVector.mult(pVector0, (-6480.0F));
      pVector1.mult((-1.0F));
      pVector0.set(0.0F, (-575.8695F), 0.0F);
      PVector.cross(pVector1, pVector0, pVector1);
      assertEquals((-575.8695F), pVector0.y, 0.01F);
      assertEquals(8.8136612E9F, pVector1.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 0.0F, 0.0F);
      pVector0.setAngleYZ(670.89343F);
      PVector.cross(pVector0, pVector0, pVector0);
      assertEquals(670.89343F, pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ((-915.582F));
      PVector.cross(pVector0, pVector0, pVector0);
      assertEquals((-915.582F), pVector0.getAngleYZ(), 0.01F);
      assertEquals(0.0F, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY(2381.052F);
      PVector.cross(pVector0, pVector0, pVector0);
      assertEquals(2381.052F, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY((-1623.3334F));
      PVector.cross(pVector0, pVector0, pVector0);
      assertEquals((-1623.3334F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PVector pVector0 = new PVector(1534.3591F, 1333.1866F, (-2451.0F));
      PVector pVector1 = PVector.mult(pVector0, pVector0);
      pVector1.cross(pVector0, pVector0);
      assertEquals(1.49877965E10F, pVector0.y, 0.01F);
      assertEquals("[ -1.23653612E10, 1.49877965E10, 4.11515904E8 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PVector pVector0 = new PVector((-24.0F), (-24.0F), 1924.0F);
      PVector pVector1 = new PVector(0, (-24.0F));
      pVector1.cross(pVector0, pVector0);
      assertEquals(-0.0F, pVector0.y, 0.01F);
      assertEquals(46179.594F, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PVector pVector0 = new PVector(180.0F, (-457.0F), (-457.0F));
      pVector0.setAngleYZ(1.0F);
      pVector0.cross(pVector0, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ((-3826.5168F));
      pVector0.cross(pVector0, pVector0);
      assertEquals((-3826.517F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PVector pVector0 = new PVector(3845.7417F, 3845.7417F, 3845.7417F);
      pVector0.setAngleXY(3845.7417F);
      pVector0.cross(pVector0, pVector0);
      assertEquals(3845.7417F, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleXY((-2055.1F));
      pVector0.cross(pVector0, pVector0);
      assertEquals((-2055.1F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PVector pVector0 = new PVector(180.0F, 180.0F, 1.0F);
      PVector pVector1 = PVector.div(pVector0, 0.0F, pVector0);
      pVector1.cross(pVector0);
      assertEquals(Float.POSITIVE_INFINITY, pVector0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PVector pVector0 = new PVector((-0.7458582F), (-0.7458582F), (-0.7458582F));
      PVector pVector1 = new PVector(0.0F, 0.0F, (-0.7458582F));
      PVector pVector2 = pVector0.cross(pVector1);
      assertEquals("[ 0.55630445, -0.55630445, 0.0 ]", pVector2.toString());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.z = 3013.328F;
      float float0 = PVector.angleBetween(pVector0, pVector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PVector pVector0 = new PVector(2254.2178F, 3527.363F, (-1.0F));
      float float0 = PVector.angleBetween(pVector0, pVector0);
      assertEquals("[ 2254.2178, 3527.363, -1.0 ]", pVector0.toString());
      assertEquals(2.1073424E-8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PVector pVector0 = new PVector(180.0F, (-457.0F), (-457.0F));
      pVector0.setAngleYZ(1.0F);
      PVector.add(pVector0, pVector0, pVector0);
      assertEquals((-914.0F), pVector0.z, 0.01F);
      assertEquals((-1.1955829F), pVector0.heading2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleYZ((-2203.9F));
      PVector.add(pVector0, pVector0, pVector0);
      assertEquals((-2203.9F), pVector0.getAngleYZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 3477.1406F);
      pVector0.setAngleXY(850.4333F);
      PVector.add(pVector0, pVector0, pVector0);
      assertEquals(6954.2812F, pVector0.y, 0.01F);
      assertEquals(850.4332F, pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.setAngleXY((-4894.0F));
      PVector.add(pVector0, pVector0, pVector0);
      assertEquals((-4894.0F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.add(pVector0, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
      assertNotSame(pVector1, pVector0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PVector pVector0 = new PVector(310.54F, 0.0F);
      PVector pVector1 = PVector.div(pVector0, pVector0);
      PVector pVector2 = PVector.add(pVector1, pVector0);
      assertEquals(0.0F, pVector0.y, 0.01F);
      assertEquals("[ 311.54, NaN, NaN ]", pVector2.toString());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PVector pVector0 = new PVector(15.892F, 1528.4857F);
      float float0 = PVector.aSinangleBetween(pVector0, pVector0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("[ 15.892, 1528.4857, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PVector pVector0 = new PVector(0.0F, 3477.1406F);
      pVector0.y = (-1877.0804F);
      float float0 = PVector.aSinangleBetween(pVector0, pVector0);
      assertEquals(1877.0804F, pVector0.mag(), 0.01F);
      assertEquals(1.4901161E-8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.sub((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.set((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.set((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.mult((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.mult((PVector) null, 1945.6F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.mult((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.dot((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.dot((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.div((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.div((PVector) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.div((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.dist((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.cross((PVector) null, (PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.cross((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.cross((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.angleBetween((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.add((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.add((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.aSinangleBetween((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.normalize();
      assertEquals(0.0F, pVector0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PVector pVector0 = new PVector(1755.337F, 0.0F);
      PVector pVector1 = pVector0.cross(pVector0, (PVector) null);
      assertEquals("[ 1755.337, 0.0, 0.0 ]", pVector0.toString());
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.sub((PVector) null, (PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.mult((PVector) null, (PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.mult((PVector) null, 0.0F, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.div((PVector) null, (PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.div((PVector) null, 434.69F, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.add((PVector) null, (PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.div(673.14197F);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PVector pVector0 = new PVector((-1110.17F), (-1.0F));
      float float0 = pVector0.mag();
      assertEquals("[ -1110.17, -1.0, 0.0 ]", pVector0.toString());
      assertEquals(1110.1705F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      PVector pVector0 = new PVector((-617.8287F), (-617.8287F), 788.0944F);
      float[] floatArray0 = new float[8];
      pVector0.set(floatArray0);
      assertEquals(0.0F, pVector0.heading2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = new float[0];
      pVector0.set(floatArray0);
      assertEquals(0.0F, pVector0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      PVector pVector0 = new PVector(1286.97F, (-1.0F), (-1.0F));
      PVector pVector1 = pVector0.normalize((PVector) null);
      assertEquals(0.99999994F, pVector1.mag(), 0.01F);
      assertEquals("[ 0.99999934, -7.770184E-4, -7.770184E-4 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      PVector pVector0 = new PVector(1286.97F, (-1.0F), (-1.0F));
      PVector pVector1 = PVector.cross(pVector0, pVector0, pVector0);
      PVector pVector2 = PVector.div(pVector1, pVector1, pVector1);
      pVector2.limit((-2588.015F));
      assertEquals(Float.NaN, pVector0.mag(), 0.01F);
      assertEquals("[ NaN, NaN, NaN ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = pVector0.get((float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      PVector pVector0 = new PVector((-1174.7275F), (-145.56F), (-1174.7275F));
      float[] floatArray0 = new float[9];
      float[] floatArray1 = pVector0.get(floatArray0);
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {(-1174.7275F), (-145.56F), (-1174.7275F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PVector pVector0 = new PVector();
      float[] floatArray0 = new float[0];
      pVector0.array = floatArray0;
      // Undeclared exception!
      try { 
        pVector0.array();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      PVector pVector0 = new PVector(3403.2493F, 3403.2493F);
      PVector pVector1 = pVector0.get();
      assertEquals("[ 3403.2493, 3403.2493, 0.0 ]", pVector1.toString());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        PVector.dist((PVector) null, (PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, pVector0);
      PVector pVector2 = PVector.sub(pVector1, pVector1);
      assertEquals("[ NaN, NaN, NaN ]", pVector2.toString());
      assertNotSame(pVector2, pVector1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = pVector0.getAngleXY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      PVector pVector0 = new PVector(3845.7417F, 3845.7417F, 3845.7417F);
      float float0 = pVector0.dot(pVector0);
      assertEquals(4.4369188E7F, float0, 0.01F);
      assertEquals("[ 3845.7417, 3845.7417, 3845.7417 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      PVector pVector0 = new PVector((-1320.4496F), 226.55F, (-1211.1385F));
      float float0 = pVector0.dot(1928.832F, 180.0F, (-1.0F));
      assertEquals((-2504935.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.setAngleXY((-723.9404F));
      PVector.mult(pVector0, Float.NaN, pVector0);
      assertEquals(Float.NaN, pVector0.mag(), 0.01F);
      assertEquals((-723.9404F), pVector0.getAngleXY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.mult(pVector0, pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
      assertNotSame(pVector1, pVector0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PVector pVector0 = new PVector((-1320.4496F), 226.55F, (-1211.1385F));
      float float0 = pVector0.heading2D();
      assertEquals((-1211.1385F), pVector0.z, 0.01F);
      assertEquals(2.9716766F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PVector pVector0 = new PVector(1286.97F, (-1.0F), (-1.0F));
      PVector pVector1 = PVector.add(pVector0, pVector0);
      assertEquals(2573.9417F, pVector1.mag(), 0.01F);
      assertEquals("[ 1286.97, -1.0, -1.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      PVector pVector0 = new PVector();
      // Undeclared exception!
      try { 
        pVector0.sub((PVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.openni.PVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      PVector pVector0 = new PVector();
      pVector0.set(pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      PVector pVector1 = pVector0.cross(pVector0);
      assertEquals("[ 0.0, 0.0, 0.0 ]", pVector1.toString());
      assertEquals("[ 1.0, 1.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      String string0 = pVector0.toString();
      assertEquals("[ 1.0, 1.0, 0.0 ]", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.mult(pVector0, pVector0, pVector0);
      pVector1.x = 1.0F;
      pVector1.normalize();
      assertEquals(1.0F, pVector1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PVector pVector0 = new PVector(1.0F, 1.0F);
      pVector0.mapYZ((-1.0F), 1.0F, (-471.6087F), (-3495.0F));
      assertEquals("[ 1.0, 1.0, 0.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      PVector pVector0 = new PVector((-1999.487F), 274.0F, 274.0F);
      float float0 = pVector0.dist(pVector0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("[ -1999.487, 274.0, 274.0 ]", pVector0.toString());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PVector pVector0 = new PVector();
      PVector pVector1 = PVector.div(pVector0, 0.0F);
      pVector1.normalize();
      assertEquals("[ NaN, NaN, NaN ]", pVector1.toString());
      assertEquals(0.0F, pVector0.mag(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = PVector.dot(pVector0, pVector0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PVector pVector0 = new PVector();
      float float0 = pVector0.getAngleYZ();
      assertEquals(0.0F, float0, 0.01F);
  }
}
