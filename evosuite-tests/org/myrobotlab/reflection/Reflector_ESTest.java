/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 02:52:47 GMT 2024
 */

package org.myrobotlab.reflection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.reflection.Reflector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Reflector_ESTest extends Reflector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = Reflector.getNewInstance("org.myrobotlab.reflection.Reflector", objectArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Class<Object> class0 = Object.class;
      Object object0 = Reflector.getNewInstance((Class<?>) class0, objectArray0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reflector.getPrimitive((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.reflection.Reflector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Character character0 = Character.valueOf('c');
      Object object0 = Reflector.invokeMethod((Object) character0, "", objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Character character0 = Character.valueOf('^');
      Object[] objectArray0 = new Object[8];
      Object object0 = Reflector.invokeMethod((Object) character0, (String) null, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Character character0 = Character.valueOf('[');
      Object object0 = Reflector.invokeMethod((Object) character0, "org.myrobotlab.reflection.Reflector", objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Character character0 = Reflector.invokeMethod((Object) null, "", objectArray0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = Reflector.getPrimitive(class0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Object object0 = Reflector.getPrimitive(class0);
      assertEquals('\u0000', object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      Class<Character> class0 = Character.class;
      Object object0 = Reflector.getNewInstance((Class<?>) class0, objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = Reflector.getNewInstance((Class<? extends Character>) class0, (Object[]) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = Reflector.getNewInstance("", objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = Reflector.getNewInstance("S<fNJy=EAP", objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Character character0 = Reflector.getNewInstance((String) null, objectArray0);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = Reflector.getNewInstance((Class<?>) null, (Object[]) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Reflector reflector0 = new Reflector();
      boolean boolean0 = Reflector.isPrimitive(reflector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Character> class0 = Character.class;
      boolean boolean0 = Reflector.isPrimitive(class0);
      assertTrue(boolean0);
  }
}
