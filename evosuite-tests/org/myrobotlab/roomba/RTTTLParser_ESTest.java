/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:19:35 GMT 2024
 */

package org.myrobotlab.roomba;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.roomba.Note;
import org.myrobotlab.roomba.RTTTLParser;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RTTTLParser_ESTest extends RTTTLParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Note> arrayList0 = RTTTLParser.parse("p%D:c:,");
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = RTTTLParser.bpmToMillis(2616);
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = RTTTLParser.bpmToMillis((-2281));
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        RTTTLParser.parse("sliD#4Byy:P::B7)GO");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        RTTTLParser.parse("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        RTTTLParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a/laig#yy:P:,c)";
      // Undeclared exception!
      try { 
        RTTTLParser.main(stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No match found
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        RTTTLParser.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        RTTTLParser.bpmToMillis(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Note> arrayList0 = RTTTLParser.parse("sliD#4{y0:m:B7)GO");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = RTTTLParser.bpmToMillis((-1432813312));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Note> arrayList0 = RTTTLParser.parse("l:D#4{y:P:MB7\")O");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RTTTLParser.parse(":>:).u;=Gx3!bhPk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RTTTLParser.parse("VRFgt|2:d:5z}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.roomba.RTTTLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Note> arrayList0 = RTTTLParser.parse("Dk/)KQ:o:5Gj7V");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Note> arrayList0 = RTTTLParser.parse("LD+4{0:B:dz4SV;");
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      RTTTLParser.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RTTTLParser rTTTLParser0 = new RTTTLParser();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "sliD#4{y[0:m:B7GO";
      RTTTLParser.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }
}
