/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 01:13:16 GMT 2024
 */

package org.myrobotlab.serial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.myrobotlab.serial.CRC;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CRC_ESTest extends CRC_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(3576, 3576, 3576, false, false, (-2974L));
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(3576, cRC_Parameters0.getWidth());
      assertEquals((-2974L), cRC_Parameters0.getFinalXor());
      assertEquals(3576L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(3576L, cRC_Parameters0.getInit());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(3576, cRC_Parameters0.getWidth());
      assertEquals((-2974L), cRC_Parameters0.getFinalXor());
      assertEquals(3576L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(3576L, cRC_Parameters0.getInit());
      assertEquals(3576L, cRC0.init());
      
      // Undeclared exception!
      try { 
        cRC0.finalCRC32(3576);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, false, 6);
      assertNotNull(cRC_Parameters0);
      assertEquals(6L, cRC_Parameters0.getInit());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertFalse(cRC_Parameters0.isReflectOut());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(6L, cRC_Parameters0.getInit());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(24L, cRC0.init());
      
      // Undeclared exception!
      try { 
        cRC0.finalCRC16(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters((-1110), (-1110), (-1110), true, false, (-1110));
      assertNotNull(cRC_Parameters0);
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-1110), cRC_Parameters0.getWidth());
      assertEquals((-1110L), cRC_Parameters0.getFinalXor());
      assertEquals((-1110L), cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals((-1110L), cRC_Parameters0.getPolynomial());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-1110), cRC_Parameters0.getWidth());
      assertEquals((-1110L), cRC_Parameters0.getFinalXor());
      assertEquals((-1110L), cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals((-1110L), cRC_Parameters0.getPolynomial());
      assertEquals((-1110L), cRC0.init());
      
      // Undeclared exception!
      try { 
        cRC0.finalCRC8(65543L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getInit());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      long long0 = cRC0.update((-1163L), byteArray0);
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      assertEquals((-1348129366902986L), long0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[2];
      long long0 = cRC0.update((long) (byte) (-1), byteArray0, 2139127680, (-2989));
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      assertEquals((-1L), long0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, false, 6);
      assertNotNull(cRC_Parameters0);
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertEquals(6L, cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertTrue(cRC_Parameters0.isReflectIn());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertEquals(6L, cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(24L, cRC0.init());
      
      byte[] byteArray0 = new byte[6];
      long long0 = cRC0.update((-1183L), byteArray0);
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertEquals(6L, cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(24L, cRC0.init());
      assertEquals(65535L, long0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC16;
      assertNotNull(cRC_Parameters0);
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      long long0 = cRC0.update(1790L, byteArray0);
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      assertEquals(24658L, long0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters((-28), (-28), (-28), true, true, (-28));
      assertNotNull(cRC_Parameters0);
      assertEquals((-28L), cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals((-28L), cRC_Parameters0.getFinalXor());
      assertEquals((-28L), cRC_Parameters0.getInit());
      assertEquals((-28), cRC_Parameters0.getWidth());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      long long0 = CRC.calculateCRC(cRC_Parameters0, byteArray0);
      assertEquals((-28L), cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals((-28L), cRC_Parameters0.getFinalXor());
      assertEquals((-28L), cRC_Parameters0.getInit());
      assertEquals((-28), cRC_Parameters0.getWidth());
      assertEquals(68426678244L, long0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-64), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(2491, (-2941L), 1269L, false, true, (-2608L));
      assertNotNull(cRC_Parameters0);
      assertEquals((-2608L), cRC_Parameters0.getFinalXor());
      assertEquals((-2941L), cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(2491, cRC_Parameters0.getWidth());
      assertEquals(1269L, cRC_Parameters0.getInit());
      assertFalse(cRC_Parameters0.isReflectIn());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[0];
      long long0 = cRC0.update(549755813888L, byteArray0, 256, (int) (short)0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      assertEquals(549755813888L, long0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(1235, 0L, 0L, false, false, 0L);
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(1235, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(1235, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[6];
      long long0 = cRC0.update(0L, byteArray0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(1235, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      assertEquals(0L, long0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      
      long long0 = cRC0.init();
      assertFalse(cRC_Parameters0.isReflectOut());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters((-28), (-28), (-28), true, true, (-28));
      assertNotNull(cRC_Parameters0);
      assertEquals((-28L), cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals((-28L), cRC_Parameters0.getInit());
      assertEquals((-28), cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-28L), cRC_Parameters0.getPolynomial());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals((-28L), cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals((-28L), cRC_Parameters0.getInit());
      assertEquals((-28), cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-28L), cRC_Parameters0.getPolynomial());
      assertEquals((-28L), cRC0.init());
      
      long long0 = cRC0.init();
      assertEquals((-28L), cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals((-28L), cRC_Parameters0.getInit());
      assertEquals((-28), cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-28L), cRC_Parameters0.getPolynomial());
      assertEquals((-28L), cRC0.init());
      assertEquals((-28L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      
      short short0 = cRC0.finalCRC16(549755813888L);
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC16;
      assertNotNull(cRC_Parameters0);
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      
      short short0 = cRC0.finalCRC16((-2335L));
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      assertEquals((short) (-2335), short0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(0, 0, 0, true, false, 0);
      assertNotNull(cRC_Parameters0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      
      long long0 = cRC0.finalCRC(0);
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(2146435583, 2146435583, 2146435583, false, false, (-611L));
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(2146435583L, cRC_Parameters0.getInit());
      assertEquals(2146435583, cRC_Parameters0.getWidth());
      assertEquals(2146435583L, cRC_Parameters0.getPolynomial());
      assertEquals((-611L), cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(2146435583L, cRC_Parameters0.getInit());
      assertEquals(2146435583, cRC_Parameters0.getWidth());
      assertEquals(2146435583L, cRC_Parameters0.getPolynomial());
      assertEquals((-611L), cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(2146435583L, cRC0.init());
      
      long long0 = cRC0.finalCRC(2146435583);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(2146435583L, cRC_Parameters0.getInit());
      assertEquals(2146435583, cRC_Parameters0.getWidth());
      assertEquals(2146435583L, cRC_Parameters0.getPolynomial());
      assertEquals((-611L), cRC_Parameters0.getFinalXor());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(2146435583L, cRC0.init());
      assertEquals((-2146435998L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CCITT;
      assertNotNull(cRC_Parameters0);
      assertEquals(65535L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(65535L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(65535L, cRC0.init());
      
      byte[] byteArray0 = new byte[6];
      long long0 = cRC0.calculateCRC(byteArray0);
      assertEquals(65535L, cRC_Parameters0.getInit());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(65535L, cRC0.init());
      assertEquals(3600L, long0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CCITT;
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(65535L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertEquals(65535L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(65535L, cRC0.init());
      
      // Undeclared exception!
      try { 
        cRC0.update((long) 6, (byte[]) null, 1721, 1721);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      assertNotNull(cRC_Parameters0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertFalse(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(4129L, cRC_Parameters0.getPolynomial());
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(0L, cRC0.init());
      
      // Undeclared exception!
      try { 
        cRC0.update(4129L, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC16;
      assertNotNull(cRC_Parameters0);
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(32773L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      
      // Undeclared exception!
      try { 
        CRC.calculateCRC(cRC_Parameters0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC64ISO;
      assertNotNull(cRC_Parameters0);
      assertEquals((-1L), cRC_Parameters0.getInit());
      assertEquals(27L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals((-1L), cRC_Parameters0.getFinalXor());
      assertEquals(64, cRC_Parameters0.getWidth());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRC cRC0 = null;
      try {
        cRC0 = new CRC((CRC.Parameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.serial.CRC$Parameters", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM2;
      assertNotNull(cRC_Parameters0);
      assertEquals(16, cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(16, cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      
      long long0 = cRC0.finalCRC(2146435583);
      assertEquals(16, cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      assertEquals(0L, cRC0.init());
      assertEquals(511L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM2;
      assertNotNull(cRC_Parameters0);
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertNotNull(cRC0);
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      
      byte[] byteArray0 = new byte[4];
      long long0 = cRC0.update((-9223372036854775808L), byteArray0, 1, (-2589));
      assertEquals(16, cRC_Parameters0.getWidth());
      assertEquals(0L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(33800L, cRC_Parameters0.getPolynomial());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(0L, cRC_Parameters0.getFinalXor());
      assertEquals(0L, cRC0.init());
      assertEquals((-9223372036854775808L), long0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC16;
      CRC cRC0 = new CRC(cRC_Parameters0);
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        cRC0.update((long) (byte)82, byteArray0, (int) (byte)82, (int) (byte)82);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 82 out of bounds for length 1
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      byte[] byteArray0 = new byte[8];
      long long0 = CRC.calculateCRC(cRC_Parameters0, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, true, 6);
      CRC.Parameters cRC_Parameters1 = new CRC.Parameters(cRC_Parameters0);
      assertEquals(6L, cRC_Parameters1.getPolynomial());
      assertEquals(6L, cRC_Parameters1.getInit());
      assertEquals(6, cRC_Parameters1.getWidth());
      assertTrue(cRC_Parameters1.isReflectIn());
      assertTrue(cRC_Parameters1.isReflectOut());
      assertEquals(6L, cRC_Parameters1.getFinalXor());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, true, 6);
      CRC cRC0 = new CRC(cRC_Parameters0);
      long long0 = cRC0.init();
      assertEquals(24L, long0);
      assertEquals(6L, cRC_Parameters0.getFinalXor());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM2;
      CRC cRC0 = new CRC(cRC_Parameters0);
      // Undeclared exception!
      try { 
        cRC0.finalCRC32(0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CCITT;
      CRC cRC0 = new CRC(cRC_Parameters0);
      short short0 = cRC0.finalCRC16(6);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CCITT;
      CRC cRC0 = new CRC(cRC_Parameters0);
      // Undeclared exception!
      try { 
        cRC0.finalCRC8(3600L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(8, 8, 8, false, false, 8);
      CRC cRC0 = new CRC(cRC_Parameters0);
      assertEquals(8, cRC_Parameters0.getWidth());
      
      byte byte0 = cRC0.finalCRC8(512L);
      assertEquals(8L, cRC_Parameters0.getFinalXor());
      assertEquals((byte)8, byte0);
      assertFalse(cRC_Parameters0.isReflectOut());
      assertEquals(8L, cRC_Parameters0.getInit());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(2146435583, 2146435583, 2146435583, false, false, (-611L));
      CRC cRC0 = new CRC(cRC_Parameters0);
      // Undeclared exception!
      try { 
        cRC0.finalCRC16(751L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // CRC width mismatch
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, false, 6);
      CRC cRC0 = new CRC(cRC_Parameters0);
      long long0 = cRC0.finalCRC(6);
      assertEquals(24L, cRC0.init());
      assertEquals(30L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM2;
      CRC cRC0 = new CRC(cRC_Parameters0);
      byte[] byteArray0 = new byte[6];
      long long0 = cRC0.calculateCRC(byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, true, 6);
      long long0 = cRC_Parameters0.getInit();
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6, cRC_Parameters0.getWidth());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM;
      boolean boolean0 = cRC_Parameters0.isReflectOut();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, true, 6);
      boolean boolean0 = cRC_Parameters0.isReflectIn();
      assertEquals(6, cRC_Parameters0.getWidth());
      assertEquals(6L, cRC_Parameters0.getInit());
      assertTrue(boolean0);
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = new CRC.Parameters(6, 6, 6, true, true, 6);
      int int0 = cRC_Parameters0.getWidth();
      assertTrue(cRC_Parameters0.isReflectIn());
      assertEquals(6, int0);
      assertEquals(6L, cRC_Parameters0.getInit());
      assertTrue(cRC_Parameters0.isReflectOut());
      assertEquals(6L, cRC_Parameters0.getPolynomial());
      assertEquals(6L, cRC_Parameters0.getFinalXor());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CCITT;
      long long0 = cRC_Parameters0.getPolynomial();
      assertEquals(4129L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.CRC64ECMA;
      long long0 = cRC_Parameters0.getFinalXor();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRC.Parameters cRC_Parameters0 = CRC.Parameters.XMODEM2;
      CRC cRC0 = new CRC(cRC_Parameters0);
      // Undeclared exception!
      try { 
        cRC0.calculateCRC((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.myrobotlab.serial.CRC", e);
      }
  }
}
