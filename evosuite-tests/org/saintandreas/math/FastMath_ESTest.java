/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:46:22 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.FastMath;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf((-5.96046E-8F));
      assertEquals((short) (-9217), short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(5.96046E-8F);
      assertEquals((short)23551, short0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(65504.0F);
      assertEquals((short)31743, short0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = FastMath.copysign(0.0F, 1.0F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = FastMath.copysign(Float.NaN, (short)0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = FastMath.normalize(8.742278E-8F, 0.33333334F, (short)26774);
      assertEquals(26773.666F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = FastMath.normalize((-2328.8F), (-2328.8F), (-2328.8F));
      assertEquals((-2328.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = FastMath.nextRandomInt();
      assertEquals(0, int0);
      
      int int1 = FastMath.nextRandomInt((-2126), 0);
      assertEquals((-1914), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      
      Vector2f vector2f1 = vector2f0.add((-697.4F));
      assertNotNull(vector2f1);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals((-697.4F), vector2f1.x, 0.01F);
      assertEquals((-697.4F), vector2f1.y, 0.01F);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals((-697.4F), vector2f1.getY(), 0.01F);
      assertEquals("(-697.4, -697.4)", vector2f1.toString());
      assertEquals((-697.4F), vector2f1.getX(), 0.01F);
      assertEquals((-2.3561945F), vector2f1.getAngle(), 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      Vector2f vector2f2 = new Vector2f((-3.5868964E7F), (-3.5761204E7F));
      assertNotNull(vector2f2);
      assertEquals((-3.5868964E7F), vector2f2.x, 0.01F);
      assertEquals((-3.5761204E7F), vector2f2.y, 0.01F);
      assertEquals("(-3.5868964E7, -3.5761204E7)", vector2f2.toString());
      assertEquals((-3.5761204E7F), vector2f2.getY(), 0.01F);
      assertEquals((-3.5868964E7F), vector2f2.getX(), 0.01F);
      assertEquals((-2.357699F), vector2f2.getAngle(), 0.01F);
      assertFalse(vector2f2.equals((Object)vector2f0));
      assertFalse(vector2f2.equals((Object)vector2f1));
      
      int int0 = FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f1, vector2f2);
      assertEquals(0, int0);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals((-697.4F), vector2f1.x, 0.01F);
      assertEquals((-697.4F), vector2f1.y, 0.01F);
      assertEquals((-3.5868964E7F), vector2f2.x, 0.01F);
      assertEquals((-3.5761204E7F), vector2f2.y, 0.01F);
      assertNotSame(vector2f0, vector2f2);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertNotSame(vector2f1, vector2f2);
      assertNotSame(vector2f2, vector2f0);
      assertNotSame(vector2f2, vector2f1);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals((-697.4F), vector2f1.getY(), 0.01F);
      assertEquals("(-697.4, -697.4)", vector2f1.toString());
      assertEquals((-697.4F), vector2f1.getX(), 0.01F);
      assertEquals((-2.3561945F), vector2f1.getAngle(), 0.01F);
      assertEquals("(-3.5868964E7, -3.5761204E7)", vector2f2.toString());
      assertEquals((-3.5761204E7F), vector2f2.getY(), 0.01F);
      assertEquals((-3.5868964E7F), vector2f2.getX(), 0.01F);
      assertEquals((-2.357699F), vector2f2.getAngle(), 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f2));
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(vector2f1.equals((Object)vector2f2));
      assertFalse(vector2f2.equals((Object)vector2f0));
      assertFalse(vector2f2.equals((Object)vector2f1));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(Float.POSITIVE_INFINITY);
      assertNotNull(vector2f0);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.x, 0.01F);
      assertEquals("(Infinity, Infinity)", vector2f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      
      int int0 = FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f0, vector2f0);
      assertEquals(1, int0);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.x, 0.01F);
      assertEquals("(Infinity, Infinity)", vector2f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector2f0.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = FastMath.fastInvSqrt((-343.5961F));
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float float0 = FastMath.cos2((short)0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float float0 = FastMath.sin2(3.1415927F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = FastMath.asin((-1.0F));
      assertEquals((-1.5707964F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = FastMath.acos((-269.64725F));
      assertEquals(3.1415927F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      
      float float0 = FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, -0.0F);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(Float.NaN, (-821.9809F));
      assertNotNull(vector2f0);
      assertEquals((-821.9809F), vector2f0.y, 0.01F);
      assertEquals(Float.NaN, vector2f0.x, 0.01F);
      assertEquals(Float.NaN, vector2f0.getX(), 0.01F);
      assertEquals((-821.9809F), vector2f0.getY(), 0.01F);
      assertEquals("(NaN, -821.9809)", vector2f0.toString());
      assertEquals(Float.NaN, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      assertNotNull(vector3f0);
      assertEquals((-821.9809F), vector2f0.y, 0.01F);
      assertEquals(Float.NaN, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector2f0.getX(), 0.01F);
      assertEquals((-821.9809F), vector2f0.getY(), 0.01F);
      assertEquals("(NaN, -821.9809)", vector2f0.toString());
      assertEquals(Float.NaN, vector2f0.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0, NaN)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = vector3f0.interpolate(vector3f0, Float.NaN);
      assertNotNull(vector3f1);
      assertEquals((-821.9809F), vector2f0.y, 0.01F);
      assertEquals(Float.NaN, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(Float.NaN, vector2f0.getX(), 0.01F);
      assertEquals((-821.9809F), vector2f0.getY(), 0.01F);
      assertEquals("(NaN, -821.9809)", vector2f0.toString());
      assertEquals(Float.NaN, vector2f0.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0, NaN)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals("(0.0, 0.0, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.computeNormal(vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = FastMath.interpolateLinear(0.0F, vector3f1, vector3f0);
      assertNotNull(vector3f2);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f2.x, 0.01F);
      assertEquals(Float.NaN, vector3f2.z, 0.01F);
      assertEquals(Float.NaN, vector3f2.y, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f2.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f2.getZ(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f2.toString());
      assertEquals(Float.NaN, vector3f2.getX(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f0));
      assertTrue(vector3f2.equals((Object)vector3f1));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = FastMath.isPowerOfTwo(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float float0 = FastMath.tan(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = FastMath.tan(3.1415927F);
      assertEquals(8.742278E-8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = FastMath.sqrt(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = FastMath.sqrt(747.9913F);
      assertEquals(27.349428F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = FastMath.sqr(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(1.5F, (short)0, (-283.28595F));
      assertNotNull(vector3f0);
      assertEquals(1.5F, vector3f0.x, 0.01F);
      assertEquals((-283.28595F), vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-283.28595F), vector3f0.getZ(), 0.01F);
      assertEquals("(1.5, 0.0, -283.28595)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.5F, vector3f0.getX(), 0.01F);
      
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(1.5F, vector3f0.x, 0.01F);
      assertEquals((-283.28595F), vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-0.77456045F), vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(1.2845452F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals((-283.28595F), vector3f0.getZ(), 0.01F);
      assertEquals("(1.5, 0.0, -283.28595)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.5F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(1.2845452F, vector3f1.getX(), 0.01F);
      assertEquals((-0.77456045F), vector3f1.getZ(), 0.01F);
      assertEquals("(1.2845452, 0.0, -0.77456045)", vector3f1.toString());
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(956.1199F, (short)25899);
      assertNotNull(vector2f0);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0, 0.59790325F);
      assertNotNull(vector3f0);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(25899.0F, vector3f0.y, 0.01F);
      assertEquals(0.59790325F, vector3f0.z, 0.01F);
      assertEquals(956.1199F, vector3f0.x, 0.01F);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      assertEquals(0.59790325F, vector3f0.getZ(), 0.01F);
      assertEquals(956.1199F, vector3f0.getX(), 0.01F);
      assertEquals("(956.1199, 25899.0, 0.59790325)", vector3f0.toString());
      assertEquals(25899.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(25899.0F, vector3f0.y, 0.01F);
      assertEquals(0.59790325F, vector3f0.z, 0.01F);
      assertEquals(956.1199F, vector3f0.x, 0.01F);
      assertEquals((-225.84969F), vector3f1.y, 0.01F);
      assertEquals(538.21014F, vector3f1.z, 0.01F);
      assertEquals(757.28925F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      assertEquals(0.59790325F, vector3f0.getZ(), 0.01F);
      assertEquals(956.1199F, vector3f0.getX(), 0.01F);
      assertEquals("(956.1199, 25899.0, 0.59790325)", vector3f0.toString());
      assertEquals(25899.0F, vector3f0.getY(), 0.01F);
      assertEquals("(757.28925, -225.84969, 538.21014)", vector3f1.toString());
      assertEquals(757.28925F, vector3f1.getX(), 0.01F);
      assertEquals(538.21014F, vector3f1.getZ(), 0.01F);
      assertEquals((-225.84969F), vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(5.96046E-8F, 1.5707964F, 5.96046E-8F);
      assertNotNull(vector3f0);
      assertEquals(5.96046E-8F, vector3f0.z, 0.01F);
      assertEquals(1.5707964F, vector3f0.y, 0.01F);
      assertEquals(5.96046E-8F, vector3f0.x, 0.01F);
      assertEquals(5.96046E-8F, vector3f0.getX(), 0.01F);
      assertEquals(5.96046E-8F, vector3f0.getZ(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getY(), 0.01F);
      assertEquals("(5.96046E-8, 1.5707964, 5.96046E-8)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(5.96046E-8F, vector3f0.z, 0.01F);
      assertEquals(1.5707964F, vector3f0.y, 0.01F);
      assertEquals(5.96046E-8F, vector3f0.x, 0.01F);
      assertEquals(5.96046E-8F, vector3f1.y, 0.01F);
      assertEquals(3.5527082E-15F, vector3f1.z, 0.01F);
      assertEquals((-2.6053997E-15F), vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(5.96046E-8F, vector3f0.getX(), 0.01F);
      assertEquals(5.96046E-8F, vector3f0.getZ(), 0.01F);
      assertEquals(1.5707964F, vector3f0.getY(), 0.01F);
      assertEquals("(5.96046E-8, 1.5707964, 5.96046E-8)", vector3f0.toString());
      assertEquals(5.96046E-8F, vector3f1.getY(), 0.01F);
      assertEquals(3.5527082E-15F, vector3f1.getZ(), 0.01F);
      assertEquals("(-2.6053997E-15, 5.96046E-8, 3.5527082E-15)", vector3f1.toString());
      assertEquals((-2.6053997E-15F), vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = FastMath.sin2(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = FastMath.sin(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float float0 = FastMath.sin(1.0F);
      assertEquals(0.84147096F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = FastMath.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float float0 = FastMath.sign((-739.4783F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float float0 = FastMath.reduceSinAngle(2669.0F);
      assertEquals((-1.3538299F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = FastMath.pow(0.0F, 301.6376F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = FastMath.pow(1.1920929E-7F, 1.1920929E-7F);
      assertEquals(0.9999981F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = FastMath.nextRandomInt(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = FastMath.nearestPowerOfTwo(1597463174);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = FastMath.log((float) 1, 1.0E-4F);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = FastMath.log(655.47974F, 655.47974F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = FastMath.log(1.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = FastMath.log(0.0F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon(0.0F, 0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon(0.0F, 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon(Float.NaN, 0.0F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = FastMath.invSqrt(Float.POSITIVE_INFINITY);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = FastMath.invSqrt(2367.427F);
      assertEquals(0.02055236F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = FastMath.invSqrt(-0.0F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-539.32F), 823.13446F);
      assertNotNull(vector2f0);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertNotNull(vector3f0);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals((-539.32F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(823.13446F, vector3f0.y, 0.01F);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      assertEquals((-539.32F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(823.13446F, vector3f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446, 0.0)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.interpolateLinear(0.5F, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals((-539.32F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(823.13446F, vector3f0.y, 0.01F);
      assertEquals(823.13446F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals((-539.32F), vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      assertEquals((-539.32F), vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(823.13446F, vector3f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals((-539.32F), vector3f1.getX(), 0.01F);
      assertEquals("(-539.32, 823.13446, 0.0)", vector3f1.toString());
      assertEquals(823.13446F, vector3f1.getY(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateLinear((-1018.6091F), vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateLinear(Float.NEGATIVE_INFINITY, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.z, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.y, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f0.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity)", vector3f1.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.getY(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, vector3f1.getX(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = FastMath.interpolateLinear(1.0F, 0.5F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateCatmullRom(1939.0F, 1939.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(956.1199F, (short)25899);
      assertNotNull(vector2f0);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      
      Vector3f vector3f0 = new Vector3f(vector2f0, 0.59790325F);
      assertNotNull(vector3f0);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(0.59790325F, vector3f0.z, 0.01F);
      assertEquals(956.1199F, vector3f0.x, 0.01F);
      assertEquals(25899.0F, vector3f0.y, 0.01F);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      assertEquals("(956.1199, 25899.0, 0.59790325)", vector3f0.toString());
      assertEquals(0.59790325F, vector3f0.getZ(), 0.01F);
      assertEquals(25899.0F, vector3f0.getY(), 0.01F);
      assertEquals(956.1199F, vector3f0.getX(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateCatmullRom((-2232.1255F), (-2.0F), vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(956.1199F, vector2f0.x, 0.01F);
      assertEquals(25899.0F, vector2f0.y, 0.01F);
      assertEquals(0.59790325F, vector3f0.z, 0.01F);
      assertEquals(956.1199F, vector3f0.x, 0.01F);
      assertEquals(25899.0F, vector3f0.y, 0.01F);
      assertEquals(0.59790325F, vector3f1.z, 0.01F);
      assertEquals(25899.0F, vector3f1.y, 0.01F);
      assertEquals((-1476.6848F), vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(25899.0F, vector2f0.getY(), 0.01F);
      assertEquals(956.1199F, vector2f0.getX(), 0.01F);
      assertEquals(1.5338959F, vector2f0.getAngle(), 0.01F);
      assertEquals("(956.1199, 25899.0)", vector2f0.toString());
      assertEquals("(956.1199, 25899.0, 0.59790325)", vector3f0.toString());
      assertEquals(0.59790325F, vector3f0.getZ(), 0.01F);
      assertEquals(25899.0F, vector3f0.getY(), 0.01F);
      assertEquals(956.1199F, vector3f0.getX(), 0.01F);
      assertEquals((-1476.6848F), vector3f1.getX(), 0.01F);
      assertEquals(0.59790325F, vector3f1.getZ(), 0.01F);
      assertEquals(25899.0F, vector3f1.getY(), 0.01F);
      assertEquals("(-1476.6848, 25899.0, 0.59790325)", vector3f1.toString());
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = FastMath.interpolateCatmullRom((-2547.3F), (-2886.6497F), (-2089.4846F), (-2886.6497F), (-1678.2F), (float) (-2963));
      assertEquals(1.60345893E16F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = FastMath.interpolateCatmullRom(0.06F, (-1.5707964F), 0.9599996F, 1.0F, 823.6F, 799.0F);
      assertEquals((-54.736725F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, 1.5707964F, (-1897.0F));
      assertNotNull(vector3f0);
      assertEquals(1.5707964F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1897.0F), vector3f0.z, 0.01F);
      assertEquals(1.5707964F, vector3f0.getY(), 0.01F);
      assertEquals("(0.0, 1.5707964, -1897.0)", vector3f0.toString());
      assertEquals((-1897.0F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateBezier(1.5707964F, vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(1.5707964F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1897.0F), vector3f0.z, 0.01F);
      assertEquals((-1897.0F), vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(1.5707965F, vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.5707964F, vector3f0.getY(), 0.01F);
      assertEquals("(0.0, 1.5707964, -1897.0)", vector3f0.toString());
      assertEquals((-1897.0F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.5707965F, vector3f1.getY(), 0.01F);
      assertEquals((-1897.0F), vector3f1.getZ(), 0.01F);
      assertEquals("(0.0, 1.5707965, -1897.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateBezier((-720.113F), vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(32.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(32.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 32.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      
      Vector2f vector2f0 = Vector2f.UNIT_X;
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f1 = new Vector3f(vector2f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = FastMath.interpolateBezier(0.7599998F, vector3f1, vector3f1, vector3f0, vector3f0);
      assertNotNull(vector3f2);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals(0.0F, vector3f2.z, 0.01F);
      assertEquals(0.14515221F, vector3f2.x, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f2.getY(), 0.01F);
      assertEquals(0.14515221F, vector3f2.getX(), 0.01F);
      assertEquals(0.0F, vector3f2.getZ(), 0.01F);
      assertEquals("(0.14515221, 0.0, 0.0)", vector3f2.toString());
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(1.0, 1.0, 1.0)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.interpolateBezier(2709.0F, vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-2048.0F), vector3f1.x, 0.01F);
      assertEquals((-2048.0F), vector3f1.y, 0.01F);
      assertEquals((-2048.0F), vector3f1.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(1.0, 1.0, 1.0)", vector3f0.toString());
      assertEquals((-2048.0F), vector3f1.getZ(), 0.01F);
      assertEquals((-2048.0F), vector3f1.getY(), 0.01F);
      assertEquals((-2048.0F), vector3f1.getX(), 0.01F);
      assertEquals("(-2048.0, -2048.0, -2048.0)", vector3f1.toString());
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = FastMath.sphericalToCartesian(vector3f1);
      assertNotNull(vector3f2);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals((-2048.0F), vector3f1.x, 0.01F);
      assertEquals((-2048.0F), vector3f1.y, 0.01F);
      assertEquals((-2048.0F), vector3f1.z, 0.01F);
      assertEquals((-1847.2864F), vector3f2.x, 0.01F);
      assertEquals((-608.9134F), vector3f2.z, 0.01F);
      assertEquals((-641.14075F), vector3f2.y, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(1.0, 1.0, 1.0)", vector3f0.toString());
      assertEquals((-2048.0F), vector3f1.getZ(), 0.01F);
      assertEquals((-2048.0F), vector3f1.getY(), 0.01F);
      assertEquals((-2048.0F), vector3f1.getX(), 0.01F);
      assertEquals("(-2048.0, -2048.0, -2048.0)", vector3f1.toString());
      assertEquals((-641.14075F), vector3f2.getY(), 0.01F);
      assertEquals((-608.9134F), vector3f2.getZ(), 0.01F);
      assertEquals((-1847.2864F), vector3f2.getX(), 0.01F);
      assertEquals("(-1847.2864, -641.14075, -608.9134)", vector3f2.toString());
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = FastMath.interpolateBezier(0.0F, 0.0F, (-2653.4F), (-368.396F), (-1873.8767F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = FastMath.interpolateBezier(0.8999997F, 0.8999997F, 0.8999997F, 0.56F, 0.8999997F);
      assertEquals(0.8173795F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      
      float float0 = FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-539.32F), 823.13446F);
      assertNotNull(vector2f0);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertNotNull(vector3f0);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals(823.13446F, vector3f0.y, 0.01F);
      assertEquals((-539.32F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      assertEquals(823.13446F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(-539.32, 823.13446, 0.0)", vector3f0.toString());
      assertEquals((-539.32F), vector3f0.getX(), 0.01F);
      
      float float0 = FastMath.getBezierP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0);
      assertEquals(0.003681225F, float0, 0.01F);
      assertEquals((-539.32F), vector2f0.x, 0.01F);
      assertEquals(823.13446F, vector2f0.y, 0.01F);
      assertEquals(823.13446F, vector3f0.y, 0.01F);
      assertEquals((-539.32F), vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(823.13446F, vector2f0.getY(), 0.01F);
      assertEquals("(-539.32, 823.13446)", vector2f0.toString());
      assertEquals((-539.32F), vector2f0.getX(), 0.01F);
      assertEquals(2.1508203F, vector2f0.getAngle(), 0.01F);
      assertEquals(823.13446F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals("(-539.32, 823.13446, 0.0)", vector3f0.toString());
      assertEquals((-539.32F), vector3f0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = FastMath.floor(1.0E-4F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = FastMath.floor(420.44205F);
      assertEquals(420.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = FastMath.fastInvSqrt(0.6399999F);
      assertEquals(1.2478131F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.extrapolateLinear(1.0F, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.extrapolateLinear((-720.113F), vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(1.0F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f1.toString());
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      assertNotNull(vector2f0);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.0)", vector2f0.toString());
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0, 829.846F);
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(829.846F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.0)", vector2f0.toString());
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(829.846F, vector3f0.getZ(), 0.01F);
      assertEquals("(0.0, 1.0, 829.846)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.extrapolateLinear(4.534718F, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(829.846F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(829.84595F, vector3f1.z, 0.01F);
      assertEquals(0.0F, vector3f1.x, 0.01F);
      assertEquals(1.0F, vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.0)", vector2f0.toString());
      assertEquals(1.5707964F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector3f0.getY(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(829.846F, vector3f0.getZ(), 0.01F);
      assertEquals("(0.0, 1.0, 829.846)", vector3f0.toString());
      assertEquals("(0.0, 1.0, 829.84595)", vector3f1.toString());
      assertEquals(829.84595F, vector3f1.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getX(), 0.01F);
      assertEquals(1.0F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.extrapolateLinear(Float.POSITIVE_INFINITY, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-4546.0F));
      assertNotNull(vector3f0);
      assertEquals((-4546.0F), vector3f0.x, 0.01F);
      assertEquals((-4546.0F), vector3f0.y, 0.01F);
      assertEquals((-4546.0F), vector3f0.z, 0.01F);
      assertEquals((-4546.0F), vector3f0.getX(), 0.01F);
      assertEquals((-4546.0F), vector3f0.getY(), 0.01F);
      assertEquals((-4546.0F), vector3f0.getZ(), 0.01F);
      assertEquals("(-4546.0, -4546.0, -4546.0)", vector3f0.toString());
      
      Vector3f vector3f1 = FastMath.extrapolateLinear((-895.11F), vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals((-4546.0F), vector3f0.x, 0.01F);
      assertEquals((-4546.0F), vector3f0.y, 0.01F);
      assertEquals((-4546.0F), vector3f0.z, 0.01F);
      assertEquals((-4546.0F), vector3f1.x, 0.01F);
      assertEquals((-4546.0F), vector3f1.z, 0.01F);
      assertEquals((-4546.0F), vector3f1.y, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals((-4546.0F), vector3f0.getX(), 0.01F);
      assertEquals((-4546.0F), vector3f0.getY(), 0.01F);
      assertEquals((-4546.0F), vector3f0.getZ(), 0.01F);
      assertEquals("(-4546.0, -4546.0, -4546.0)", vector3f0.toString());
      assertEquals((-4546.0F), vector3f1.getX(), 0.01F);
      assertEquals((-4546.0F), vector3f1.getY(), 0.01F);
      assertEquals((-4546.0F), vector3f1.getZ(), 0.01F);
      assertEquals("(-4546.0, -4546.0, -4546.0)", vector3f1.toString());
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = FastMath.extrapolateLinear(0.0F, 0.0F, (-368.396F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = FastMath.extrapolateLinear(57.295776F, (-259.711F), 1280.9832F);
      assertEquals(88015.555F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = FastMath.exp((-1338.7F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = FastMath.determinant(0.0, 0.0F, 0.0, 736.0, 0.0F, 0.0F, 0.0F, 0.0, 736.0, 0.0F, 961.0, (-1111.2687013022), 0.0F, (-1806.32108585), (-2338.1837386), (-1806.32108585));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = FastMath.determinant(1922.4167306, 0.0F, 0.0, (-2210.299), 0.0, (-1237.7798821251306), 0.0F, 1470.62963504, 9.999999747378752E-5, 1526.1446565158135, 1.0F, 2261.8949518567, (-2210.299), 1.0F, 0.499, 0.0F);
      assertEquals(1.08830044E10F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = FastMath.cos2((-1.5707964F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = FastMath.cos2(2208.09F);
      assertEquals((-0.90061885F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = FastMath.cos(2208.09F);
      assertEquals((-0.9006438F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = FastMath.copysign(0.0F, (-599.50977F));
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = FastMath.convertHalfToFloat((short) (-895));
      assertEquals((-73792.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = Vector3f.UNIT_X;
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = vector3f1.max(vector3f0);
      assertNotNull(vector3f2);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals(1.0F, vector3f2.z, 0.01F);
      assertEquals(1.0F, vector3f2.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f2.getZ(), 0.01F);
      assertEquals(1.0F, vector3f2.getX(), 0.01F);
      assertEquals("(1.0, 0.0, 1.0)", vector3f2.toString());
      assertEquals(0.0F, vector3f2.getY(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
      
      Vector3f vector3f3 = FastMath.computeNormal(vector3f0, vector3f2, vector3f1);
      assertNotNull(vector3f3);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(1.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f2.y, 0.01F);
      assertEquals(1.0F, vector3f2.z, 0.01F);
      assertEquals(1.0F, vector3f2.x, 0.01F);
      assertEquals(0.0F, vector3f3.z, 0.01F);
      assertEquals(1.0F, vector3f3.y, 0.01F);
      assertEquals(0.0F, vector3f3.x, 0.01F);
      assertNotSame(vector3f0, vector3f3);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f1, vector3f3);
      assertNotSame(vector3f2, vector3f3);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertNotSame(vector3f3, vector3f2);
      assertNotSame(vector3f3, vector3f0);
      assertNotSame(vector3f3, vector3f1);
      assertEquals("(0.0, 0.0, 1.0)", vector3f0.toString());
      assertEquals(1.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f2.getZ(), 0.01F);
      assertEquals(1.0F, vector3f2.getX(), 0.01F);
      assertEquals("(1.0, 0.0, 1.0)", vector3f2.toString());
      assertEquals(0.0F, vector3f2.getY(), 0.01F);
      assertEquals(0.0F, vector3f3.getZ(), 0.01F);
      assertEquals("(0.0, 1.0, 0.0)", vector3f3.toString());
      assertEquals(0.0F, vector3f3.getX(), 0.01F);
      assertEquals(1.0F, vector3f3.getY(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f0.equals((Object)vector3f2));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f1.equals((Object)vector3f2));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
      assertFalse(vector3f3.equals((Object)vector3f2));
      assertFalse(vector3f3.equals((Object)vector3f0));
      assertFalse(vector3f3.equals((Object)vector3f1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.33333334F, 0.33333334F, 0.33333334F);
      assertNotNull(vector3f0);
      assertEquals(0.33333334F, vector3f0.x, 0.01F);
      assertEquals(0.33333334F, vector3f0.z, 0.01F);
      assertEquals(0.33333334F, vector3f0.y, 0.01F);
      assertEquals(0.33333334F, vector3f0.getY(), 0.01F);
      assertEquals("(0.33333334, 0.33333334, 0.33333334)", vector3f0.toString());
      assertEquals(0.33333334F, vector3f0.getZ(), 0.01F);
      assertEquals(0.33333334F, vector3f0.getX(), 0.01F);
      
      Vector3f vector3f1 = vector3f0.add(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.33333334F, vector3f0.x, 0.01F);
      assertEquals(0.33333334F, vector3f0.z, 0.01F);
      assertEquals(0.33333334F, vector3f0.y, 0.01F);
      assertEquals(0.6666667F, vector3f1.x, 0.01F);
      assertEquals(0.6666667F, vector3f1.y, 0.01F);
      assertEquals(0.6666667F, vector3f1.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.33333334F, vector3f0.getY(), 0.01F);
      assertEquals("(0.33333334, 0.33333334, 0.33333334)", vector3f0.toString());
      assertEquals(0.33333334F, vector3f0.getZ(), 0.01F);
      assertEquals(0.33333334F, vector3f0.getX(), 0.01F);
      assertEquals(0.6666667F, vector3f1.getZ(), 0.01F);
      assertEquals("(0.6666667, 0.6666667, 0.6666667)", vector3f1.toString());
      assertEquals(0.6666667F, vector3f1.getY(), 0.01F);
      assertEquals(0.6666667F, vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = FastMath.cartesianToSpherical(vector3f0);
      assertNotNull(vector3f2);
      assertEquals(0.33333334F, vector3f0.x, 0.01F);
      assertEquals(0.33333334F, vector3f0.z, 0.01F);
      assertEquals(0.33333334F, vector3f0.y, 0.01F);
      assertEquals(0.7853982F, vector3f2.y, 0.01F);
      assertEquals(0.5773503F, vector3f2.x, 0.01F);
      assertEquals(0.6154797F, vector3f2.z, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertNotSame(vector3f2, vector3f1);
      assertEquals(0.33333334F, vector3f0.getY(), 0.01F);
      assertEquals("(0.33333334, 0.33333334, 0.33333334)", vector3f0.toString());
      assertEquals(0.33333334F, vector3f0.getZ(), 0.01F);
      assertEquals(0.33333334F, vector3f0.getX(), 0.01F);
      assertEquals(0.6154797F, vector3f2.getZ(), 0.01F);
      assertEquals(0.7853982F, vector3f2.getY(), 0.01F);
      assertEquals(0.5773503F, vector3f2.getX(), 0.01F);
      assertEquals("(0.5773503, 0.7853982, 0.6154797)", vector3f2.toString());
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f2.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      
      Vector3f vector3f3 = FastMath.computeNormal(vector3f1, vector3f2, vector3f0);
      assertNotNull(vector3f3);
      assertEquals(0.33333334F, vector3f0.x, 0.01F);
      assertEquals(0.33333334F, vector3f0.z, 0.01F);
      assertEquals(0.33333334F, vector3f0.y, 0.01F);
      assertEquals(0.6666667F, vector3f1.x, 0.01F);
      assertEquals(0.6666667F, vector3f1.y, 0.01F);
      assertEquals(0.6666667F, vector3f1.z, 0.01F);
      assertEquals(0.7853982F, vector3f2.y, 0.01F);
      assertEquals(0.5773503F, vector3f2.x, 0.01F);
      assertEquals(0.6154797F, vector3f2.z, 0.01F);
      assertEquals(0.7668222F, vector3f3.z, 0.01F);
      assertEquals((-0.1405372F), vector3f3.y, 0.01F);
      assertEquals((-0.6262851F), vector3f3.x, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f3);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f3);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f2, vector3f0);
      assertNotSame(vector3f2, vector3f3);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f3, vector3f1);
      assertNotSame(vector3f3, vector3f0);
      assertNotSame(vector3f3, vector3f2);
      assertEquals(0.33333334F, vector3f0.getY(), 0.01F);
      assertEquals("(0.33333334, 0.33333334, 0.33333334)", vector3f0.toString());
      assertEquals(0.33333334F, vector3f0.getZ(), 0.01F);
      assertEquals(0.33333334F, vector3f0.getX(), 0.01F);
      assertEquals(0.6666667F, vector3f1.getZ(), 0.01F);
      assertEquals("(0.6666667, 0.6666667, 0.6666667)", vector3f1.toString());
      assertEquals(0.6666667F, vector3f1.getY(), 0.01F);
      assertEquals(0.6666667F, vector3f1.getX(), 0.01F);
      assertEquals(0.6154797F, vector3f2.getZ(), 0.01F);
      assertEquals(0.7853982F, vector3f2.getY(), 0.01F);
      assertEquals(0.5773503F, vector3f2.getX(), 0.01F);
      assertEquals("(0.5773503, 0.7853982, 0.6154797)", vector3f2.toString());
      assertEquals("(-0.6262851, -0.1405372, 0.7668222)", vector3f3.toString());
      assertEquals((-0.1405372F), vector3f3.getY(), 0.01F);
      assertEquals((-0.6262851F), vector3f3.getX(), 0.01F);
      assertEquals(0.7668222F, vector3f3.getZ(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f2));
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f1.equals((Object)vector3f2));
      assertFalse(vector3f2.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertFalse(vector3f3.equals((Object)vector3f1));
      assertFalse(vector3f3.equals((Object)vector3f0));
      assertFalse(vector3f3.equals((Object)vector3f2));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float float0 = FastMath.ceil(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = FastMath.ceil(1578.64F);
      assertEquals(1579.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(300.4F);
      assertNotNull(vector2f0);
      assertEquals(300.4F, vector2f0.x, 0.01F);
      assertEquals(300.4F, vector2f0.y, 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals("(300.4, 300.4)", vector2f0.toString());
      assertEquals(300.4F, vector2f0.getY(), 0.01F);
      assertEquals(300.4F, vector2f0.getX(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0, (-1004.6F));
      assertNotNull(vector3f0);
      assertEquals(300.4F, vector2f0.x, 0.01F);
      assertEquals(300.4F, vector2f0.y, 0.01F);
      assertEquals(300.4F, vector3f0.y, 0.01F);
      assertEquals(300.4F, vector3f0.x, 0.01F);
      assertEquals((-1004.6F), vector3f0.z, 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals("(300.4, 300.4)", vector2f0.toString());
      assertEquals(300.4F, vector2f0.getY(), 0.01F);
      assertEquals(300.4F, vector2f0.getX(), 0.01F);
      assertEquals("(300.4, 300.4, -1004.6)", vector3f0.toString());
      assertEquals(300.4F, vector3f0.getX(), 0.01F);
      assertEquals(300.4F, vector3f0.getY(), 0.01F);
      assertEquals((-1004.6F), vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(300.4F, vector2f0.x, 0.01F);
      assertEquals(300.4F, vector2f0.y, 0.01F);
      assertEquals(300.4F, vector3f0.y, 0.01F);
      assertEquals(300.4F, vector3f0.x, 0.01F);
      assertEquals((-1004.6F), vector3f0.z, 0.01F);
      assertEquals((-1.2802347F), vector3f1.z, 0.01F);
      assertEquals(0.27901697F, vector3f1.y, 0.01F);
      assertEquals(1090.7344F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals("(300.4, 300.4)", vector2f0.toString());
      assertEquals(300.4F, vector2f0.getY(), 0.01F);
      assertEquals(300.4F, vector2f0.getX(), 0.01F);
      assertEquals("(300.4, 300.4, -1004.6)", vector3f0.toString());
      assertEquals(300.4F, vector3f0.getX(), 0.01F);
      assertEquals(300.4F, vector3f0.getY(), 0.01F);
      assertEquals((-1004.6F), vector3f0.getZ(), 0.01F);
      assertEquals((-1.2802347F), vector3f1.getZ(), 0.01F);
      assertEquals(1090.7344F, vector3f1.getX(), 0.01F);
      assertEquals("(1090.7344, 0.27901697, -1.2802347)", vector3f1.toString());
      assertEquals(0.27901697F, vector3f1.getY(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      assertNotNull(vector3f0);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(1.0F, vector3f0.x, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(1.0F, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(1.0F, vector3f0.getX(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getY(), 0.01F);
      assertEquals("(1.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(1.0F, vector3f1.getX(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      
      float[] floatArray0 = new float[6];
      floatArray0[1] = 1.1998192E7F;
      Vector2f vector2f1 = vector2f0.build(floatArray0);
      assertNotNull(vector2f1);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f1.x, 0.01F);
      assertEquals(1.1998192E7F, vector2f1.y, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertArrayEquals(new float[] {0.0F, 1.1998192E7F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.1998192E7)", vector2f1.toString());
      assertEquals(0.0F, vector2f1.getX(), 0.01F);
      assertEquals(1.1998192E7F, vector2f1.getY(), 0.01F);
      assertEquals(1.5707964F, vector2f1.getAngle(), 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      Vector3f vector3f0 = vector2f1.cross(vector2f0);
      assertNotNull(vector3f0);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f1.x, 0.01F);
      assertEquals(1.1998192E7F, vector2f1.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1.1998192E7F), vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertArrayEquals(new float[] {0.0F, 1.1998192E7F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.1998192E7)", vector2f1.toString());
      assertEquals(0.0F, vector2f1.getX(), 0.01F);
      assertEquals(1.1998192E7F, vector2f1.getY(), 0.01F);
      assertEquals(1.5707964F, vector2f1.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, -1.1998192E7)", vector3f0.toString());
      assertEquals((-1.1998192E7F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      assertNotNull(vector3f1);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f1.x, 0.01F);
      assertEquals(1.1998192E7F, vector2f1.y, 0.01F);
      assertEquals(0.0F, vector3f0.x, 0.01F);
      assertEquals((-1.1998192E7F), vector3f0.z, 0.01F);
      assertEquals(0.0F, vector3f0.y, 0.01F);
      assertEquals((-1.5707964F), vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals(1.1998192E7F, vector3f1.x, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertArrayEquals(new float[] {0.0F, 1.1998192E7F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(0.0, 1.1998192E7)", vector2f1.toString());
      assertEquals(0.0F, vector2f1.getX(), 0.01F);
      assertEquals(1.1998192E7F, vector2f1.getY(), 0.01F);
      assertEquals(1.5707964F, vector2f1.getAngle(), 0.01F);
      assertEquals(0.0F, vector3f0.getX(), 0.01F);
      assertEquals("(0.0, 0.0, -1.1998192E7)", vector3f0.toString());
      assertEquals((-1.1998192E7F), vector3f0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f0.getY(), 0.01F);
      assertEquals((-1.5707964F), vector3f1.getY(), 0.01F);
      assertEquals("(1.1998192E7, -1.5707964, 0.0)", vector3f1.toString());
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals(1.1998192E7F, vector3f1.getX(), 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = FastMath.atan2(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = FastMath.atan2(0.9349218F, (-0.99236524F));
      assertEquals(2.385991F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = FastMath.atan(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = FastMath.atan(3228.161F);
      assertEquals(1.5704865F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = FastMath.acos(Float.POSITIVE_INFINITY);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = FastMath.abs(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.sphericalToCartesianZ((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.sphericalToCartesian((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.pointInsideTriangle((Vector2f) null, (Vector2f) null, (Vector2f) null, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateLinear((float) 0, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateCatmullRom(0.0F, 0.0F, (Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.getCatmullRomP1toP2Length((Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null, (short)7, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.getBezierP1toP2Length((Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.counterClockwise((Vector2f) null, (Vector2f) null, (Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.computeNormal((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.cartesianZToSpherical((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.cartesianToSpherical((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = FastMath.clamp(1.0F, (-1195.469F), 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = FastMath.clamp((-1168.5055F), (-0.41614684F), 0.45601484F);
      assertEquals((-0.41614684F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = FastMath.clamp(6.2831855F, Float.NEGATIVE_INFINITY, 6.2831855F);
      assertEquals(6.2831855F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1.0F, 0.40000004F);
      assertNotNull(vector2f0);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.40000004F, vector2f0.y, 0.01F);
      assertEquals(0.40000004F, vector2f0.getY(), 0.01F);
      assertEquals(0.3805064F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(1.0, 0.40000004)", vector2f0.toString());
      
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      assertNotNull(vector2f1);
      assertEquals(1.0F, vector2f1.y, 0.01F);
      assertEquals(1.0F, vector2f1.x, 0.01F);
      assertNotSame(vector2f1, vector2f0);
      assertEquals(1.0F, vector2f1.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f1.toString());
      assertEquals(1.0F, vector2f1.getX(), 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      int int0 = FastMath.counterClockwise(vector2f1, vector2f1, vector2f0);
      assertEquals(1, int0);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.40000004F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f1.y, 0.01F);
      assertEquals(1.0F, vector2f1.x, 0.01F);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertEquals(0.40000004F, vector2f0.getY(), 0.01F);
      assertEquals(0.3805064F, vector2f0.getAngle(), 0.01F);
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals("(1.0, 0.40000004)", vector2f0.toString());
      assertEquals(1.0F, vector2f1.getY(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f1.toString());
      assertEquals(1.0F, vector2f1.getX(), 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      assertNotNull(vector2f0);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f0.toString());
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
      
      int int0 = FastMath.counterClockwise(vector2f0, vector2f0, vector2f0);
      assertEquals(0, int0);
      assertEquals(1.0F, vector2f0.y, 0.01F);
      assertEquals(1.0F, vector2f0.x, 0.01F);
      assertEquals(0.7853982F, vector2f0.getAngle(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f0.toString());
      assertEquals(1.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.31830987F, 2129.0F);
      assertNotNull(vector2f0);
      assertEquals(2129.0F, vector2f0.y, 0.01F);
      assertEquals(0.31830987F, vector2f0.x, 0.01F);
      assertEquals("(0.31830987, 2129.0)", vector2f0.toString());
      assertEquals(1.5706468F, vector2f0.getAngle(), 0.01F);
      assertEquals(2129.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.31830987F, vector2f0.getX(), 0.01F);
      
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      assertNotNull(vector2f1);
      assertEquals(1.0F, vector2f1.y, 0.01F);
      assertEquals(1.0F, vector2f1.x, 0.01F);
      assertNotSame(vector2f1, vector2f0);
      assertEquals(1.0F, vector2f1.getX(), 0.01F);
      assertEquals(1.0F, vector2f1.getY(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f1.toString());
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      Vector2f vector2f2 = new Vector2f();
      assertNotNull(vector2f2);
      assertEquals(0.0F, vector2f2.y, 0.01F);
      assertEquals(0.0F, vector2f2.x, 0.01F);
      assertEquals(0.0F, vector2f2.getX(), 0.01F);
      assertEquals(0.0F, vector2f2.getY(), 0.01F);
      assertEquals(0.0F, vector2f2.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f2.toString());
      assertFalse(vector2f2.equals((Object)vector2f1));
      assertFalse(vector2f2.equals((Object)vector2f0));
      
      int int0 = FastMath.counterClockwise(vector2f0, vector2f1, vector2f2);
      assertEquals((-1), int0);
      assertEquals(2129.0F, vector2f0.y, 0.01F);
      assertEquals(0.31830987F, vector2f0.x, 0.01F);
      assertEquals(1.0F, vector2f1.y, 0.01F);
      assertEquals(1.0F, vector2f1.x, 0.01F);
      assertEquals(0.0F, vector2f2.y, 0.01F);
      assertEquals(0.0F, vector2f2.x, 0.01F);
      assertNotSame(vector2f0, vector2f2);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertNotSame(vector2f1, vector2f2);
      assertNotSame(vector2f2, vector2f1);
      assertNotSame(vector2f2, vector2f0);
      assertEquals("(0.31830987, 2129.0)", vector2f0.toString());
      assertEquals(1.5706468F, vector2f0.getAngle(), 0.01F);
      assertEquals(2129.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.31830987F, vector2f0.getX(), 0.01F);
      assertEquals(1.0F, vector2f1.getX(), 0.01F);
      assertEquals(1.0F, vector2f1.getY(), 0.01F);
      assertEquals("(1.0, 1.0)", vector2f1.toString());
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals(0.0F, vector2f2.getX(), 0.01F);
      assertEquals(0.0F, vector2f2.getY(), 0.01F);
      assertEquals(0.0F, vector2f2.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f2.toString());
      assertFalse(vector2f0.equals((Object)vector2f2));
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(vector2f1.equals((Object)vector2f2));
      assertFalse(vector2f2.equals((Object)vector2f1));
      assertFalse(vector2f2.equals((Object)vector2f0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      assertNotNull(vector2f0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      
      Vector2f vector2f1 = vector2f0.add(1.0E-4F);
      assertNotNull(vector2f1);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0E-4F, vector2f1.x, 0.01F);
      assertEquals(1.0E-4F, vector2f1.y, 0.01F);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0E-4F, vector2f1.getY(), 0.01F);
      assertEquals("(1.0E-4, 1.0E-4)", vector2f1.toString());
      assertEquals(1.0E-4F, vector2f1.getX(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertFalse(vector2f1.equals((Object)vector2f0));
      
      Vector2f vector2f2 = new Vector2f((short)26774, (-1586.664F));
      assertNotNull(vector2f2);
      assertEquals(26774.0F, vector2f2.x, 0.01F);
      assertEquals((-1586.664F), vector2f2.y, 0.01F);
      assertEquals("(26774.0, -1586.664)", vector2f2.toString());
      assertEquals((-0.059192143F), vector2f2.getAngle(), 0.01F);
      assertEquals(26774.0F, vector2f2.getX(), 0.01F);
      assertEquals((-1586.664F), vector2f2.getY(), 0.01F);
      assertFalse(vector2f2.equals((Object)vector2f0));
      assertFalse(vector2f2.equals((Object)vector2f1));
      
      int int0 = FastMath.counterClockwise(vector2f0, vector2f2, vector2f1);
      assertEquals(1, int0);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(1.0E-4F, vector2f1.x, 0.01F);
      assertEquals(1.0E-4F, vector2f1.y, 0.01F);
      assertEquals(26774.0F, vector2f2.x, 0.01F);
      assertEquals((-1586.664F), vector2f2.y, 0.01F);
      assertNotSame(vector2f0, vector2f2);
      assertNotSame(vector2f0, vector2f1);
      assertNotSame(vector2f1, vector2f0);
      assertNotSame(vector2f1, vector2f2);
      assertNotSame(vector2f2, vector2f0);
      assertNotSame(vector2f2, vector2f1);
      assertEquals(0.0F, vector2f0.getAngle(), 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals(0.0F, vector2f0.getY(), 0.01F);
      assertEquals(0.0F, vector2f0.getX(), 0.01F);
      assertEquals(1.0E-4F, vector2f1.getY(), 0.01F);
      assertEquals("(1.0E-4, 1.0E-4)", vector2f1.toString());
      assertEquals(1.0E-4F, vector2f1.getX(), 0.01F);
      assertEquals(0.7853982F, vector2f1.getAngle(), 0.01F);
      assertEquals("(26774.0, -1586.664)", vector2f2.toString());
      assertEquals((-0.059192143F), vector2f2.getAngle(), 0.01F);
      assertEquals(26774.0F, vector2f2.getX(), 0.01F);
      assertEquals((-1586.664F), vector2f2.getY(), 0.01F);
      assertFalse(vector2f0.equals((Object)vector2f2));
      assertFalse(vector2f0.equals((Object)vector2f1));
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(vector2f1.equals((Object)vector2f2));
      assertFalse(vector2f2.equals((Object)vector2f0));
      assertFalse(vector2f2.equals((Object)vector2f1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = FastMath.reduceSinAngle(0L);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = FastMath.reduceSinAngle(1933.0F);
      assertEquals(5.3627214F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float float0 = FastMath.asin(Float.POSITIVE_INFINITY);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float float0 = FastMath.asin(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float float0 = FastMath.asin((-1400.6155F));
      assertEquals((-1.5707964F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = FastMath.interpolateLinear(0.57735026F, Float.POSITIVE_INFINITY, 2.470796F);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      assertNotNull(vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      
      Vector3f vector3f1 = FastMath.interpolateCatmullRom((-4089.3977F), 903.5832F, vector3f0, vector3f0, vector3f0, vector3f0);
      assertNotNull(vector3f1);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = vector3f1.interpolate(vector3f0, 903.5832F);
      assertNotNull(vector3f2);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.z, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.x, 0.01F);
      assertEquals(Float.NaN, vector3f1.z, 0.01F);
      assertEquals(Float.NaN, vector3f1.y, 0.01F);
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.y, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.x, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.z, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f2, vector3f1);
      assertNotSame(vector3f2, vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getZ(), 0.01F);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f0.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f0.getY(), 0.01F);
      assertEquals("(NaN, NaN, NaN)", vector3f1.toString());
      assertEquals(Float.NaN, vector3f1.getX(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
      assertEquals(Float.NaN, vector3f1.getZ(), 0.01F);
      assertEquals("(Infinity, Infinity, Infinity)", vector3f2.toString());
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.getX(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.getY(), 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, vector3f2.getZ(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertTrue(vector3f2.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.5707964F), 3.1415927F);
      assertNotNull(vector2f0);
      assertEquals((-1.5707964F), vector2f0.x, 0.01F);
      assertEquals(3.1415927F, vector2f0.y, 0.01F);
      assertEquals((-1.5707964F), vector2f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector2f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927)", vector2f0.toString());
      assertEquals(2.0344439F, vector2f0.getAngle(), 0.01F);
      
      Vector3f vector3f0 = new Vector3f(vector2f0);
      assertNotNull(vector3f0);
      assertEquals((-1.5707964F), vector2f0.x, 0.01F);
      assertEquals(3.1415927F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(3.1415927F, vector3f0.y, 0.01F);
      assertEquals((-1.5707964F), vector3f0.x, 0.01F);
      assertEquals((-1.5707964F), vector2f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector2f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927)", vector2f0.toString());
      assertEquals(2.0344439F, vector2f0.getAngle(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1.5707964F), vector3f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector3f0.getY(), 0.01F);
      
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(3.1415927F, vector3f0);
      assertNotNull(quaternion0);
      assertEquals((-1.5707964F), vector2f0.x, 0.01F);
      assertEquals(3.1415927F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(3.1415927F, vector3f0.y, 0.01F);
      assertEquals((-1.5707964F), vector3f0.x, 0.01F);
      assertEquals(3.1415927F, quaternion0.y, 0.01F);
      assertEquals((-1.5707964F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion0.w, 0.01F);
      assertEquals((-1.5707964F), vector2f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector2f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927)", vector2f0.toString());
      assertEquals(2.0344439F, vector2f0.getAngle(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1.5707964F), vector3f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector3f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0, -4.371139E-8)", quaternion0.toString());
      assertEquals((-4.371139E-8F), quaternion0.getW(), 0.01F);
      assertEquals((-1.5707964F), quaternion0.getX(), 0.01F);
      assertEquals(3.1415927F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertNotNull(vector3f1);
      assertEquals((-1.5707964F), vector2f0.x, 0.01F);
      assertEquals(3.1415927F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(3.1415927F, vector3f0.y, 0.01F);
      assertEquals((-1.5707964F), vector3f0.x, 0.01F);
      assertEquals(3.1415927F, quaternion0.y, 0.01F);
      assertEquals((-1.5707964F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion0.w, 0.01F);
      assertEquals(38.75785F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals((-19.378925F), vector3f1.x, 0.01F);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertEquals((-1.5707964F), vector2f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector2f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927)", vector2f0.toString());
      assertEquals(2.0344439F, vector2f0.getAngle(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1.5707964F), vector3f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector3f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0, -4.371139E-8)", quaternion0.toString());
      assertEquals((-4.371139E-8F), quaternion0.getW(), 0.01F);
      assertEquals((-1.5707964F), quaternion0.getX(), 0.01F);
      assertEquals(3.1415927F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(-19.378925, 38.75785, 0.0)", vector3f1.toString());
      assertEquals(38.75785F, vector3f1.getY(), 0.01F);
      assertEquals((-19.378925F), vector3f1.getX(), 0.01F);
      assertFalse(vector3f1.equals((Object)vector3f0));
      
      Vector3f vector3f2 = vector3f0.interpolate(vector3f1, (-1.0440116F));
      assertNotNull(vector3f2);
      assertEquals((-1.5707964F), vector2f0.x, 0.01F);
      assertEquals(3.1415927F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector3f0.z, 0.01F);
      assertEquals(3.1415927F, vector3f0.y, 0.01F);
      assertEquals((-1.5707964F), vector3f0.x, 0.01F);
      assertEquals(3.1415927F, quaternion0.y, 0.01F);
      assertEquals((-1.5707964F), quaternion0.x, 0.01F);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals((-4.371139E-8F), quaternion0.w, 0.01F);
      assertEquals(38.75785F, vector3f1.y, 0.01F);
      assertEquals(0.0F, vector3f1.z, 0.01F);
      assertEquals((-19.378925F), vector3f1.x, 0.01F);
      assertEquals(0.0F, vector3f2.z, 0.01F);
      assertEquals((-1.5707964F), vector3f2.x, 0.01F);
      assertEquals(3.1415927F, vector3f2.y, 0.01F);
      assertNotSame(vector3f0, vector3f2);
      assertNotSame(vector3f0, vector3f1);
      assertNotSame(vector3f1, vector3f0);
      assertNotSame(vector3f1, vector3f2);
      assertNotSame(vector3f2, vector3f0);
      assertNotSame(vector3f2, vector3f1);
      assertEquals((-1.5707964F), vector2f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector2f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927)", vector2f0.toString());
      assertEquals(2.0344439F, vector2f0.getAngle(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0)", vector3f0.toString());
      assertEquals(0.0F, vector3f0.getZ(), 0.01F);
      assertEquals((-1.5707964F), vector3f0.getX(), 0.01F);
      assertEquals(3.1415927F, vector3f0.getY(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0, -4.371139E-8)", quaternion0.toString());
      assertEquals((-4.371139E-8F), quaternion0.getW(), 0.01F);
      assertEquals((-1.5707964F), quaternion0.getX(), 0.01F);
      assertEquals(3.1415927F, quaternion0.getY(), 0.01F);
      assertEquals(0.0F, quaternion0.getZ(), 0.01F);
      assertEquals(0.0F, vector3f1.getZ(), 0.01F);
      assertEquals("(-19.378925, 38.75785, 0.0)", vector3f1.toString());
      assertEquals(38.75785F, vector3f1.getY(), 0.01F);
      assertEquals((-19.378925F), vector3f1.getX(), 0.01F);
      assertEquals("(-1.5707964, 3.1415927, 0.0)", vector3f2.toString());
      assertEquals((-1.5707964F), vector3f2.getX(), 0.01F);
      assertEquals(0.0F, vector3f2.getZ(), 0.01F);
      assertEquals(3.1415927F, vector3f2.getY(), 0.01F);
      assertFalse(vector3f0.equals((Object)vector3f1));
      assertFalse(vector3f1.equals((Object)vector3f0));
      assertFalse(vector3f2.equals((Object)vector3f1));
      assertTrue(vector3f2.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float float0 = FastMath.interpolateLinear((-2369.8594F), (-2369.8594F), (-2369.8594F));
      assertEquals((-2369.8594F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon((double) 6.2831855F, (double) 0.0F, (double) 6.2831855F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon((double) 4.5408983E-6F, (double) (-1.5700672F), (double) (-1.5700672F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon((-1.819191F), (-1.819191F), (-1.819191F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float float0 = FastMath.sin(2097.205F);
      assertEquals((-0.981628F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.interpolateBezier((-1360.4713F), (Vector3f) null, (Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = FastMath.interpolateCatmullRom(0.0F, 0.0F, (-1287.0F), -0.0F, (-176.9F), 0.61999995F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float float0 = FastMath.atan((-1371.4F));
      assertEquals((-1.5700672F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float float0 = FastMath.nextRandomFloat();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = FastMath.nextRandomInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float float0 = FastMath.cos(0.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = FastMath.interpolateBezier(1072.5399F, 1072.5399F, 1072.5399F, 1767.389F, (-217.93F));
      assertEquals((-4.16165685E12F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf((-65504.0F));
      assertEquals((short) (-1025), short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf((-1.0283927E7F));
      assertEquals((short) (-1025), short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(1073741824);
      assertEquals((short)31743, short0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(0.0F);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(Float.NEGATIVE_INFINITY);
      assertEquals((short) (-1024), short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = FastMath.convertFloatToHalf(Float.POSITIVE_INFINITY);
      assertEquals((short)31744, short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastMath.convertFloatToHalf(Float.NaN);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // NaN to half conversion not supported!
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = FastMath.convertHalfToFloat((short)31744);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = FastMath.convertHalfToFloat((short)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = FastMath.saturate(1031.94F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float float0 = FastMath.saturate(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = FastMath.copysign(3239.1047F, (-2832.2625F));
      assertEquals((-3239.1047F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = FastMath.copysign((-18.34909F), Float.POSITIVE_INFINITY);
      assertEquals(18.34909F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = FastMath.copysign(Float.POSITIVE_INFINITY, 1.0F);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = FastMath.copysign((-1808.7716F), (-1.5707964F));
      assertEquals((-1808.7716F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = FastMath.normalize(0.52000004F, Float.NEGATIVE_INFINITY, 0.017454179F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = FastMath.normalize(Float.NaN, Float.NaN, Float.NaN);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      FastMath.normalize(1, 1443, 1443);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = FastMath.normalize(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      assertEquals("(Infinity, -1.5707964, NaN)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = FastMath.cartesianZToSpherical(vector3f0);
      assertEquals("(1.0, 1.5707964, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      int int0 = FastMath.pointInsideTriangle(vector2f1, vector2f1, vector2f1, vector2f0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = vector2f0.add(1.0E-4F);
      Vector2f vector2f2 = new Vector2f(2349.4968F, (-2.303598E7F));
      int int0 = FastMath.pointInsideTriangle(vector2f0, vector2f2, vector2f2, vector2f1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector2f vector2f2 = Vector2f.UNIT_X;
      int int0 = FastMath.pointInsideTriangle(vector2f1, vector2f2, vector2f1, vector2f0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      int int0 = FastMath.pointInsideTriangle(vector2f0, vector2f0, vector2f1, vector2f1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector2f vector2f1 = new Vector2f(3708.1F);
      Vector2f vector2f2 = Vector2f.UNIT_XY;
      int int0 = FastMath.counterClockwise(vector2f2, vector2f0, vector2f1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      Vector2f vector2f2 = Vector2f.ZERO;
      int int0 = FastMath.pointInsideTriangle(vector2f1, vector2f0, vector2f0, vector2f2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = FastMath.sign(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = FastMath.sign(1443);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = FastMath.sign((-802));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float float0 = FastMath.abs(Float.NEGATIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float float0 = FastMath.abs(0.5F);
      assertEquals(0.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float float0 = FastMath.sin2(0.25999996F);
      assertEquals(0.25708053F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float float0 = FastMath.sin2(2171.7815F);
      assertEquals((-0.80809426F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = Vector3f.UNIT_X;
      float float0 = vector3f0.angleBetween(vector3f1);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      float float0 = vector3f0.angleBetween(vector3f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float float0 = FastMath.acos((-1.0F));
      assertEquals(3.1415927F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, 1.0F);
      Vector3f vector3f1 = FastMath.sphericalToCartesianZ(vector3f0);
      float float0 = FastMath.getCatmullRomP1toP2Length(vector3f1, vector3f0, vector3f0, vector3f0, 1.0F, 3.6682687F, 3488.0F);
      assertEquals(82686.766F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, 1.0F);
      float float0 = FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, 1.0F, 3.6682687F, 3488.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      float float0 = FastMath.getCatmullRomP1toP2Length(vector3f0, vector3f0, vector3f0, vector3f0, 0.0F, 1.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      Vector3f vector3f2 = FastMath.interpolateLinear(Float.NEGATIVE_INFINITY, vector3f1, vector3f1);
      assertEquals("(Infinity, NaN, -1.5707964)", vector3f2.toString());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FastMath.isPowerOfTwo(6);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FastMath.isPowerOfTwo(1073741824);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = FastMath.isPowerOfTwo((short) (-2108));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon((double) 0.0F, (double) 0.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float float0 = FastMath.tan((-145.85F));
      assertEquals((-4.194246F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = FastMath.log((float) (short)0, 1.0F);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = FastMath.floor((-206.91667F));
      assertEquals((-207.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = FastMath.cartesianToSpherical(vector3f0);
      Vector3f vector3f2 = Vector3f.UNIT_Z;
      Vector3f vector3f3 = FastMath.computeNormal(vector3f1, vector3f2, vector3f0);
      Vector3f vector3f4 = FastMath.interpolateCatmullRom((float) (short)14967, 3.0F, vector3f2, vector3f2, vector3f3, vector3f2);
      assertEquals("(1.25461765E12, -2.19801295E12, -5.5501149E12)", vector3f4.toString());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      float float0 = FastMath.pow((-1681.0F), (-1));
      assertEquals((-5.94884E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float float0 = FastMath.fastInvSqrt(Float.POSITIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = FastMath.isWithinEpsilon((double) Float.NaN, (double) 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float float0 = FastMath.determinant(1230.9, 1230.9, 1230.9, 1088.809, 1088.809, 1088.809, 1088.809, 1230.9, 875.729614, 0.0, (-617.08), (-617.08), 1230.9, (-3174.7393251), 0.0, 1088.809);
      assertEquals((-1.81247305E12F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float float0 = FastMath.log(Float.POSITIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float float0 = FastMath.ceil(Float.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float float0 = FastMath.extrapolateLinear(1096.07F, 437.055F, 1.1920929E-7F);
      assertEquals((-478605.78F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float float0 = FastMath.atan2((-2.0F), 2863.1873F);
      assertEquals((-6.9852214E-4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = FastMath.nextRandomInt(18, 18);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FastMath.nextRandomInt();
      float float0 = FastMath.nextRandomFloat();
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float float0 = FastMath.sqr(65504.0F);
      assertEquals(4.29077402E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector3f vector3f1 = FastMath.sphericalToCartesian(vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        FastMath.extrapolateLinear(Float.NEGATIVE_INFINITY, vector3f0, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.FastMath", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float float0 = FastMath.sign(1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float float0 = FastMath.exp(3.0F);
      assertEquals(20.085537F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = FastMath.nearestPowerOfTwo(0);
      assertEquals(0, int0);
  }
}
