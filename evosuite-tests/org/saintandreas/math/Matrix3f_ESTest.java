/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:44:02 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix3f_ESTest extends Matrix3f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-2069.6F), 0.5599243F, (-2069.6F), (-2083116.5F), (-2069.6F), (-2083116.5F), 1.0668385E19F, (-2083116.5F), Float.NaN);
      Matrix3f matrix3f1 = new Matrix3f();
      Matrix3f matrix3f2 = new Matrix3f(matrix3f0);
      Matrix3f matrix3f3 = matrix3f0.mult(matrix3f1);
      matrix3f2.equals(matrix3f3);
      assertTrue(matrix3f2.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, 102.09347F, 2086.4F, Float.NaN, Float.NaN, 2086.4F);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = new Matrix3f(Float.POSITIVE_INFINITY, 0.9999999F, 1.2437999F, Float.POSITIVE_INFINITY, 0.94976574F, (-1683.5388F), 3.0F, 0.0F, 0.15010571F);
      Matrix3f matrix3f2 = matrix3f1.mult(matrix3f0);
      matrix3f2.equals(matrix3f0);
      assertEquals(Float.NaN, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(-0.0F);
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix3f matrix3f0 = new Matrix3f(-0.0F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.invert();
      matrix3f1.equals(matrix3f0);
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = vector2f0.build(1.1920929E-7F);
      Vector3f vector3f0 = new Vector3f(vector2f1);
      Matrix3f matrix3f0 = new Matrix3f(1317.5454F, vector3f0);
      Matrix3f matrix3f1 = Matrix3f.IDENTITY;
      matrix3f0.equals(matrix3f1);
      assertEquals((-0.04122108F), matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f((-539.4F), vector3f0);
      matrix3f0.hashCode();
      assertEquals(4.2954655F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.invert();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, vector3f0);
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      assertNotSame(vector3f0, vector3f1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.mult(matrix3f0);
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f((-6.7001505F), vector3f0);
      Matrix3f matrix3f1 = matrix3f0.transpose();
      matrix3f1.isIdentity();
      assertEquals(1.555595F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f((-605.5F), vector3f0);
      float[] floatArray0 = new float[9];
      matrix3f0.fillFloatArray(floatArray0, false);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, Float.NaN, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, Float.NaN, Float.NaN, Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix3f matrix3f0 = new Matrix3f(1317.5454F, vector3f0);
      float[] floatArray0 = new float[11];
      matrix3f0.fillFloatArray(floatArray0, true);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float[] floatArray0 = new float[7];
      // Undeclared exception!
      try { 
        matrix3f0.fillFloatArray(floatArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 7 out of bounds for length 7
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(882.3F, 0.0F, 0.0F, 1886.0482F, 0.0F, 584.3262F, 1886.0482F, 0.0F, 0.0F);
      Matrix3f matrix3f1 = matrix3f0.transpose();
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = vector2f0.build(1.1920929E-7F);
      Vector3f vector3f0 = new Vector3f(vector2f1);
      Matrix3f matrix3f0 = new Matrix3f(1317.5454F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.transpose();
      assertEquals((-0.04122108F), matrix3f1.determinant(), 0.01F);
      assertFalse(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1829.9155F), 600.14F, 6.2831855F);
      Matrix3f matrix3f0 = new Matrix3f(76.87F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.scale(vector3f0);
      assertEquals((-8.469527E19F), matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(162.6F, 0, (-1.0F), 0.0F, 0, (-3064.2F), 0.34640187F, -0.0F, (-1.0F));
      Vector3f vector3f0 = new Vector3f(162.6F);
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      Vector3f vector3f2 = matrix3f0.mult(vector3f1);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals("(4272610.5, 325648.03, 9208.387)", vector3f2.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(162.6F, 0, (-1.0F), 0.0F, 0, (-3064.2F), 0.34640187F, -0.0F, 8.469527E19F);
      Vector3f vector3f0 = new Vector3f(162.6F);
      Vector3f vector3f1 = matrix3f0.mult(vector3f0);
      matrix3f0.mult(vector3f1);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
      assertEquals("(26276.162, -498238.94, 1.377145E22)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.mult(matrix3f0);
      assertNotSame(matrix3f1, matrix3f0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = matrix3f0.mult(matrix3f0);
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Vector3f vector3f1 = Vector3f.UNIT_Z;
      Vector3f vector3f2 = Vector3f.UNIT_X;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f2, vector3f1);
      Matrix3f matrix3f2 = matrix3f1.mult(matrix3f0);
      assertEquals((-1.0F), matrix3f1.determinant(), 0.01F);
      assertTrue(matrix3f2.equals((Object)matrix3f1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Matrix3f matrix3f0 = new Matrix3f((-1078.8079F), vector3f0);
      Matrix3f matrix3f1 = matrix3f0.invert();
      assertEquals((-29.592463F), matrix3f1.determinant(), 0.01F);
      assertEquals((-0.03379239F), matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, 2436.081F, 2436.081F, (-1686.6913F), Float.NaN, (-93.923F), (-2979.674F));
      Vector3f vector3f0 = matrix3f0.getRow(2);
      assertEquals("(NaN, -93.923, -2979.674)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(-0.0F);
      Matrix3f matrix3f0 = new Matrix3f(3698.38F, vector3f0);
      Vector3f vector3f1 = matrix3f0.getRow(0);
      assertEquals((-0.41898066F), matrix3f0.determinant(), 0.01F);
      assertEquals("(-0.7482809, 0.0, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1829.9155F), 600.14F, 6.2831855F);
      Matrix3f matrix3f0 = new Matrix3f(76.87F, vector3f0);
      Vector3f vector3f1 = matrix3f0.getColumn(0);
      assertEquals(1.22742762E13F, matrix3f0.determinant(), 0.01F);
      assertEquals("(3017564.0, -989635.56, -10958.287)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(3347955.5F, (-1107.6326F), 997.5F);
      Matrix3f matrix3f0 = new Matrix3f((-3562.7266F), vector3f0);
      Vector3f vector3f1 = matrix3f0.getColumn(1);
      assertEquals(4.1233648E22F, matrix3f0.determinant(), 0.01F);
      assertEquals("(-4.7656808E7, 15767.747, -549219.8)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1, (-1.0F), 0.0F, 1, 1.1920929E-7F, (-1321.8F), 0.0F, (-1697.4598F), 1.1920929E-7F);
      float float0 = matrix3f0.get(2, 1);
      assertEquals((-2243702.5F), matrix3f0.determinant(), 0.01F);
      assertEquals((-1697.4598F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Vector3f vector3f1 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.ZERO.scale(vector3f1);
      float float0 = matrix3f1.determinant();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(0.0F, 600.14F, 1885.0F, 0.0F, 0.0F, (-4125.0F), (-4125.0F), (-504.99792F), 0.0F);
      float float0 = matrix3f0.determinant();
      assertEquals(1.02117571E10F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, vector3f0);
      Matrix3f matrix3f1 = matrix3f0.ZERO.adjoint();
      assertEquals(0.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.get((float[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix3f.equalIdentity((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Matrix3f matrix3f0 = new Matrix3f((-1078.8079F), vector3f0);
      float float0 = matrix3f0.determinant();
      assertEquals((-0.03379239F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-2069.0F), Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-2163.0322F), 2090212.8F, Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NEGATIVE_INFINITY, 0.0F, Float.NaN, Float.NaN);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F);
      Matrix3f.equalIdentity(matrix3f0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector3f vector3f1 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f1, vector3f0);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, Float.NaN, 1.8506705E-4F, Float.NaN, 1.0F, 1.8506705E-4F, 3.32678287E10F, 1403.388F, 1.8506705E-4F);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      boolean boolean0 = Matrix3f.equalIdentity(matrix3f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, vector3f0);
      Matrix3f matrix3f1 = new Matrix3f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, (-65504.0F));
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      Matrix3f matrix3f1 = new Matrix3f(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1.1920929E-7F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
      assertFalse(matrix3f0.equals((Object)matrix3f1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f1 = new Matrix3f(3.5527082E-15F, vector3f0);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f1 = new Matrix3f(535.0F, vector3f0);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f1.determinant(), 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix3f matrix3f1 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(Float.NaN, vector3f0);
      Matrix3f matrix3f1 = new Matrix3f(Float.NaN, Float.NaN, 0.003137851F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.1920929E-7F, Float.NaN);
      boolean boolean0 = matrix3f0.equals(matrix3f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = new Matrix3f(1, 1, 0.0F, 1.1920929E-7F, (-825.9785F), (-789.382F), (-2.2635152F), 0.5196057F, 1290.4749F);
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertEquals((-1063707.6F), matrix3f1.determinant(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = new Matrix3f();
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertTrue(boolean0);
      assertEquals(1.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix3f matrix3f1 = Matrix3f.IDENTITY;
      boolean boolean0 = matrix3f1.equals(matrix3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      boolean boolean0 = matrix3f0.equals(matrix3f0);
      assertTrue(boolean0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.equals(vector3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(1.0E-4F, vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(1.0F, vector3f0);
      matrix3f0.isIdentity();
      assertEquals(0.99999994F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      matrix3f0.isIdentity();
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0F, 0.0F, (-117.0F), (-1556.53F), 1.0F, (-0.10088712F), (-1556.53F), 1.0F, 0.9999999F);
      boolean boolean0 = matrix3f0.isIdentity();
      assertEquals(1.1008871F, matrix3f0.determinant(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      boolean boolean0 = matrix3f0.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      boolean boolean0 = matrix3f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      // Undeclared exception!
      try { 
        matrix3f0.fillFloatArray((float[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Vector3f vector3f1 = matrix3f0.getRow(2);
      assertNotSame(vector3f1, vector3f0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Vector3f vector3f0 = matrix3f0.getRow(1);
      assertEquals("(0.0, 1.0, 0.0)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      // Undeclared exception!
      try { 
        matrix3f0.getRow((-445));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid row index. -445
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Vector3f vector3f0 = matrix3f0.ZERO.getColumn(2);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.getColumn(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. 3
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float[] floatArray0 = new float[16];
      matrix3f0.get(floatArray0, false);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float[] floatArray0 = new float[16];
      matrix3f0.get(floatArray0, true);
      assertTrue(matrix3f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      float[] floatArray0 = new float[9];
      matrix3f0.get(floatArray0, false);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      float[] floatArray0 = new float[9];
      matrix3f0.get(floatArray0, true);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix3f0.get(floatArray0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Array size must be 9 or 16 in Matrix3f.get().
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      float float0 = matrix3f0.get(2, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(162.6F, 0, (-1.0F), 0.0F, 0, (-3064.2F), 0.34640187F, -0.0F, (-1.0F));
      float float0 = matrix3f0.get(2, 0);
      assertEquals(0.34640187F, float0, 0.01F);
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      float float0 = matrix3f0.get(1, 2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(1, 1);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float float0 = matrix3f0.get(0, 2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float float0 = matrix3f0.get(0, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(0, 0);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.get(242, 242);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      float float0 = matrix3f0.get(1, 0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      float float0 = matrix3f0.get(2, 2);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.get(0, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix3f matrix3f0 = new Matrix3f(0.0F, vector3f0);
      matrix3f0.hashCode();
      assertTrue(matrix3f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = matrix3f0.transpose();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix3f0.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix3f matrix3f1 = matrix3f0.invert();
      assertEquals(0.0F, matrix3f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix3f matrix3f1 = matrix3f0.adjoint();
      assertTrue(matrix3f1.equals((Object)matrix3f0));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.scale((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      // Undeclared exception!
      try { 
        matrix3f0.mult((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Matrix3f matrix3f0 = null;
      try {
        matrix3f0 = new Matrix3f(7.1660726E16F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix3f", e);
      }
  }
}
