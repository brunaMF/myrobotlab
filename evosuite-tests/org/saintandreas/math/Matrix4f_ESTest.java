/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:42:42 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Matrix4f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix4f_ESTest extends Matrix4f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0, (-866.0F));
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      boolean boolean0 = matrix4f0.isIdentity();
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals((-866.0F), matrix4f0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector2f vector2f0 = new Vector2f(0.0F, (-5676.0F));
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.translate(vector2f0);
      boolean boolean0 = matrix4f1.isIdentity();
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1511.464F);
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(1511.464F, matrix4f0.m03, 0.01F);
      assertEquals(1511.464F, matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(1.0F, vector3f0);
      matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(4.637541F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, true);
      matrix4f0.isIdentity();
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix4f matrix4f0 = Matrix4f.fromAngleAxis(1.0F, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      matrix4f1.equals(matrix4f0);
      assertEquals(0.99999994F, matrix4f1.m03, 0.01F);
      assertEquals(0.9999999F, matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(Float.NEGATIVE_INFINITY, 2819.3455F, 1.0F, (-279.483F));
      Matrix4f matrix4f1 = matrix4f0.transpose();
      matrix4f1.equals(matrix4f0);
      assertEquals((-0.99286944F), matrix4f1.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.lookat(vector3f0, vector3f0, vector3f0);
      Matrix4f matrix4f1 = Matrix4f.orthographic(Float.NaN, 0.0F, Float.NaN, 0.0F, Float.NaN, Float.NaN);
      matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      Vector3f vector3f0 = new Vector3f(2673.412F, 0.0F, 0.0F);
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      matrix4f0.equals(matrix4f1);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(2673.412F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[19];
      float[][] floatArray1 = new float[4][1];
      floatArray1[0] = floatArray0;
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[9][1];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0, 0, 0, 0);
      float[] floatArray0 = matrix4f0.getColumn(2);
      // Undeclared exception!
      try { 
        matrix4f0.get(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic((-84.18F), (-84.18F), 57.295776F, 57.295776F, 0.0F, (-84.18F));
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(4270);
      matrix4f0.fillFloatBuffer(floatBuffer0, false);
      assertEquals(0.023758613F, matrix4f0.m22, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m11, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals((-1.0F), matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m13, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(0.0F, vector3f0);
      float[] floatArray0 = new float[16];
      matrix4f0.get(floatArray0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      FloatBuffer floatBuffer0 = matrix4f0.toFloatBuffer(false);
      matrix4f0.fillFloatBuffer(floatBuffer0);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[19];
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      matrix4f0.fillFloatArray(floatArray0, true);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic((-1.0F), 0.0F, 1403.4F, 1403.4F, 2027.0F, (-0.49505556F));
      FloatBuffer floatBuffer0 = matrix4f0.toFloatBuffer(true);
      Matrix4f matrix4f1 = new Matrix4f(floatBuffer0, true);
      assertEquals(1.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.9995117F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f1.m11, 0.01F);
      assertEquals(2.0F, matrix4f1.m00, 0.01F);
      assertEquals(9.86439E-4F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.transpose();
      assertNotSame(matrix4f1, matrix4f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      Vector3f vector3f0 = new Vector3f(0.0F);
      Matrix4f matrix4f1 = matrix4f0.ZERO.translate(vector3f0);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(228.59273F, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals((-0.3988177F), matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Vector2f vector2f0 = new Vector2f();
      Matrix4f matrix4f1 = matrix4f0.translate(vector2f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Matrix4f matrix4f1 = matrix4f0.translate(vector2f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f((-2719.8784F), (-2719.8784F), (-0.010288502F), (-0.010288502F), 1473.1461F, (-2115.1504F), (-0.010288502F), (-0.010288502F), 0.0013351135F, 1473.1461F, (-1018.0F), 0.0013351135F, 1473.1461F, (-1018.0F), 0.0013351135F, -0.0F);
      Vector2f vector2f0 = new Vector2f((-0.010288502F), 985.91736F);
      Matrix4f matrix4f1 = matrix4f0.translate(vector2f0);
      assertEquals((-5.403748E7F), matrix4f0.determinant(), 0.01F);
      assertEquals((-9.3909709E8F), matrix4f1.determinant(), 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals((-2719.8784F), matrix4f1.m00, 0.01F);
      assertEquals(0.0013351135F, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector3f vector3f1 = new Vector3f();
      Matrix4f matrix4f0 = Matrix4f.lookat(vector3f0, vector3f1, vector3f0);
      Vector3f vector3f2 = matrix4f0.toTranslationVector();
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(0.57735026F, matrix4f0.m22, 0.01F);
      assertEquals(0.57735026F, matrix4f0.m21, 0.01F);
      assertEquals(0.57735026F, matrix4f0.m20, 0.01F);
      assertEquals("(NaN, NaN, -1.7320508)", vector3f2.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(4.5807533F, (-3523.3489F), (-1.0565376F), (-5), 4.5807533F, 0.0F);
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      assertEquals(1.255323E-4F, matrix4f0.determinant(), 0.01F);
      assertEquals("(-0.99740314, -1.5358427, 1.0)", vector3f0.toString());
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(3204.38F, 531.8F, Float.NEGATIVE_INFINITY, 531.8F, 3661.9968F, 3204.38F, 3263.25F, 3661.9968F, (-919.4643F), 2388.922F, 1233.0F, 3204.38F, Float.NEGATIVE_INFINITY, (-596.4788F), 693.0F, 1831.0F);
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      assertEquals((-596.4788F), matrix4f0.m31, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m30, 0.01F);
      assertEquals(1831.0F, matrix4f0.m33, 0.01F);
      assertEquals(3204.38F, matrix4f0.m23, 0.01F);
      assertEquals(3661.9968F, matrix4f0.m13, 0.01F);
      assertEquals(531.8F, matrix4f0.m03, 0.01F);
      assertEquals(693.0F, matrix4f0.m32, 0.01F);
      assertEquals((-919.4643F), matrix4f0.m20, 0.01F);
      assertEquals("(-5.0005665, -Infinity, 17.902617, 43.71144)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(0, 2.0F, (-381.6912F), 2.0F, (-381.6912F), 0.0F, true);
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.98957497F, matrix4f0.m03, 0.01F);
      assertEquals("(0.70895207, 0.0, 0.0, 0.0)", quaternion0.toString());
      assertEquals((-1.0F), matrix4f0.m23, 0.01F);
      assertEquals((-1.0F), matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      Matrix3f matrix3f0 = matrix4f0.toRotationMatrix();
      assertTrue(matrix3f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(976.9F, 976.9F, (-1562.279F), 0.0F, 1928.31F, 0.0F, (-1562.279F), 0.0F, 0.0F, 3165.52F, 0.0F, (-2698.0615F), (-1884.0F), 0.0F, 0.0F, 1.0F);
      Matrix3f matrix3f0 = matrix4f0.toRotationMatrix();
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals((-4.7051269E9F), matrix3f0.determinant(), 0.01F);
      assertEquals(7.7531474E12F, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(1.0F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector3f vector3f0 = new Vector3f(vector2f0, (-1.0F));
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals((-1.0F), matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1511.464F);
      Vector3f vector3f0 = new Vector3f(vector2f0, (-866.0F));
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      assertEquals(1511.464F, matrix4f1.m03, 0.01F);
      assertEquals((-1.97839731E9F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.scale(1.0F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertTrue(matrix4f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum((-2.0F), (-2152.0F), 0.0F, 1307.3956F, 2822.0F, (-4.7369036E-4F), false);
      Matrix4f matrix4f1 = matrix4f0.scale((-92.5F));
      assertEquals((-13.741839F), matrix4f1.determinant(), 0.01F);
      assertEquals((-92.5F), matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(2.0F, 0.0F, 1.0F, 2.0F, 2.0F, 1001.62F, 4329.3F, (-1.0F), (-1.0F));
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      Quaternion quaternion1 = matrix4f0.toRotationQuat();
      assertEquals("(0.22566743, 0.9742039, -4.5015546E-4, -9.0031093E-4)", quaternion1.toString());
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(0.0F, 0.0F, 2.0F, 0.0F, (-23.802729F), (-231.0F), 410.0738F, (-1.0F), 0.017453292F);
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      assertEquals(0.9999999F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleAxis((-360.717F), vector3f0);
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled((-420.6F));
      Quaternion quaternion0 = new Quaternion((-0.055902064F), 0.0F, 0.9999984F, 14.573419F);
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(57.450096F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals((-7.4405984E7F), matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
      assertTrue(matrix4f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Matrix4f matrix4f0 = new Matrix4f(2413.64F, 1536.0F, 0.3760409F, (-2.0F), 784.7331F, 0.4683624F, (-2181.4294F), (-0.8725377F), 1.0F, (-1981.0F), 0.0F, 0.0F, 3598.71F, (-2.0F), (-1.0F), 2.0F);
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertEquals((-5.1974943E10F), matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, true);
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.rotate(0.0F, vector3f0);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertTrue(matrix4f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(0.0F);
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Matrix4f matrix4f1 = matrix4f0.rotate(0.0F, vector3f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f((-5.96046E-8F), (-5.96046E-8F), 308.32F, 768.0F, (-881.5487F), (-5.96046E-8F), 1600.0F, 499.0F, 904.7233F, (-0.35780412F), (-3548.4F), 768.0F, (-322.9F), (-322.9F), 499.0F, (-0.35780412F));
      Vector2f vector2f0 = new Vector2f((-2852.1F), 2665.75F);
      Vector3f vector3f0 = new Vector3f(vector2f0, (-881.5487F));
      Matrix4f matrix4f1 = matrix4f0.rotate(0.02F, vector3f0);
      assertEquals(308.26132F, matrix4f1.m02, 0.01F);
      assertEquals((-5.29094836E11F), matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(4532.0F, 471.97955F, 1.0F, 0.0F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(-0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals((-6.0753775E-4F), matrix4f0.m00, 0.01F);
      assertEquals((-0.2867454F), matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(1.5F, (-1167.9011F), (-2.0F), 964.7047F);
      Matrix4f matrix4f1 = matrix4f0.transpose();
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertFalse(boolean0);
      assertEquals((-0.99586225F), matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(-0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(-0.0F, matrix4f1.m33, 0.01F);
      assertEquals((-19.944706F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector3f vector3f0 = Vector3f.NAN;
      matrix4f0.multNormalAcross(vector3f0);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector3f vector3f0 = new Vector3f((-2.0F));
      Vector3f vector3f1 = matrix4f0.multNormalAcross(vector3f0);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals("(-2.0, -2.0, -2.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      Vector3f vector3f1 = matrix4f0.ZERO.multNormal(vector3f0);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Vector3f vector3f1 = matrix4f0.multNormal(vector3f0);
      assertEquals("(0.0, 1.0, 0.0)", vector3f1.toString());
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, 4054.036F, 1.0F, Float.NaN);
      matrix4f0.multNormal(vector3f0);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(4054.036F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.10413295F, (-837.38F));
      Vector2f vector2f1 = vector2f0.build((-837.38F));
      Vector3f vector3f0 = new Vector3f(vector2f1, (-464.167F));
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      Vector3f vector3f1 = matrix4f0.IDENTITY.multNormal(vector3f0);
      assertEquals((-3.2547632E8F), matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals("(-837.38, -837.38, -464.167)", vector3f1.toString());
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, true);
      Vector4f vector4f0 = Vector4f.ZERO;
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals("(NaN, NaN, NaN, NaN)", vector4f1.toString());
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.rotation(3.1415927F, vector3f0);
      Vector3f vector3f1 = new Vector3f(1.0F, -0.0F, 2476.3745F);
      Vector4f vector4f0 = new Vector4f(vector3f1, 2476.3745F);
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals((-8.742278E-8F), matrix4f0.m02, 0.01F);
      assertEquals("(-0.9997835, 0.0, -2476.3745, 2476.3745)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals("(1.0, 0.0, 0.0, 1.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(1711.129F, 1711.129F, (-5.96046E-8F), (-699.13F), (-1618.1433F), (-1.0F));
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals("(Infinity, -0.0028606984, -0.0012367488, -Infinity)", vector4f1.toString());
      assertEquals(1.0012368F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals((-1.0F), matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-819.33844F), 0.0F);
      Vector2f vector2f1 = vector2f0.build((-693.3F));
      Vector3f vector3f0 = vector2f1.cross(vector2f0);
      Vector4f vector4f0 = new Vector4f((-104.91F));
      Matrix4f matrix4f0 = Matrix4f.rotation(0.0F, vector3f0);
      Vector4f vector4f1 = matrix4f0.mult(vector4f0);
      assertEquals(-0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(-0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals("(-104.91, -104.91, -104.91, -104.91)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = matrix4f0.IDENTITY.mult(vector4f0);
      assertEquals("(0.0, 0.0, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, 4054.036F, 1.0F, Float.NaN);
      Vector4f vector4f0 = Vector4f.COLOR_WHITE;
      matrix4f0.mult(vector4f0);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
      assertEquals(4054.036F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix4f matrix4f0 = Matrix4f.orthographic(1564.7036F, 1464.016F, 1.5707964F, (-2.0F), 0.7853982F, 0.0F);
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals(0.028330805F, matrix4f0.determinant(), 0.01F);
      assertEquals("(30.080359, -0.12019829, 1.0)", vector3f1.toString());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.9996787F, 1416.984F, 707.0594F, 1416.984F);
      Vector3f vector3f0 = new Vector3f(1416.984F, 1416.984F, (-751.73F));
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      Vector3f vector3f1 = matrix4f0.mult(vector3f0);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals("(-1452.8511, 1401.1523, -711.88605)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Matrix4f matrix4f0 = Matrix4f.rotation(quaternion0);
      Matrix4f matrix4f1 = matrix4f0.mult(matrix4f0);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f();
      Matrix4f matrix4f0 = Matrix4f.rotation(matrix3f0);
      Matrix4f matrix4f1 = matrix4f0.ZERO.transpose();
      Matrix4f matrix4f2 = matrix4f0.mult(matrix4f1);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertTrue(matrix4f0.isIdentity());
      assertTrue(matrix4f2.equals((Object)matrix4f1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      Matrix4f matrix4f1 = Matrix4f.fromFrustum(878.0F, 1964.9064F, 1964.9064F, 0.0F, 0.0F, 1.0F, true);
      Matrix4f matrix4f2 = matrix4f0.IDENTITY.mult(matrix4f1);
      assertEquals((-3.7458985E-6F), matrix4f2.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f2.m13, 0.01F);
      assertEquals((-2.6155944F), matrix4f2.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertTrue(matrix4f2.equals((Object)matrix4f1));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.rotation(227.0F, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.mult(1.0F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = matrix4f0.mult(902.8364F);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic((-1.058871F), 0.99999994F, (-0.075075984F), (-0.001166098F), (-12.146829F), (-0.075075984F));
      Matrix4f matrix4f1 = matrix4f0.mult((-2066.0F));
      assertEquals((-2131.1917F), matrix4f1.m13, 0.01F);
      assertEquals((-59.074936F), matrix4f1.m03, 0.01F);
      assertEquals((-2091.6975F), matrix4f1.m23, 0.01F);
      assertEquals((-7.934312E13F), matrix4f1.determinant(), 0.01F);
      assertEquals(-0.0F, matrix4f1.m02, 0.01F);
      assertEquals(-0.0F, matrix4f1.m01, 0.01F);
      assertEquals(-0.0F, matrix4f1.m12, 0.01F);
      assertEquals(-0.0F, matrix4f1.m10, 0.01F);
      assertEquals(-0.0F, matrix4f1.m21, 0.01F);
      assertEquals(-0.0F, matrix4f1.m32, 0.01F);
      assertEquals(-0.0F, matrix4f1.m20, 0.01F);
      assertEquals(-0.0F, matrix4f1.m31, 0.01F);
      assertEquals(-0.0F, matrix4f1.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.fromFrustum((-306.8077F), 0.0F, 0.0F, 2750.8F, 0.0F, 1.0F, false);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals((-1.0F), matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals((-0.22306798F), matrix4f0.m00, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(613.6154F, matrix4f0.m11, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(1787.9012F, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.invert();
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals((-1.1872145F), matrix4f1.determinant(), 0.01F);
      assertEquals(-0.0F, matrix4f1.m31, 0.01F);
      assertEquals(-0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(-0.0F, matrix4f1.m02, 0.01F);
      assertEquals(-0.0F, matrix4f1.m13, 0.01F);
      assertEquals(-0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(-0.0F, matrix4f1.m01, 0.01F);
      assertEquals(-0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(-0.0F, matrix4f1.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(1.0F, 5.96046E-8F, (-1476.0F), 4.893948E-4F, 458.0F, 220.2F);
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      Matrix4f matrix4f1 = Matrix4f.fromAngleAxis(0.0F, vector3f0);
      assertEquals("(1.0000001, 0.99999934, 2.8519764)", vector3f0.toString());
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals((-2.2792485E-5F), matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float float0 = matrix4f0.determinant();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(3066.976F, 1907.1F, 0.0F, 1907.1F, (-0.13812707F), (-3039.5F));
      float float0 = matrix4f0.determinant();
      assertEquals((-1.189933E-9F), float0, 0.01F);
      assertEquals((-1.000091F), matrix4f0.m23, 0.01F);
      assertEquals((-1.0F), matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(4.2884545F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f((-2582.59F), 0.0F, (-900), 0.98F, (-0.416147F), (-409.40533F), 0.02F, 0.0F, 0.84147096F, 634.9391F, (-0.72521746F), 0.0F, 2.0F, (-0.416147F), 0.0F, 0.0F);
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertEquals((-806242.9F), matrix4f1.m33, 0.01F);
      assertEquals((-78.66919F), matrix4f1.m23, 0.01F);
      assertEquals((-1.72963344E8F), matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = matrix4f0.add(matrix4f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.add(matrix4f0);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(2.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(16.0F, matrix4f1.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F);
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      Quaternion quaternion0 = new Quaternion(0.017453292F, (-2165.91F), (-1559.347F), 0.0F);
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      Matrix4f matrix4f2 = matrix4f0.translate(vector3f0);
      Matrix4f matrix4f3 = matrix4f1.add(matrix4f2);
      assertTrue(matrix4f2.isIdentity());
      assertEquals(0.0F, matrix4f3.m13, 0.01F);
      assertEquals(0.0F, matrix4f3.m23, 0.01F);
      assertEquals((-1.3900611E-17F), matrix4f3.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f3.m03, 0.01F);
      assertEquals(0.0F, matrix4f3.m30, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(0.0F, matrix4f3.m00, 0.01F);
      assertEquals(0.0F, matrix4f3.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.translation((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.scaled((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.rotate((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.rotate(1.0F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.multAcross((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.lookat((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective((-1), (-1), (-1), (-1));
      // Undeclared exception!
      try { 
        matrix4f0.getColumn((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. -1
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.get((float[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.fromAngleNormalAxis((-2327.6F), (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatBuffer((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray((float[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[3];
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector3f vector3f0 = new Vector3f(vector2f0, 0.0F);
      Matrix4f matrix4f0 = Matrix4f.fromAngleAxis(3762.0F, vector3f0);
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.equalIdentity((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      float[] floatArray1 = new float[3];
      floatArray0[2] = floatArray1;
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3 out of bounds for length 3
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[32];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((FloatBuffer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(8);
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatBuffer0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatArray(floatArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.ZERO.fillFloatBuffer((FloatBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      // Undeclared exception!
      try { 
        matrix4f0.IDENTITY.fillFloatBuffer(floatBuffer0, false);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      float[] floatArray0 = new float[13];
      matrix4f0.getColumn(2, floatArray0);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = new float[16];
      matrix4f0.get(floatArray0, true);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[19];
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.get(floatArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[16];
      Matrix4f matrix4f0 = new Matrix4f(floatArray0);
      assertFalse(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.mult((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix3f matrix3f0 = matrix4f0.toRotationMatrix();
      assertEquals(0.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.perspective(Float.NaN, 0.0F, Float.NaN, Float.NaN);
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f1);
      assertEquals((-1.0F), matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, 0.54030234F, 1131.0F, 1.0F, (-0.0015048909F), 1.0F);
      Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.54030234F, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m10, 0.01F);
      assertEquals(1131.0F, matrix4f0.m30, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals((-0.0015048909F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Matrix4f matrix4f0 = new Matrix4f(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.POSITIVE_INFINITY, 0.0F);
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      Matrix4f.equalIdentity(matrix4f1);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f1.m20, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m10, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      Matrix4f.equalIdentity(matrix4f1);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f1.m13, 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 1.0F, Float.NaN, Float.NaN, Float.NaN, 4054.036F, 1.0F, Float.NaN);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertFalse(boolean0);
      assertEquals(4054.036F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Matrix4f matrix4f0 = Matrix4f.translation(vector2f0);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, Float.NaN, 1.0F, 1.0F, 0.0F, 1.0F, 4599.8965F, Float.NaN, 4599.8965F, 1.0F, Float.NaN, Float.NaN, Float.NaN, Float.NaN, 65504.0F, Float.NaN);
      Matrix4f.equalIdentity(matrix4f0);
      assertEquals(4599.8965F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m33, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m01, 0.01F);
      assertEquals(65504.0F, matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m31, 0.01F);
      assertEquals(4599.8965F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Matrix4f.equalIdentity(matrix4f0);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0, 0, 0, 0);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0.0F, 0.0F, 0.0F, 1.0F);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(-0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      boolean boolean0 = Matrix4f.equalIdentity(matrix4f0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Matrix4f matrix4f1 = matrix4f0.IDENTITY.translate(vector2f0);
      boolean boolean0 = matrix4f1.isIdentity();
      assertTrue(matrix4f0.isIdentity());
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix4f matrix4f0 = Matrix4f.scaled(vector3f0);
      boolean boolean0 = matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      matrix4f0.isIdentity();
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m03, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F);
      matrix4f0.isIdentity();
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      matrix4f0.isIdentity();
      assertEquals(1.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(1.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m01, 0.01F);
      assertEquals(1.0F, matrix4f0.m23, 0.01F);
      assertEquals(1.0F, matrix4f0.m12, 0.01F);
      assertEquals(1.0F, matrix4f0.m00, 0.01F);
      assertEquals(1.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m10, 0.01F);
      assertEquals(1.0F, matrix4f0.m32, 0.01F);
      assertEquals(1.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f0.m20, 0.01F);
      assertEquals(1.0F, matrix4f0.m31, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      boolean boolean0 = matrix4f0.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      boolean boolean0 = matrix4f0.isIdentity();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = new Matrix4f();
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertTrue(boolean0);
      assertTrue(matrix4f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      Vector3f vector3f0 = vector2f0.cross(vector2f1);
      Matrix4f matrix4f1 = Matrix4f.translation(vector3f0);
      Matrix4f matrix4f2 = matrix4f1.transpose();
      boolean boolean0 = matrix4f2.equals(matrix4f0);
      assertEquals(0.0F, matrix4f2.m02, 0.01F);
      assertEquals(1.0F, matrix4f2.determinant(), 0.01F);
      assertEquals(1.0F, matrix4f2.m32, 0.01F);
      assertEquals(0.0F, matrix4f2.m21, 0.01F);
      assertEquals(0.0F, matrix4f2.m10, 0.01F);
      assertEquals(1.0F, matrix4f2.m33, 0.01F);
      assertEquals(0.0F, matrix4f2.m30, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.lookat(vector3f0, vector3f0, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.scale(vector3f0);
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Matrix4f matrix4f0 = Matrix4f.fromAngleNormalAxis(-0.0F, vector3f0);
      Matrix4f matrix4f1 = matrix4f0.translate(vector3f0);
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(1.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = new Matrix4f(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-0.22054805F), 0.0F, 0.0F, 0.0F, 1164.4F, 2.0F, (-1208.4382F), 0.0F);
      matrix4f0.equals(matrix4f1);
      assertEquals(2.0F, matrix4f1.m31, 0.01F);
      assertEquals((-1208.4382F), matrix4f1.m32, 0.01F);
      assertEquals(1164.4F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(1.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals((-0.22054805F), matrix4f1.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Vector3f vector3f0 = new Vector3f(0.0F, 2.0F, 0.0F);
      Matrix4f matrix4f1 = Matrix4f.scaled(vector3f0);
      boolean boolean0 = matrix4f1.equals(matrix4f0);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(2.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = new Matrix4f(0.0F, 0.0F, 0.0F, 0.0F, (-1188.0F), 0.0F, 0.0F, 0.31830987F, (-2173.0F), (-385.0F), 2098.0F, 0.7853982F, 0.0F, (-2173.0F), 0.0F, (-3475.08F));
      matrix4f0.equals(matrix4f1);
      assertEquals((-3475.08F), matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals((-1188.0F), matrix4f1.m10, 0.01F);
      assertEquals(0.31830987F, matrix4f1.m13, 0.01F);
      assertEquals(2098.0F, matrix4f1.m22, 0.01F);
      assertEquals((-2173.0F), matrix4f1.m31, 0.01F);
      assertEquals((-2173.0F), matrix4f1.m20, 0.01F);
      assertEquals((-385.0F), matrix4f1.m21, 0.01F);
      assertEquals(0.7853982F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = new Matrix4f(1.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(1.0F, matrix4f1.m21, 0.01F);
      assertEquals(1.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertEquals(1.0F, matrix4f1.m22, 0.01F);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertFalse(boolean0);
      assertEquals(1.0F, matrix4f1.m03, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(1.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(1.0F, 0.0F, 0.0F, 0.0F);
      Matrix4f matrix4f1 = matrix4f0.transpose();
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m32, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m22, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = new Matrix4f(1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F);
      matrix4f0.equals(matrix4f1);
      assertEquals(1.0F, matrix4f1.m00, 0.01F);
      assertEquals(1.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m33, 0.01F);
      assertEquals(1.0F, matrix4f1.m01, 0.01F);
      assertEquals(1.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(1.0F, matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals(0.0F, matrix4f1.m10, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = Matrix4f.scaled(0.0F);
      boolean boolean0 = matrix4f0.equals(matrix4f1);
      assertFalse(boolean0);
      assertEquals(0.0F, matrix4f1.m31, 0.01F);
      assertEquals(0.0F, matrix4f1.m22, 0.01F);
      assertEquals(0.0F, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m00, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(0.0F, matrix4f1.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix4f matrix4f1 = Matrix4f.perspective(0.0F, 0.0F, 0.0F, 0.0F);
      matrix4f1.equals(matrix4f0);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
      assertEquals(0.0F, matrix4f1.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f1.m11, 0.01F);
      assertEquals(0.0F, matrix4f1.m21, 0.01F);
      assertEquals((-1.0F), matrix4f1.m32, 0.01F);
      assertEquals(0.0F, matrix4f1.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      boolean boolean0 = matrix4f0.equals(matrix4f0);
      assertTrue(matrix4f0.isIdentity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      boolean boolean0 = matrix4f0.equals(vector3f0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      // Undeclared exception!
      try { 
        matrix4f0.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // This matrix cannot be inverted
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[0];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatBuffer0, true);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      Matrix4f matrix4f0 = new Matrix4f(floatArray0);
      assertEquals(0.0F, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[][] floatArray0 = new float[4][0];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.getColumn((-5404), (float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid column index. -5404
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = matrix4f0.getColumn(3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0, 0, 0, 0);
      float[] floatArray0 = matrix4f0.getColumn(0);
      float[] floatArray1 = matrix4f0.getColumn(0, floatArray0);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        matrix4f0.getColumn(1, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(3, 3);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(743.03125F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 743.03125F);
      float float0 = matrix4f0.get(3, 2);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float float0 = matrix4f0.ZERO.get(3, 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(2, 3);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float float0 = matrix4f0.get(2, 2);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(2, 0);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(1, 1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(769.552F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 769.552F);
      float float0 = matrix4f0.get(1, 0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(-0.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.get(0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(0, 2);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.perspective(0, 0, 0, 0);
      float float0 = matrix4f0.get(0, 1);
      assertEquals(Float.NaN, matrix4f0.m00, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m11, 0.01F);
      assertEquals((-1.0F), matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(0, 0);
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.get(8, 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid indices into matrix.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(3, 1);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(2, 1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      float float0 = matrix4f0.get(1, 2);
      assertTrue(matrix4f0.isIdentity());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.get(0, 3);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f(floatArray0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must be of size 16.
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(2);
      // Undeclared exception!
      try { 
        matrix4f0.fillFloatBuffer(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.add((Matrix4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.scale((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.multNormalAcross((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FloatBuffer floatBuffer0 = FloatBuffer.allocate(1550);
      Matrix4f matrix4f0 = new Matrix4f(floatBuffer0);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[31];
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      matrix4f0.fillFloatArray(floatArray0);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Quaternion quaternion0 = matrix4f0.toRotationQuat();
      Matrix4f matrix4f1 = matrix4f0.rotate(quaternion0);
      assertTrue(matrix4f1.isIdentity());
      assertEquals(0.0F, matrix4f1.m12, 0.01F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.orthographic(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      float float0 = matrix4f0.get(1, 3);
      assertEquals(Float.NaN, matrix4f0.m23, 0.01F);
      assertEquals(Float.NaN, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m11, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, matrix4f0.m00, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, matrix4f0.m22, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(Float.NaN, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.ZERO.rotate((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.mult((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Matrix4f matrix4f0 = null;
      try {
        matrix4f0 = new Matrix4f((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Matrix4f matrix4f0 = Matrix4f.lookat(vector3f0, vector3f0, vector3f0);
      matrix4f0.hashCode();
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.translate((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.get((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = matrix4f0.multAcross(vector4f0);
      assertEquals("(0.0, 0.0, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.invert();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      Matrix3f matrix3f0 = Matrix3f.IDENTITY;
      Matrix4f matrix4f1 = matrix4f0.rotate(matrix3f0);
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.multNormal((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Vector3f vector3f0 = matrix4f0.toTranslationVector();
      Matrix4f matrix4f1 = matrix4f0.rotate(0.0F, vector3f0);
      assertEquals(0.0F, matrix4f1.m03, 0.01F);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f1.m13, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation(1182.42F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      // Undeclared exception!
      try { 
        matrix4f0.translate((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      Matrix4f matrix4f1 = matrix4f0.adjoint();
      assertTrue(matrix4f1.equals((Object)matrix4f0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      matrix4f0.toFloatBuffer();
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.IDENTITY;
      float[] floatArray0 = matrix4f0.ZERO.getColumn(1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.rotation((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.fromAngleAxis(2008.2F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Matrix4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      // Undeclared exception!
      try { 
        matrix4f0.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix4f.translation((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector3f", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Matrix4f matrix4f0 = new Matrix4f();
      Matrix4f matrix4f1 = matrix4f0.ZERO.scale(0.0F);
      assertEquals(0.0F, matrix4f1.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f1.m20, 0.01F);
      assertEquals(0.0F, matrix4f1.m02, 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.ZERO;
      float float0 = matrix4f0.determinant();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Matrix4f matrix4f0 = Matrix4f.translation(vector3f0);
      matrix4f0.multLocal(1.0F);
      assertEquals(1.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(1.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Matrix4f matrix4f0 = Matrix4f.scaled(0.0F);
      float[] floatArray0 = new float[13];
      float[] floatArray1 = matrix4f0.getColumn(3, floatArray0);
      assertEquals(13, floatArray1.length);
      assertEquals(0.0F, matrix4f0.m03, 0.01F);
      assertEquals(0.0F, matrix4f0.m02, 0.01F);
      assertEquals(0.0F, matrix4f0.m13, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertEquals(0.0F, matrix4f0.m23, 0.01F);
      assertEquals(0.0F, matrix4f0.m22, 0.01F);
      assertEquals(0.0F, matrix4f0.m00, 0.01F);
      assertEquals(0.0F, matrix4f0.m11, 0.01F);
      assertEquals(1.0F, matrix4f0.m33, 0.01F);
      assertEquals(0.0F, matrix4f0.m10, 0.01F);
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m32, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
      assertEquals(0.0F, matrix4f0.m31, 0.01F);
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }
}
