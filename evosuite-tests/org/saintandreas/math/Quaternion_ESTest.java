/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:41:00 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Matrix4f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Quaternion_ESTest extends Quaternion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1817.0F, 1817.0F, Float.NEGATIVE_INFINITY);
      Quaternion quaternion1 = quaternion0.inverse();
      assertNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.1F, 0.1F, (-1.5707964F), (-1.5707964F), 3.0F, (-1.5707964F), (-1.5707964F), (-1.5707964F), 0.1F);
      Vector3f vector3f0 = Vector3f.NAN;
      quaternion0.mult(vector3f0);
      assertEquals("(0.0, 0.0, -0.4076326, 1.024695)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(0.87758255F, 0.87758255F, 1365.896F);
      Vector3f vector3f0 = new Vector3f((-3543.7258F));
      Quaternion quaternion1 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion2 = quaternion0.nlerp(quaternion1, (-913.69F));
      Quaternion quaternion3 = quaternion2.nlerp(quaternion1, (-2.0F));
      assertEquals((-2.1198635E-5F), quaternion3.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = Quaternion.ZERO;
      Quaternion quaternion2 = quaternion1.nlerp(quaternion0, 0.0F);
      assertEquals(Float.NaN, quaternion2.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = Quaternion.ZERO;
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 0.0F);
      assertEquals(1.0F, quaternion2.w, 0.01F);
      assertNotSame(quaternion2, quaternion0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = Quaternion.fromAngles(0.0F, 0.0F, 1.0F);
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 0.0F);
      assertEquals(0.99999994F, quaternion2.w, 0.01F);
      assertEquals("(0.0, 0.0, 0.47942555, 0.87758255)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 3.0F, 0.0F, 2082.0842F);
      Quaternion quaternion1 = quaternion0.DIRECTION_Z.interpolate(quaternion0, 0.0F);
      Quaternion quaternion2 = quaternion0.nlerp(quaternion0, 2082.0842F);
      Quaternion quaternion3 = Quaternion.slerp(quaternion2, quaternion1, 7703.046F);
      assertEquals(0.0F, quaternion2.z, 0.01F);
      assertEquals("(0.0, -11.098037, 0.0, 1.0083008)", quaternion3.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      Matrix4f matrix4f0 = quaternion1.toRotationMatrix4f();
      assertEquals(0.0F, matrix4f0.m30, 0.01F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(12.490788F, 1.1920929E-7F, 1161.5828F, 0.0F);
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(1.0000001F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.021504011F, matrix4f0.m20, 0.01F);
      assertEquals(0.99976873F, matrix4f0.m22, 0.01F);
      assertEquals(2.0522947E-10F, matrix4f0.m12, 0.01F);
      assertEquals(2.2068835E-12F, matrix4f0.m10, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      Vector3f[] vector3fArray0 = new Vector3f[6];
      quaternion1.toAxes(vector3fArray0);
      assertEquals(6, vector3fArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector3f[] vector3fArray0 = new Vector3f[5];
      quaternion0.DIRECTION_Z.toAxes(vector3fArray0);
      assertEquals("(0.0, 0.0, 0.0, 1.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(381.85F, (-1.5707964F), 381.85F, 381.85F);
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(381.85F, (-1.5707964F), 381.85F, 381.85F);
      Quaternion quaternion1 = quaternion0.build((-1.5707964F));
      Quaternion quaternion2 = Quaternion.slerp(quaternion1, quaternion1, 381.85F);
      assertEquals("(-1.5707964, -1.5707964, -1.5707964, -1.5707964)", quaternion2.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.5707964F, 0.7853982F, (-2387.5757F), (-2387.5757F));
      Quaternion quaternion1 = Quaternion.slerp(quaternion0, quaternion0, 0.02F);
      assertSame(quaternion1, quaternion0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.02F, 231.0758F, (-553.1896F), 0.02F, 231.0758F, Float.POSITIVE_INFINITY, 80.19326F, 80.19326F, 57.295776F);
      Quaternion quaternion1 = Quaternion.ZERO;
      Quaternion quaternion2 = quaternion1.slerp(quaternion0, 0.0F);
      assertEquals("(-Infinity, -18.616297, -6.791159, 8.505757)", quaternion0.toString());
      assertEquals(0.0F, quaternion2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Quaternion quaternion1 = Quaternion.fromMatrix3f(1.0F, (-0.15308917F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1128.443F), (-1530.1206F));
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, (-2.0F));
      assertEquals("(39.14231, -0.003911092, 0.0, -25.829239)", quaternion2.toString());
      assertEquals(0.0F, quaternion1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      float float0 = quaternion0.norm();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.1F, 0.1F, (-1.5707964F), (-1.5707964F), 3.0F, (-1.5707964F), (-1.5707964F), (-1.5707964F), 0.1F);
      Quaternion quaternion1 = quaternion0.nlerp(quaternion0, 1.024695F);
      assertEquals("(0.0, 0.0, -0.4076326, 1.024695)", quaternion0.toString());
      assertEquals("(0.0, 0.0, -0.36963475, 0.92917717)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[6];
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      vector3fArray0[0] = vector3f0;
      Vector3f vector3f1 = new Vector3f((-2600.91F));
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0[0], vector3f1, vector3f1);
      Quaternion quaternion1 = quaternion0.nlerp(quaternion0, 0.0F);
      assertEquals("(0.8166012, -0.40806514, -0.40822208, 0.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector3f vector3f0 = new Vector3f(vector2f0, (-14.414619F));
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertEquals("(0.0, 0.0, -14.414619)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(381.85F, (-1.5707964F), 381.85F, 381.85F);
      Vector2f vector2f0 = new Vector2f(381.85F, (-1.5707964F));
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Vector3f vector3f0 = new Vector3f((-1171.336F), (-5517.0F), 3.0F);
      Vector3f vector3f1 = quaternion0.mult(vector3f0);
      assertEquals("(-1171.336, -5517.0, 3.0)", vector3f1.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1419.348F), (-1.0F), 1.5707964F, 1880.701F);
      Quaternion quaternion1 = quaternion0.inverse();
      assertNotNull(quaternion1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.5707964F);
      Quaternion quaternion2 = quaternion1.build(floatArray0);
      Quaternion quaternion3 = quaternion2.mult(quaternion1);
      assertEquals("(-5.3213566E-4, -4.4444954E-7, -2.8294536E-7, 4.0159796E-4)", quaternion3.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleAxis(1.0F, vector3f0);
      Quaternion quaternion1 = quaternion0.ZERO.mult(quaternion0);
      assertEquals("(0.0, 0.0, 0.0, 0.0)", quaternion1.toString());
      assertEquals("(0.0, 0.0, 0.47942555, 0.87758255)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(3.0F, vector3f0);
      quaternion0.isIdentity();
      assertEquals(0.0707372F, quaternion0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.1F, 1.0F, 0.1F, 1.0F);
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals("(-0.04950495, -0.4950495, -0.04950495, 0.4950495)", quaternion1.toString());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, 1.1920929E-7F);
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals("(NaN, NaN, NaN, 0.0)", quaternion1.toString());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = quaternion0.IDENTITY.inverse();
      assertNotNull(quaternion1);
      assertEquals("(-0.0, -0.0, -0.0, 1.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1.5707964F, 0.7853982F, (-2387.5757F), (-2387.5757F));
      Quaternion quaternion1 = quaternion0.inverse();
      assertEquals("(-1.3777661E-7, -6.8888305E-8, 2.094174E-4, -2.094174E-4)", quaternion1.toString());
      assertNotNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-312.59085F), 1.0F, 1.0F, (-312.59085F));
      Quaternion quaternion1 = quaternion0.DIRECTION_Z.subtract((-312.59085F));
      Vector3f vector3f0 = quaternion1.getRotationColumn(0);
      assertEquals("(-623.6815, 625.6807, -0.99920654)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Matrix3f matrix3f0 = new Matrix3f(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals("(0.0, 0.35355338, -0.35355338, 0.70710677)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(1.0E-4F, (-86.8F), 2.0F, 3.0F, (-86.8F), 1.0F, 0.0F, (-86.8F), 1.0F);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals("(0.10611914, -4.552511, 4.711685, 4.7647495)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f(0.017453292F, 0.87758255F, 0.87758255F, 0.0F, (-2766.0F), 0.5F, (-2912.75F), 0.87758255F, 680.35834F);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      assertEquals("(-24.797062, 0.011731284, 29.357029, -0.0074733594)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals("(0.0, 0.0, 0.0, 0.5)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(1.0F, (-0.15308917F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1128.443F), (-1530.1206F));
      Vector3f vector3f0 = quaternion0.getRotationColumn(0);
      assertEquals(0.0F, quaternion0.z, 0.01F);
      assertEquals("(0.9999997, -0.0031491262, -0.0023194058)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_X;
      Vector3f[] vector3fArray0 = new Vector3f[7];
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals("(0.0, 0.35355338, -0.35355338, 0.70710677)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Vector3f[] vector3fArray0 = new Vector3f[8];
      Vector2f vector2f0 = new Vector2f((-639.0387F));
      Vector3f vector3f1 = new Vector3f(vector2f0);
      vector3fArray0[0] = vector3f1;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals("(0.019763637, 0.039527275, 12.649493, -12.649492)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.5F);
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      assertEquals("(0.0, 0.0, 0.0, 0.7905694)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = quaternion0.IDENTITY.mult(quaternion0);
      assertEquals("(-0.35355338, 0.0, 0.35355338, 0.70710677)", quaternion1.toString());
      assertEquals(0.0F, quaternion0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-3543.7258F));
      Vector3f vector3f1 = new Vector3f((-2600.91F));
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f1, vector3f1, vector3f0);
      Quaternion quaternion1 = quaternion0.nlerp(quaternion0, (-2.0F));
      assertEquals("(-0.5879754, 0.4006697, -0.6945444, -0.10656894)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-1.0F), vector3f0);
      assertEquals("(-0.47942555, -0.47942555, -0.47942555, 0.87758255)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.5F);
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-988.5F), vector3f0);
      assertEquals("(0.4260418, 0.4260418, 0.4260418, -0.5234057)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_XYZ;
      Quaternion quaternion0 = Quaternion.fromAngleAxis((-632.4F), vector3f0);
      float[] floatArray0 = new float[8];
      // Undeclared exception!
      try { 
        quaternion0.ZERO.toAngles(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Angles array must have three elements
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1L), 3.0F, (-1L));
      Quaternion quaternion0 = Quaternion.fromAngleAxis(0.31830987F, vector3f0);
      assertEquals("(-0.047784686, 0.14335406, -0.047784686, 0.98736155)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1.5707964F, 1.5707964F, 1.5707964F);
      float[] floatArray0 = new float[4];
      floatArray0[2] = 1.5707964F;
      quaternion0.build(floatArray0);
      assertEquals("(0.70710677, 0.70710677, 0.0, 0.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[4];
      Vector3f vector3f0 = Vector3f.ZERO;
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      float[] floatArray0 = new float[8];
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      Quaternion quaternion1 = quaternion0.IDENTITY.build(floatArray0);
      assertEquals("(0.0, 0.0, -Infinity, 0.0)", quaternion1.toString());
      assertEquals("(0.0, 0.0, 0.0, 0.5)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1.5707964F, 1.5707964F, 1.5707964F);
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.70710677F;
      quaternion0.build(floatArray0);
      assertEquals(0.70710677F, quaternion0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[4];
      Vector3f vector3f0 = Vector3f.ZERO;
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3f0;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      float[] floatArray0 = new float[8];
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      Quaternion quaternion1 = quaternion0.IDENTITY.build(floatArray0);
      assertEquals("(0.0, 0.0, 0.0, 0.5)", quaternion0.toString());
      assertEquals("(0.0, -Infinity, 0.0, 0.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1.5707964F, 1.5707964F, 1.5707964F);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.5707964F;
      quaternion0.build(floatArray0);
      assertEquals("(0.70710677, 0.70710677, 0.0, 0.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromAngles(1.5707964F, 1.5707964F, 1.5707964F);
      float[] floatArray0 = new float[4];
      floatArray0[3] = 0.70710677F;
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      assertEquals("(0.70710677, 0.70710677, 0.0, 0.0)", quaternion0.toString());
      assertEquals("(0.0, 0.0, 0.0, 0.70710677)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-1419.348F), (-1.0F), 1.5707964F, 1880.701F);
      float[] floatArray0 = new float[9];
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      Quaternion quaternion2 = quaternion1.mult(quaternion0);
      assertEquals("(Infinity, Infinity, -Infinity, -Infinity)", quaternion2.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.02F, vector3f0);
      Quaternion quaternion1 = quaternion0.build((-145.3095F), Float.NaN, 0.0F, 27.180895F);
      assertEquals("(-145.3095, NaN, 0.0, 27.180895)", quaternion1.toString());
      assertEquals("(0.0, 0.0, 0.009999833, 0.99995)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Quaternion quaternion1 = quaternion0.build(3.0F, (-3550.7F), (-2580.0F), (-566.29034F));
      assertEquals("(3.0, -3550.7, -2580.0, -566.29034)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = quaternion0.build(0.0F, 1.0F, 1757.9111F, (-1.5707964F));
      assertEquals("(0.0, 1.0, 1757.9111, -1.5707964)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      Quaternion quaternion1 = quaternion0.build((-5.96046E-8F), 1395.0F, 4.29077402E9F, 0.0F);
      assertEquals(1.0F, quaternion0.w, 0.01F);
      assertEquals("(-5.96046E-8, 1395.0, 4.29077402E9, 0.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.DIRECTION_Z;
      Quaternion quaternion1 = quaternion0.build((-14.476347F), 0.0F, (-2583.047F), (-566.29034F));
      assertEquals("(-14.476347, 0.0, -2583.047, -566.29034)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.build(0.0F);
      assertEquals("(0.0, 0.0, 0.0, 0.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.build(0.02F);
      assertEquals("(0.02, 0.02, 0.02, 0.02)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertEquals("(0.0, 0.0, 0.0, 0.5)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3f vector3f0 = Vector3f.ZERO;
      Matrix3f matrix3f0 = new Matrix3f(3.1415927F, vector3f0);
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertEquals("(0.0, 0.0, 0.70710677, 0.0)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(0.0F, 3.0F, 0.0F, 2082.0842F);
      Matrix3f matrix3f0 = new Matrix3f(0.5F, 0.0F, 2082.0842F, (-393.0F), 0.017453292F, 0.0F, (-2072.51F), 0.0F, 0.0F);
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertEquals("(-478.5487, 3511069.8, -332126.25, -3776.564)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f[] vector3fArray0 = new Vector3f[0];
      // Undeclared exception!
      try { 
        quaternion0.toAxes(vector3fArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        Quaternion.slerp(quaternion0, (Quaternion) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.slerp((Quaternion) null, (-181.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.nlerp((Quaternion) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      // Undeclared exception!
      try { 
        quaternion0.mult((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromMatrix3f((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[0];
      // Undeclared exception!
      try { 
        Quaternion.fromAxes(vector3fArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAxes((Vector3f) null, (Vector3f) null, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAngleNormalAxis(1.0F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Quaternion.fromAngleAxis(0.0F, (Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.apply((Matrix3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.0F, vector3f0);
      Quaternion quaternion1 = quaternion0.slerp(quaternion0, 2.0F);
      assertEquals(1.0F, quaternion1.w, 0.01F);
      assertSame(quaternion1, quaternion0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F);
      Vector3f vector3f0 = new Vector3f(vector2f0, (-2.0F));
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis((-1083.84F), vector3f0);
      assertEquals("(-0.0, -0.0, 1.9999775, 0.0047498164)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Y;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(0.7853982F, vector3f0);
      assertEquals("(0.0, 0.38268346, 0.0, 0.9238795)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      float float0 = quaternion0.norm();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.ZERO.inverse();
      assertNull(quaternion1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = Quaternion.fromAngles(259.48187F, 1.0F, 259.48187F);
      Quaternion quaternion2 = quaternion0.nlerp(quaternion1, 0.64810365F);
      assertEquals("(-0.5691469, -0.647588, -0.16699223, 0.47834626)", quaternion2.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1664.357F, 1102.1553F, 1102.1553F, (-83.8611F));
      Vector2f vector2f0 = new Vector2f();
      Vector3f vector3f0 = new Vector3f(vector2f0);
      Quaternion quaternion1 = Quaternion.fromAngleNormalAxis((-1.5707964F), vector3f0);
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 1664.357F);
      assertEquals("(-2768420.0, -1833277.8, -1833277.8, 137826.6)", quaternion2.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.IDENTITY.add(quaternion0);
      Quaternion quaternion2 = quaternion0.slerp(quaternion1, 0.0F);
      assertNotSame(quaternion2, quaternion0);
      assertEquals(1.0F, quaternion2.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = Quaternion.fromAngles(0.0F, 1.0F, 0.0F);
      quaternion0.slerp(quaternion1, Float.POSITIVE_INFINITY);
      assertEquals("(0.0, 0.47942555, 0.0, 0.87758255)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Quaternion quaternion1 = Quaternion.slerp(quaternion0, quaternion0, 0.0F);
      assertSame(quaternion1, quaternion0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, (-1425.055F), 0.0F);
      Quaternion quaternion0 = Quaternion.fromAngleAxis(0.0F, vector3f0);
      assertEquals("(0.0, -0.0, 0.0, 1.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleAxis(607.86176F, vector3f0);
      assertEquals("(NaN, NaN, NaN, -0.6941127)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Vector3f vector3f0 = quaternion0.getRotationColumn(2);
      assertEquals(Float.NaN, vector3f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3f vector3f0 = quaternion0.getRotationColumn(0);
      assertEquals("(1.0, 0.0, 0.0)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-3505.0F), 2038.9902F, 0.0F, (-2501.067F), Float.NEGATIVE_INFINITY, (-2501.067F), Float.POSITIVE_INFINITY, 0.0F, (-1376.183F));
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      // Undeclared exception!
      try { 
        quaternion0.getRotationColumn((-103));
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class java.util.logging.LogRecord$CallerFinder
         //
         verifyException("java.util.logging.LogRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector3f vector3f0 = quaternion0.getRotationColumn(1);
      assertEquals("(0.0, 1.0, 0.0)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(0.0F, matrix4f0.m21, 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m12, 0.01F);
      assertTrue(matrix4f0.isIdentity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      Matrix4f matrix4f0 = quaternion0.toRotationMatrix4f();
      assertEquals(1.0F, matrix4f0.determinant(), 0.01F);
      assertEquals(0.0F, matrix4f0.m01, 0.01F);
      assertEquals(0.0F, matrix4f0.m20, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Matrix3f matrix3f0 = Matrix3f.ZERO;
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      Matrix3f matrix3f1 = quaternion0.toRotationMatrix();
      assertEquals("(0.0, 0.0, 0.0, 0.5)", quaternion0.toString());
      assertTrue(matrix3f1.isIdentity());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Matrix3f matrix3f0 = quaternion0.toRotationMatrix();
      assertEquals(1.0F, matrix3f0.determinant(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleAxis((-1.5707964F), vector3f0);
      float[] floatArray0 = quaternion0.toAngles((float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.5707964F)}, floatArray0, 0.01F);
      assertEquals(-0.0F, quaternion0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        quaternion0.toAngles(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Angles array must have three elements
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      float[] floatArray0 = quaternion0.toAngles((float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      float[] floatArray0 = new float[3];
      float[] floatArray1 = quaternion0.toAngles(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.5707964F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1921.1752F));
      assertEquals(21.921309F, quaternion0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f((-1774.21F), (-1774.21F), (-1774.21F), (-1774.21F), (-3668.78F), (-6.791159F), (-3668.78F), (-6.791159F), (-3668.78F));
      assertEquals("(37.297287, -23.784706, -36.48382, 0.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(1.5707964F, (-731.414F), (-731.414F), (-731.414F), (-731.414F), 1.5707964F, (-731.414F), 1.5707964F, 1.5707964F);
      assertEquals(13.531574F, quaternion0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[3];
      Vector3f vector3f0 = new Vector3f((-3673.2F));
      vector3fArray0[0] = vector3f0;
      vector3fArray0[1] = vector3f0;
      vector3fArray0[2] = vector3fArray0[1];
      Quaternion quaternion0 = Quaternion.fromAxes(vector3fArray0);
      assertEquals("(-60.59868, -60.59868, 30.30759, 0.0)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Quaternion quaternion0 = Quaternion.fromAngleAxis(1.0F, vector3f0);
      Quaternion quaternion1 = Quaternion.IDENTITY;
      Quaternion quaternion2 = Quaternion.slerp(quaternion1, quaternion1, 0.47942555F);
      Quaternion quaternion3 = quaternion0.slerp(quaternion2, 0.7853982F);
      assertEquals("(0.0, 0.0, 0.107095115, 0.99424875)", quaternion3.toString());
      assertSame(quaternion2, quaternion1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Quaternion quaternion1 = quaternion0.build((-1.0F));
      float[] floatArray0 = quaternion1.toAngles((float[]) null);
      assertArrayEquals(new float[] {0.0F, (-4.712389F), 1.5707964F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      // Undeclared exception!
      try { 
        quaternion0.mult((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.DIRECTION_Z.isIdentity();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      // Undeclared exception!
      try { 
        quaternion0.ZERO.toAxes((Vector3f[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion(1664.357F, 1102.1553F, 1102.1553F, (-83.8611F));
      Matrix3f matrix3f0 = new Matrix3f(0.74999994F, 1664.357F, (-364.75146F), 1102.1553F, 193.6891F, 513.55383F, (-419.78027F), (-3339.9F), 1664.357F);
      Quaternion quaternion1 = quaternion0.apply(matrix3f0);
      assertEquals("(31747.402, -14680.809, 74615.3, 79031.71)", quaternion1.toString());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAxes(vector3f0, vector3f0, vector3f0);
      Quaternion quaternion1 = Quaternion.slerp(quaternion0, quaternion0, Float.POSITIVE_INFINITY);
      assertFalse(quaternion1.equals((Object)quaternion0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vector3f[] vector3fArray0 = new Vector3f[3];
      // Undeclared exception!
      try { 
        Quaternion.fromAxes(vector3fArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Quaternion", e);
      }
  }
}
