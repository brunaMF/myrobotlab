/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:38:28 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector2f_ESTest extends Vector2f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      boolean boolean0 = vector2f0.equals(vector2f1);
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1095.9F);
      Vector2f vector2f1 = vector2f0.inverse();
      Vector2f vector2f2 = vector2f0.UNIT_Y.scaleAdd(1095.9F, vector2f1);
      boolean boolean0 = vector2f0.equals(vector2f2);
      assertEquals("(9.12492E-4, 1095.9009)", vector2f2.toString());
      assertEquals("(9.12492E-4, 9.12492E-4)", vector2f1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = vector2f0.build(Float.NaN);
      assertEquals("(NaN, NaN)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1095.9F);
      float float0 = vector2f0.smallestAngleBetween(vector2f0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("(1095.9, 1095.9)", vector2f0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = vector2f0.build((-1.0F));
      Vector2f vector2f2 = Vector2f.interpolate(vector2f1, vector2f1, 0.0F);
      assertEquals("(-1.0, -1.0)", vector2f2.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 0.0F);
      assertEquals("(0.0, 0.0)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1095.9F);
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, (-1233.253F));
      assertEquals("(1095.9, 1095.9)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      float float0 = vector2f0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F);
      Vector2f vector2f1 = vector2f0.build((-1.0F));
      float float0 = vector2f1.getY();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals("(-1.0, -1.0)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-857.81396F));
      Vector2f vector2f1 = vector2f0.UNIT_Y.negate();
      float float0 = vector2f1.getX();
      assertEquals("(-857.81396, -857.81396)", vector2f0.toString());
      assertEquals(-0.0F, float0, 0.01F);
      assertEquals("(-0.0, -1.0)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = vector2f0.UNIT_XY.add((-2682.6F));
      float float0 = vector2f1.getX();
      assertEquals("(-2681.6, -2681.6)", vector2f1.toString());
      assertEquals((-2681.6F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F, 0.0F);
      float float0 = vector2f0.getAngle();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = vector2f0.UNIT_XY.scaleAdd((-777.9F), vector2f0);
      float float0 = vector2f1.getAngle();
      assertEquals((-777.9F), vector2f1.x, 0.01F);
      assertEquals((-2.3561945F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector2f vector2f1 = new Vector2f(1.0F, 1.0F);
      float float0 = vector2f0.determinant(vector2f1);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, vector2f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F);
      Vector2f vector2f1 = vector2f0.normalize();
      Vector3f vector3f0 = vector2f0.cross(vector2f1);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
      assertEquals("(0.0, 0.0, NaN)", vector3f0.toString());
      assertEquals("(NaN, NaN)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      float[] floatArray0 = new float[6];
      floatArray0[0] = 25.5079F;
      Vector2f vector2f1 = vector2f0.build(floatArray0);
      assertEquals("(25.5079, 0.0)", vector2f1.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-857.81396F));
      float[] floatArray0 = vector2f0.toArray();
      Vector2f vector2f1 = vector2f0.build(floatArray0);
      assertEquals("(-857.81396, -857.81396)", vector2f1.toString());
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2f vector2f1 = vector2f0.UNIT_X.negate();
      float float0 = vector2f1.angleBetween(vector2f0);
      assertEquals(3.1415927F, float0, 0.01F);
      assertEquals((-1.0F), vector2f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F, 0.0F);
      float float0 = vector2f0.UNIT_Y.angleBetween(vector2f0);
      assertEquals((-1.5707964F), float0, 0.01F);
      assertEquals(0.0F, vector2f0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        vector2f0.smallestAngleBetween((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        Vector2f.interpolate(vector2f0, (Vector2f) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        vector2f0.determinant((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector2f", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        vector2f0.cross((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector2f", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        vector2f0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector2f", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        vector2f0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Vector2f", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      // Undeclared exception!
      try { 
        vector2f0.UNIT_XY.angleBetween((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector2f", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F, 0.0F);
      float float0 = vector2f0.determinant(vector2f0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("(0.0, 0.0)", vector2f0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-4540.5845F));
      Vector2f vector2f1 = Vector2f.UNIT_Y;
      float float0 = vector2f0.determinant(vector2f1);
      assertEquals((-4540.5845F), vector2f0.y, 0.01F);
      assertEquals((-4540.5845F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      Vector2f vector2f1 = vector2f0.UNIT_Y.project(vector2f0);
      Vector3f vector3f0 = vector2f1.cross(vector2f0);
      assertEquals(0.1F, vector2f0.y, 0.01F);
      assertEquals("(0.0, 0.0, -4.656613E-10)", vector3f0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      float[] floatArray0 = new float[7];
      floatArray0[1] = 1698.1F;
      Vector2f vector2f1 = vector2f0.build(floatArray0);
      Vector2f vector2f2 = vector2f1.build(0.0F);
      boolean boolean0 = vector2f1.equals(vector2f2);
      assertFalse(vector2f2.equals((Object)vector2f0));
      assertFalse(vector2f0.equals((Object)vector2f2));
      assertEquals("(0.0, 0.0)", vector2f2.toString());
      assertFalse(vector2f2.equals((Object)vector2f1));
      assertEquals("(0.0, 1698.1)", vector2f1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = Vector2f.UNIT_XY;
      boolean boolean0 = vector2f0.equals(vector2f1);
      assertFalse(vector2f1.equals((Object)vector2f0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Object object0 = new Object();
      boolean boolean0 = vector2f0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      boolean boolean0 = vector2f0.equals(vector2f0);
      assertEquals("(-1.3306386, 0.1)", vector2f0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      float float0 = vector2f0.UNIT_Y.smallestAngleBetween(vector2f0);
      assertEquals(1.4706289F, float0, 0.01F);
      assertEquals((-1.3306386F), vector2f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      String string0 = vector2f0.toString();
      assertEquals("(1.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_X;
      float float0 = vector2f0.getX();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      Vector2f vector2f1 = Vector2f.interpolate(vector2f0, vector2f0, 0.1F);
      boolean boolean0 = vector2f0.equals(vector2f1);
      assertEquals("(-1.3306386, 0.1)", vector2f0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      float float0 = vector2f0.getY();
      assertEquals(0.1F, float0, 0.01F);
      assertEquals("(-1.3306386, 0.1)", vector2f0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      float float0 = vector2f0.getAngle();
      assertEquals(3.0665817F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      float float0 = vector2f0.angleBetween(vector2f0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-1.3306386F), 0.1F);
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      assertEquals("(0.0, 0.0, 0.0)", vector3f0.toString());
      assertEquals("(-1.3306386, 0.1)", vector2f0.toString());
  }
}
