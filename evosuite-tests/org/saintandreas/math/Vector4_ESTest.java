/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:36:13 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4_ESTest extends Vector4_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.fromMatrix3f(2207.009F, 1838.568F, 1838.568F, (-2037.1935F), 0.0F, 1838.568F, 0.0F, 23.788F, (-1080.006F));
      float float0 = quaternion0.get(3);
      assertEquals("(-27.017105, 27.371244, -57.69948, 16.79288)", quaternion0.toString());
      assertEquals(16.79288F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      float float0 = vector4f0.get(2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = vector4f0.build(Float.NaN);
      float float0 = vector4f1.get(1);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      float float0 = vector4f0.get(0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      float float0 = vector4f0.getX();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      String string0 = vector4f0.toString();
      assertEquals("(NaN, NaN, NaN, NaN)", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion();
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = vector4f0.build(0.0F);
      boolean boolean0 = vector4f1.equals(quaternion0);
      assertEquals("(0.0, 0.0, 0.0, 1.0)", quaternion0.toString());
      assertFalse(boolean0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(857.3148F, vector3f0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      Quaternion quaternion1 = quaternion0.build(floatArray0);
      Vector4f vector4f0 = new Vector4f(Float.NEGATIVE_INFINITY);
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      boolean boolean0 = vector4f1.equals(quaternion1);
      assertEquals("(-Infinity, -Infinity, -Infinity, 0.16917008)", quaternion0.toString());
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertEquals("(-Infinity, 0.0, 0.0, 0.0)", vector4f1.toString());
      assertTrue(boolean0);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = vector4f0.build(0.0F);
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(boolean0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      Vector4f vector4f1 = Vector4f.ZERO;
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(boolean0);
      assertFalse(vector4f1.equals((Object)vector4f0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(857.3148F, vector3f0);
      Vector2f vector2f0 = new Vector2f(0.33333334F);
      Vector4f vector4f0 = new Vector4f(vector2f0, 1.0F, Float.NEGATIVE_INFINITY);
      boolean boolean0 = vector4f0.equals(quaternion0);
      assertFalse(boolean0);
      assertEquals("(0.33333334, 0.33333334, 1.0, -Infinity)", vector4f0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, 0.0F, 0.0F);
      Vector4f vector4f0 = new Vector4f(vector3f0);
      float float0 = vector4f0.getZ();
      assertEquals("(0.0, 0.0, 0.0, 1.0)", vector4f0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f(0.0F, 0.0F, (-3242.0F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      float float0 = vector4f0.getZ();
      assertEquals("(0.0, 0.0, -3242.0, 1.0)", vector4f0.toString());
      assertEquals((-3242.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Vector4f vector4f0 = new Vector4f(vector3f0, 0.16917008F);
      Vector4f vector4f1 = vector4f0.build(1700.78F, 1442.02F, 0.0F, (-1046.3163F));
      float float0 = vector4f1.getY();
      assertEquals(1442.02F, float0, 0.01F);
      assertEquals("(1700.78, 1442.02, 0.0, -1046.3163)", vector4f1.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float float0 = vector4f0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float float0 = vector4f0.getX();
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.getW();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F, (-2231.8652F));
      float float0 = vector4f0.getW();
      assertEquals((-2231.8652F), float0, 0.01F);
      assertEquals("(0.0, 1.0, 0.0, -2231.8652)", vector4f0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      float float0 = vector4f0.get(2);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f0 = Vector4f.UNIT_W;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, 0.0, -Infinity, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = Float.NaN;
      Vector4f vector4f0 = Vector4f.UNIT_W;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, NaN, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f0 = new Vector4f(Float.NEGATIVE_INFINITY);
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, -Infinity, 0.0, 0.0)", vector4f1.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.0F, (-2058.7544F), (-1514.627F), (-2525.847F));
      float[] floatArray0 = new float[6];
      floatArray0[0] = 61.0F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, -2058.7544, -1514.627, -2525.847)", vector4f0.toString());
      assertEquals("(61.0, 0.0, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      float[] floatArray0 = vector4f0.toArray();
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals("(0.0, 0.0, 1.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.0F, (-2058.7544F), (-1514.627F), (-2525.847F));
      float[] floatArray0 = new float[6];
      floatArray0[3] = 37.957085F;
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, -2058.7544, -1514.627, -2525.847)", vector4f0.toString());
      assertEquals("(0.0, 0.0, 0.0, 37.957085)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      Vector4f vector4f0 = new Vector4f(Float.NEGATIVE_INFINITY);
      Vector4f vector4f1 = vector4f0.build(floatArray0);
      assertEquals("(0.0, 0.0, 0.0, -Infinity)", vector4f1.toString());
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = vector4f0.build(0.0F);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.build(Float.NaN);
      assertEquals(Float.NaN, vector4f1.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(1.5707964F, 0.0F);
      Vector4f vector4f0 = new Vector4f(vector2f0, (-2687.5F));
      Vector4f vector4f1 = vector4f0.build((-203.88F));
      float float0 = vector4f1.getY();
      assertEquals("(1.5707964, 0.0, -2687.5, 1.0)", vector4f0.toString());
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
      assertEquals((-203.88F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      Vector4f vector4f1 = Vector4f.UNIT_W;
      float float0 = vector4f0.angleBetween(vector4f1);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      float float0 = vector4f0.get(3);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(857.3148F, vector3f0);
      // Undeclared exception!
      try { 
        quaternion0.get((-4813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // index must be either 0, 1, 2 or 3
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NEGATIVE_INFINITY;
      Quaternion quaternion0 = Quaternion.fromAngleNormalAxis(857.3148F, vector3f0);
      float float0 = quaternion0.get(0);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      assertEquals("(-Infinity, -Infinity, -Infinity, 0.16917008)", quaternion0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = Vector4f.UNIT_X;
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector2f vector2f0 = Vector2f.UNIT_X;
      Vector4f vector4f1 = new Vector4f(vector2f0, 1.0F, 1.0F);
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertEquals("(1.0, 0.0, 1.0, 1.0)", vector4f1.toString());
      assertFalse(vector4f1.equals((Object)vector4f0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Z;
      Vector4f vector4f1 = Vector4f.COLOR_GREEN;
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      Vector4f vector4f1 = Vector4f.POSITIVE_INFINITY;
      boolean boolean0 = vector4f0.equals(vector4f1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      Object object0 = new Object();
      boolean boolean0 = vector4f0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(Float.NEGATIVE_INFINITY);
      boolean boolean0 = vector4f0.equals(vector4f0);
      assertTrue(boolean0);
      assertEquals(Float.NEGATIVE_INFINITY, vector4f0.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      // Undeclared exception!
      try { 
        vector4f0.angleBetween((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      float float0 = vector4f0.getZ();
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      float float0 = vector4f0.getW();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        vector4f0.build(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      // Undeclared exception!
      try { 
        vector4f0.build((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      float float0 = vector4f0.getY();
      assertEquals(0.0F, float0, 0.01F);
  }
}
