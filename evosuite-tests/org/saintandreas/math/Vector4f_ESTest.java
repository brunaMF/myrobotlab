/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:37:19 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector4f_ESTest extends Vector4f_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(1.5707964F);
      assertEquals(1.5707964F, vector4f0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.ZERO;
      Vector3f vector3f0 = vector2f0.cross(vector2f0);
      Vector4f vector4f0 = new Vector4f(vector3f0);
      Vector4f vector4f1 = vector4f0.build(0.0F, (-845.03973F), 1.0F, 630.83F);
      assertEquals("(0.0, -845.03973, 1.0, 630.83)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector4f vector4f1 = vector4f0.build((-2613.0F), 1202.0999F, 0.0F, Float.NaN);
      assertEquals("(-2613.0, 1202.0999, 0.0, NaN)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = vector4f0.build(1.0F, 0.0F, 1.0F, 1.0F);
      assertEquals("(1.0, 0.0, 1.0, 1.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector4f vector4f0 = new Vector4f(vector3f0, (-2210.6729F));
      Vector4f vector4f1 = vector4f0.build(4679.0615F, 0.0F, (-574.5569F), (-2210.6729F));
      assertEquals("(4679.0615, 0.0, -574.5569, -2210.6729)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.build(0.0F);
      assertEquals(0.0F, vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.UNIT_Z;
      Vector4f vector4f0 = new Vector4f(vector3f0, (-2210.6729F));
      Vector4f vector4f1 = vector4f0.build((-1921.3618F));
      assertEquals((-1921.3618F), vector4f1.z, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F);
      assertEquals(1.0F, vector4f0.getW(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f(0.0F, 0.0F, 1205.54F, (-1.5707964F));
      assertEquals(0.0F, vector4f0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector4f vector4f0 = new Vector4f(vector2f0, 0.0F, 0.0F);
      assertEquals(0.0F, vector4f0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector3f) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector4f vector4f0 = new Vector4f(vector2f0);
      Vector4f vector4f1 = vector4f0.build(2227.1F, Float.NEGATIVE_INFINITY, 0.0F, 0.0F);
      assertEquals("(2227.1, -Infinity, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector3f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      Vector4f vector4f1 = vector4f0.build(1.0F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector4f vector4f0 = null;
      try {
        vector4f0 = new Vector4f((Vector2f) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector4f", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      assertEquals(0.0F, vector4f0.x, 0.01F);
  }
}
