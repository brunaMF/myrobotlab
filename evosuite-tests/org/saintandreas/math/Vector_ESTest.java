/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 05:35:03 GMT 2024
 */

package org.saintandreas.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.FloatBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.saintandreas.math.Matrix3f;
import org.saintandreas.math.Quaternion;
import org.saintandreas.math.Vector2f;
import org.saintandreas.math.Vector3f;
import org.saintandreas.math.Vector4f;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Vector_ESTest extends Vector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = vector4f0.mult(vector4f0);
      assertEquals("(0.0, 1.0, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_XY;
      Vector2f vector2f1 = vector2f0.subtract(1.0F);
      assertEquals(0.0F, vector2f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NEGATIVE_INFINITY;
      Vector4f vector4f1 = Vector4f.UNIT_Y;
      Vector4f vector4f2 = vector4f1.project(vector4f0);
      assertEquals(Float.NaN, vector4f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = Vector4f.UNIT_Y;
      Vector4f vector4f2 = vector4f1.project(vector4f0);
      assertEquals(Float.NaN, vector4f2.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.NAN;
      Vector3f vector3f1 = vector3f0.normalize();
      assertEquals(Float.NaN, vector3f1.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float[] floatArray0 = vector4f0.toArray();
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.ZERO;
      float float0 = vector3f0.lengthSquared();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.length();
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      boolean boolean0 = vector4f0.isUnitVector();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      Quaternion quaternion1 = Quaternion.ZERO;
      boolean boolean0 = quaternion1.equalsEpsilon(quaternion0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-3101.7507F), 0.0F, 130.132F);
      Vector3f vector3f1 = Vector3f.UNIT_Y;
      float float0 = vector3f0.dot(vector3f1);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-703.93854F), (-703.93854F), (-4654.6F), 65504.0F);
      Quaternion quaternion1 = Quaternion.fromMatrix3f(665.4709F, 665.4709F, 65504.0F, (-1511.6F), (-4654.6F), (-703.93854F), 600.0F, (-703.93854F), 665.4709F);
      float float0 = quaternion0.dot(quaternion1);
      assertEquals((-1537541.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      Vector4f vector4f1 = Vector4f.COLOR_GREEN;
      float float0 = vector4f0.distanceSquared(vector4f1);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = Vector4f.UNIT_XYZW;
      float float0 = vector4f0.distance(vector4f1);
      assertEquals(1.4142135F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1.0F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      float float0 = vector4f0.angleBetween(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = new Vector4f();
      float float0 = vector4f0.angleBetween(vector4f1);
      assertEquals(1.5707964F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      // Undeclared exception!
      try { 
        vector4f0.subtract((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      // Undeclared exception!
      try { 
        vector4f0.scaleAdd(1.0F, (Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      // Undeclared exception!
      try { 
        vector4f0.project((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      // Undeclared exception!
      try { 
        vector4f0.mult((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_BLUE;
      // Undeclared exception!
      try { 
        vector4f0.min((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      // Undeclared exception!
      try { 
        vector2f0.max((Vector2f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_WHITE;
      // Undeclared exception!
      try { 
        vector4f0.interpolate((Vector4f) null, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      float[] floatArray0 = new float[1];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      // Undeclared exception!
      try { 
        quaternion0.fillBuffer(floatBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapFloatBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.NAN;
      // Undeclared exception!
      try { 
        vector4f0.fillBuffer((FloatBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector4f0.equalsEpsilon((Vector4f) null, Float.POSITIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.IDENTITY;
      // Undeclared exception!
      try { 
        quaternion0.equalsEpsilon((Quaternion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.dot((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      // Undeclared exception!
      try { 
        vector4f0.divide((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        vector4f0.distanceSquared((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.distance((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      // Undeclared exception!
      try { 
        vector4f0.angleBetween((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_W;
      // Undeclared exception!
      try { 
        vector4f0.add((Vector4f) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.saintandreas.math.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f((-3735.9F));
      float float0 = vector4f0.lengthSquared();
      assertEquals(5.5827792E7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      float float0 = vector4f0.distanceSquared(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_Y;
      boolean boolean0 = vector4f0.equalsEpsilon(vector4f0, 1.0F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Quaternion quaternion0 = new Quaternion((-703.93854F), (-703.93854F), (-4654.6F), 65504.0F);
      float float0 = quaternion0.dot(quaternion0);
      assertEquals(4.3134305E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = vector4f0.inverse();
      assertEquals("(1.0, Infinity, Infinity, 1.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix3f matrix3f0 = new Matrix3f((-398.7F), (-1.0F), (-419.6F), (-398.7F), (-1972.5F), 65504.0F, 970.39105F, (-419.6F), 970.39105F);
      Quaternion quaternion0 = Quaternion.fromMatrix3f(matrix3f0);
      Quaternion quaternion1 = quaternion0.mult((-653.9937F));
      assertEquals((-3115.2207F), quaternion1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1.0F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      Vector4f vector4f1 = vector4f0.add(0.0F);
      assertEquals(1.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.add(vector4f0);
      assertEquals(0.0F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = vector3f0.normalize();
      assertEquals(Float.NaN, vector3f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_XYZW;
      Vector4f vector4f1 = vector4f0.negate();
      assertEquals((-1.0F), vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      vector4f0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f((-1.0F));
      Vector4f vector4f0 = new Vector4f(vector3f0);
      boolean boolean0 = vector4f0.isValid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3f vector3f0 = Vector3f.POSITIVE_INFINITY;
      boolean boolean0 = vector3f0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.UNIT_X;
      Vector4f vector4f1 = vector4f0.divide(858.13434F);
      boolean boolean0 = vector4f0.equalsEpsilon(vector4f1, 0.0F);
      assertEquals(0.0011653187F, vector4f1.x, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = vector4f0.min(vector4f0);
      assertEquals(1.0F, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector2f vector2f0 = Vector2f.UNIT_Y;
      Vector2f vector2f1 = vector2f0.max(vector2f0);
      assertEquals(0.0F, vector2f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Vector3f vector3f0 = new Vector3f();
      Vector3f vector3f1 = vector3f0.interpolate(vector3f0, 0.0F);
      assertTrue(vector3f1.equals((Object)vector3f0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.ZERO;
      float float0 = vector4f0.length();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.scaleAdd(0.0F, vector4f0);
      assertEquals(0.0F, vector4f1.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      Vector4f vector4f1 = vector4f0.project(vector4f0);
      boolean boolean0 = vector4f1.isValid();
      assertFalse(boolean0);
      assertEquals(Float.NaN, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float float0 = vector4f0.distance(vector4f0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      float[] floatArray0 = new float[9];
      FloatBuffer floatBuffer0 = FloatBuffer.wrap(floatArray0);
      vector4f0.fillBuffer(floatBuffer0);
      assertEquals(0.0F, vector4f0.w, 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.scale(2381.6F);
      assertEquals(Float.POSITIVE_INFINITY, vector4f1.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.POSITIVE_INFINITY;
      Vector4f vector4f1 = vector4f0.divide(vector4f0);
      assertEquals("(NaN, NaN, NaN, NaN)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Vector4f vector4f0 = new Vector4f();
      boolean boolean0 = vector4f0.isUnitVector();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector4f vector4f0 = Vector4f.COLOR_RED;
      Vector4f vector4f1 = vector4f0.subtract(vector4f0);
      assertEquals("(0.0, 0.0, 0.0, 0.0)", vector4f1.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Quaternion quaternion0 = Quaternion.ZERO;
      boolean boolean0 = quaternion0.equalsEpsilon(quaternion0);
      assertTrue(boolean0);
  }
}
